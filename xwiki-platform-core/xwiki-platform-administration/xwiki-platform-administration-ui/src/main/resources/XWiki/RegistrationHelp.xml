<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>XWiki</web>
  <name>RegistrationHelp</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.Registration</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1267027868000</creationDate>
  <date>1267027924000</date>
  <contentUpdateDate>1267027924000</contentUpdateDate>
  <version>1.1</version>
  <title>Registration Page Documentation</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>XWiki.RegistrationHelp</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>f10f7209-a83d-4793-9367-56e11a2600e1</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>ul &gt; li &gt; ul &gt; li {
  list-style-type: none;
}
ul.showCircles li {
  list-style-type: circle;
}</code>
    </property>
    <property>
      <name>No Bullets</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <content>The verified registration page is the new default registration method for XWiki Enterprise. It supports image captchas supplied by the captcha module it also supports validating the input fields both on the server side and in Javascript using [[LiveValidation&gt;&gt;http://livevalidation.com/]].

{{info}}The Verified Registration page does not require programming rights to operate so you can configure it even if you are administrating a virtual wiki on a wiki farm.{{/info}}

= Options you can set from the [[Registration section of the Administration Application&gt;&gt;XWiki.XWikiPreferences?section=Registration&amp;editor=globaladmin#HCustomizeXWikiRegistration]] =

{{id name=heading/}}
* **Registration page heading**
** This is the line at the top of the page which is shown to people who are registering and when they have just registered. Velocity and XWiki Syntax 2.0 code may be used.

{{id name=welcomeMessage/}}
* **Welcome Message**
** This is only shown when people are filling out the form. Velocity and XWiki Syntax 2.0 code may be used.

{{id name=liveValidation_enabled/}}
* **Enable Javascript field validation** (Default: Yes)
** Set this to false and LiveValidation javascript will not be generated (fields will still be validated at the server side.)

{{id name=liveValidation_defaultFieldOkMessage/}}
* **Default field okay message** (Default: 'Ok.')
** LiveValidation shows a message to indicate to users that they have filled in the field satisfactorily. this is the message they will get if it is not overridden for a particular field.  Velocity code may be used.

{{id name=loginButton_enabled/}}
* **Enable login button** (Default: Yes)
** When the user has registered, we provide a button for them to click which will post their username and password to the login action and get them logged in right away. This however causes the username and password to be passed back in the HTML which may be unacceptable depending on your security needs.

{{id name=loginButton_autoLogin_enabled/}}
* **Enable automatic login** (Default: No)
** If login button is enabled, then you can have a piece of Javascript push the login button for the user.

{{id name=defaultRedirect/}}
* **Redirect here after registration** (Default: "$xwiki.getURL('Main.WebHome')")
** This is the URL of the which the user will be redirected to after pushing the login button if the xredirect parameter is not specified.  Velocity code may be used.

{{id name=requireCaptcha/}}
* **Require captcha to register** (Default: No)
** Set this true to require the user to solve a captcha in order to register. **NOTE:** captcha.enable must be set true in the xwiki.properties configuration file in xwiki/WEB-INF/

{{id name=registrationSuccessMessage/}}
* **Registration Successful Message**
** This is shown to the user when they have registered successfully. Velocity and XWiki Syntax 2.0 code may be used.

= Adding or removing fields to the registration form by editing the XWiki.Registration =

In XWiki.Registration, the fields are defined separately from the code which generates the HTML. You can add or remove fields simply by modifying the configuration. Fields are defined as maps. The maps are each required to have a 'name' key which must map to a string. This string will be the id and name of the field when it is rendered into HTML.

* **label** (string)
** This is what the user is prompted with above the field for their input.

* **tag** (string)
** Usually a field is an input field but if you specify a different tag (eg: textarea) then it will not be an input type field. You can even specify non field tags such as &lt;img&gt; or &lt;div&gt; but it may cause invalid HTML to be generated.

* **params** (map)
** This map corresponds to the HTML parameters of the tag. If you specify params to be { 'class' : 'someclass', 'style' : 'color:red;' } then the HTML tag will read &lt;input class="someclass" style="color:red;"&gt;

* **noReturn** (boolean)
** If this is specified, the field will not be filled in if there is an error and the user has to fix their registration information. If you don't want a password to be passed back in html then set this true for the password fields. Used for the captcha because it makes no sense to pass back an incorrect captcha answer.

* **doAfterRegistration** (string)
** Some Velocity code which will be executed after a successful registration. This is used in the favorite color example. Remember to put the code in single quotes ('') because you want the 'code' entry to equal the literal code, not the output from running it.

* **validate** (map)
** This map is the most complex and is covered later on in this section.

Here is the definition of a field which is used in the registration page

{{code language=none}}
## The user name field, mandatory and programmatically checked to make sure the username doesn't exist.
#set($field = 
  {'name' : 'xwikiname',
    'label' : $msg.get('core.register.username'),
    'params' : {
      'type' : 'text',
      'onfocus' : 'prepareName(document.forms.register);',
      'size' : '20'
    },
    'validate' : {
      'mandatory' : { 
        'failureMessage' : $msg.get('XWiki.Registration.fieldMandatory') 
      },
      'programmaticValidation' : {
        'code' : '#nameAvailable($request.get("xwikiname"))',
        'failureMessage' : $msg.get('core.register.userAlreadyExists')
      }
    }
  })
#set($discard = $fields.add($field))
{{/code}}

Line by line it is:
(% class="showCircles" %)
* A comments and the beginning of a set directive.
** name is set to 'xwikiname'
** label is set to 'User Id:' or translation there of.
** params is set to a new map
*** params map gets type set to 'text'
*** params map gets onfocus set to some Javascript
*** params map gets size set to '20'
** End of params map
** validate is set to a new map.
*** validate map gets mandatory set to new map.
**** validate.mandatory gets failureMessage set to 'this field is mandatory' or translation there of.
*** validate.mandatory is ended.
*** validate gets programmaticValidation set to new map
**** validate.programmaticValidation gets 'code' set to a macro call which will check if the username is taken.
**** validate.programmaticValidation gets 'failureMessage' set to a message telling the user that the name is taken.
*** validate.programmaticValidation map is closed.
** validate map is closed.
* Map for this field is closed and set directive ends.
* This field is added to the fields array and the output from the add function is set to discard to avoid having it print on the page.

== Validation Constraints ==
The validate field configuration key is itself a map which allows a number of parameters to be defined. Validation is done in the order of mandatory, then regex, then mustMatch, then programmatic validation so if nothing is entered and the mandatory constraint is not in place then the entry will be accepted and if a entry fails the regex test then it will not be evaluated programmatically.

* **mandatory** (Optional)
** Will fail if the field is not filled in.
** **failureMessage** (Required)
*** The message to display if the field is not filled in.
** **noscript** (Optional)
*** Will not be validated by Javascript, only on the server side.

* **regex** (Optional)
** Will validate the field using a regular expression. because of character escaping, you must provide a different expression for the javascript validation and the server side validation. Both javascript and server side validation are optional, but if you provide neither, then your field will not be validated.
** **failureMessage** (Optional)
*** The message to display if the regex evaluation returns false, note that this is sent in HTML so &amp;lt; will display as &lt;
** **jsFailureMessage** (Optional)
*** The message for Javascript to display if regex fails. If jsFailureMessage is not defined Javascript uses failureMessage. NOTE: Javascript injects the failure message using createTextNode so &amp;lt; will be displayed as &amp;lt;
** **pattern** (Optional)
*** The regular expression to test the input at the server side, it's important to use this if you need to validate the field for security reasons, also it is good because not all browsers use javascript or have it enabled.
** **jsPattern** (Optional)
*** The regular expression to use for client side, you can use escaped characters to avoid them being parsed as Javascript code. To get javascript to unescape characters use: "'+unescape('%5E%5B%24')+'"
**** **NOTE:** If no jsPattern is specified, the jsValidator will try to validate using 'pattern'.
** **noscript** (Optional)
*** Will not be validated by Javascript, only on the server side.

* **mustMatch** (Optional)
** Will fail if the entry into the field is not the same as the entry in another field. Used for password confirmation.
** **failureMessage** (Required)
*** The message to display if the field doesn't match the named field.
** **name** (Required)
*** The name of the field which this field must match.
** **noscript** (Optional)
*** Will not be validated by Javascript, only on the server side.


* **programmaticValidation** (Optional)
** This form of validation executes a piece of Velocity code which you give it and if the code returns the word "failed" then it gives the error message. Remember to put the code in single quotes because you want the value of 'code' to equal the literal code, not the output from running it (Velocity parses code in double quotes)
** **code** (Required)
*** The code which will be executed to test whether the field is filled in correctly.
** **failureMessage** (Required)
*** The message which will be displayed if evaluating the code returns "false".

* **fieldOkayMessage** (Optional)
** The message which is displayed by LiveValidation when a field is validated as okay. If not specified, will be the LiveValidation default field ok message</content>
</xwikidoc>
