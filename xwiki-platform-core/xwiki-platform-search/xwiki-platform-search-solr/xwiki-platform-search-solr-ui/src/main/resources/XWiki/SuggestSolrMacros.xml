<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>XWiki</web>
  <name>SuggestSolrMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.SearchCode</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Solr Suggestion Macros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#**
 * Search Suggest parameters are normally parsed from the query property of a Search Suggest source. Each parameter is
 * specified on a separate line using 'key=value' and can be later passed to the search query using
 * Query#bindValue(key, value) . Parameters can have multiple values, in which case each value is specified on a
 * separate line with:
 *   key=value1
 *   key=value2
 *#
#macro (parseSearchSuggestParameters $queryString $params)
  #set ($return = {})
  ## Each line sets a query parameter.
  #foreach ($line in $queryString.split('\r?\n'))
    #set ($separatorPosition = $line.indexOf('='))
    #if ($separatorPosition &lt; 0)
      ## For backward compatibility, if the parameter name is omitted then we consider it to be the actual search query.
      #set ($key = 'q')
      #set ($value = $line)
    #else
      #set ($key = $line.substring(0, $separatorPosition))
      #set ($value = $line.substring($mathtool.add($separatorPosition, 1)))
    #end
    ## Parameters can have multiple values.
    #set ($values = $return.get($key))
    #if (!$values)
      ## This is the first value (and maybe the only one).
      #set ($discard = $return.put($key, $value))
    #else
      #if (!$values.subList(0, 0))
        ## This is the second value. We need a list.
        #set ($values = [$values])
        #set ($discard = $return.put($key, $values))
      #end
      #set ($discard = $values.add($value))
    #end
  #end
  #set ($params = $NULL)
  #setVariable("$params" $return)
#end

#macro (setDefaultSearchSuggestParameters $params)
  ## By default the given text input is the query statement. We don't do prefix search by default because it is costly,
  ## but you can easily overwrite this from the Search Suggest source by adding the line:
  ##   q=__INPUT__*
  ## or simply:
  ##   __INPUT__*
  ## to the query property. Of course, you can do prefix search even from the Search Suggest input by typing text*
  ## (i.e. adding the wildcard character at the end) but this is more for advanced users.
  #if (!$params.q)
    #set ($params.q = '__INPUT__')
  #end
  ##
  ## Default filters. Note that using separate filter queries improves the filter cache.
  ## First, let's see which filters have been set from the Search Suggest source.
  #set ($filterNames = $collectionstool.set)
  #set ($filterQuery = $params.fq)
  #if ($filterQuery)
    #if (!$filterQuery.subList(0, 0))
      ## A single filter was set.
      #set ($filterQuery = [$filterQuery])
    #end
    #foreach ($item in $filterQuery)
      #set ($discard = $filterNames.add($stringtool.substringBefore($item, ':')))
    #end
  #else
    #set ($filterQuery = [])
  #end
  ## Add the default filters only if they aren't already set.
  #if (!$filterNames.contains('locale'))
    #set ($discard = $filterQuery.add("locale:(""$xcontext.locale"" OR """")"))
  #end
  #if (!$xcontext.isMainWiki() &amp;&amp; !$filterNames.contains('wiki'))
    ## Subwikis search by default in their content only.
    #set ($discard = $filterQuery.add("wiki:$xcontext.database"))
  #end
  #if (!$filterNames.contains('hidden') &amp;&amp; $xwiki.getUserPreference('displayHiddenDocuments') != 1)
    #set ($discard = $filterQuery.add("hidden:false"))
  #end
  #set ($params.fq = $filterQuery)
#end

#macro (prepareSearchSuggestStatement $params $input)
  #set ($queryStatement = $params.q)
  ## Keep only the last value, if multiple values are specified (i.e. if the default value was overwritten from the
  ## Search Suggest source).
  #if ($queryStatement.subList(0, 0))
    #set ($queryStatement = $queryStatement.get($mathtool.sub($queryStatement.size(), 1)))
  #end
  ## Inject the given text input.
  #set ($queryStatement = $queryStatement.replace('__INPUT__', $input))
  #set ($params.q = $queryStatement)
#end

#macro (createSearchSuggestQuery $queryString $input $query)
  #parseSearchSuggestParameters($queryString $params)
  #setDefaultSearchSuggestParameters($params)
  #set ($queryStatement = $params.remove('q').replace('__INPUT__', $input))
  #set ($return = $services.query.createQuery($queryStatement, 'solr'))
  #foreach ($entry in $params.entrySet())
    #set ($discard = $return.bindValue($entry.key, $entry.value))
  #end
  #set ($query = $NULL)
  #setVariable("$query" $return)
#end

#macro (getSearchSuggestResults $results)
  #createSearchSuggestQuery($request.query $request.input $query)
  #set ($limit = $mathtool.toInteger($request.nb))
  #if (!$limit)
    #set ($limit = 3)
  #end
  #set ($discard = $query.setLimit($limit))
  #set ($results = $NULL)
  #setVariable("$results" $query.execute()[0].results)
#end
{{/velocity}}</content>
</xwikidoc>
