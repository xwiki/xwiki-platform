<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>Main</web>
  <name>LuceneSearch</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.Search</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1252450800000</creationDate>
  <date>1298680350000</date>
  <contentUpdateDate>1298680350000</contentUpdateDate>
  <version>1.1</version>
  <title>#if("$!{request.text}"=='')$services.localization.render('search.page.lucene.title.noquery')#else$services.localization.render('search.page.lucene.title.query', [$request.text])#end</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
$xwiki.ssfx.use("uicomponents/search/search.css", true)##
## Disable the document extra data: comments, attachments, history...
#set($docextras = [])
## ===================
## Lucene search
## ===================
## Inputs : $request.text
## Outputs : $list, $isScored
## ===================
## Uncomment this line to overload the maximum list of wiki where to search (also the one listed in the wikis combobox)
## #set($allwikinamelist = ["xwiki", "wiki1", "wiki2"])
##
## Uncomment this line to overload the wikis where to search
## #set($wikinames = "xwiki,wiki,wiki")
##
## Uncomment this line to overload the languages to search
## #set($languages = "default,en,de")
#set ($rssmode = ("$!request.xpage" == 'plain'))
#if ($rssmode)
  $response.setContentType('application/rss+xml')
#end
## --------------------------
## Hidden documents filtering
## --------------------------
#set($hiddenClause = ' +hidden:false')
## TODO: rewrite this when we'll have a user configuration script service
#if($xwiki.getDocument($xcontext.user).getValue('displayHiddenDocuments') == 1)
  #set($hiddenClause = '')
#end
## ---------------
## Space filtering
## ---------------
#set($extraClause = '')
#set($spaces = $xwiki.spaces)
#set($selectedSpace = "$!request.space")
#if($selectedSpace != '' &amp;&amp; !$blacklistedSpaces.contains($selectedSpace))
  #set($extraClause = " +exactspace:""${selectedSpace}""")
#end
## ----------------------------------------------------------------------
## Exclude Blacklisted spaces ($blacklistedSpaces is set in xwikivars.vm)
## Also exclude WebPreferences.
## ----------------------------------------------------------------------
#foreach ($blacklistedSpace in $blacklistedSpaces)
  #set ($extraClause = " -exactspace:${blacklistedSpace}${extraClause}")
#end
#if(!$hasAdmin &amp;&amp; !$isAdvancedUser)
  #set ($extraClause = " -name:WebPreferences${extraClause}")
#end
## ---------------
## Space macros
## ---------------
#macro(spaceoption $space $selectedSpace)
  &lt;option value="${space}" #if($selectedSpace == $space)selected="selected"#end&gt;$space&lt;/option&gt;
#end
#macro(spaceselect $selectedSpace $spaces)
  &lt;select name="space" title="$services.localization.render('search.page.bar.spaces.title')"&gt;
    &lt;option value="" #if($selectedSpace == '')selected="selected"#end&gt;$services.localization.render('search.page.bar.spaces.all')&lt;/option&gt;
    #foreach($space in $spaces)
      #if (!$blacklistedSpaces.contains($space) &amp;&amp; $xwiki.hasAccessLevel('view', "${space}.DocumentReservedForInternalXWikiUsage${mathtool.random(0, 999)}"))
        #spaceoption($space $selectedSpace)
      #end
    #end
  &lt;/select&gt;
#end
## ---------------
## Wikis filtering
## ---------------
## Parse provided wikis
#set($wikinamelist = [])
#if (!$wikinames)
  #set($wikinametable = $request.getParameterValues("wikinames"))
  #if (!$wikinametable || $request.wikinames == "")
    #set($wikinametable = $allwikinamelist)
  #end
  #set($wikinames = '')
  #foreach($wikiname in $wikinametable)
    #set($ok = $wikinamelist.add($wikiname))
    #if($wikinames != "")
      #set($wikinames = $wikinames + ",")
    #end
    #set($wikinames = $wikinames + $wikiname)
  #end
  #if (!$xcontext.isMainWiki() &amp;&amp; $wikinames == '')
    #set($wikinames = $xcontext.database)
  #end
#else
  #set($wikinametable = $wikinames.split(", "))
  #foreach($wikiname in $wikinametable)
    #set($ok = $wikinamelist.add($wikiname))
  #end
#end
##
#if($xcontext.isMainWiki())
  #if(!$allwikinamelist)
    #set($currentwikiname = $xcontext.database)
    #set($allwikinamelist = $xwiki.wikiNames)
  #end
  ## ---------------
  ## Wikis macros
  ## ---------------
  #macro(wikioption $wikiname $wikinamelist)
    &lt;option value="$wikiname" #if($wikinamelist.contains($wikiname))selected="selected"#end&gt;$wikiname&lt;/option&gt;
  #end
  #macro(wikisselect $wikinamelist $allwikinamelist)
    ## TODO: find a scaling way to handle wikis multiselect, does not use multiple="multiple" for now because it does not looks nice
    &lt;select name="wikinames"&gt;
      &lt;option value="" selected="selected"&gt;$services.localization.render('search.page.bar.wikis.all')&lt;/option&gt;
      #foreach($wikiname in $allwikinamelist)
        #wikioption($wikiname $wikinamelist)
      #end
    &lt;/select&gt;
  #end
#else
  #if($wikinames == '')
    #set($wikinames = $xcontext.mainWikiName)
  #end
#end
## ---------------
## Query preparation
## ---------------
#set($text = "$!request.getParameter('text')")
#set($query = $text)
#set($utext = $escapetool.url($query))
#set($defaultItemsPerPage = 30)
#set($itemsPerPage = $mathtool.toInteger("$!{request.perPage}"))
#if(!$itemsPerPage || $itemsPerPage &lt;= 0)
  #set($itemsPerPage = $defaultItemsPerPage)
#end
## ---------------
## Query form
## ---------------
#if(!$rssmode)
{{html}}
&lt;form action="" id="searchBar"&gt;
  &lt;div class="centered"&gt;
    &lt;label for="text" class="hidden"&gt;$services.localization.render('search.page.query.label')&lt;/label&gt;
    &lt;input type="text" id="text" name="text" class="searchQuery #if($text == '') withTip#end" #if($text == '') value="$services.localization.render('search.page.bar.query.tip')" #else value="${escapetool.xml($text)}" #end title="$services.localization.render('search.page.bar.query.title')"/&gt;
    #if ($xcontext.isMainWiki())
      #wikisselect($request.wikinames $allwikinamelist)
    #end
    #spaceselect($selectedSpace $spaces)
    &lt;span class='buttonwrapper'&gt;
      &lt;input type="submit" class="button searchButton" value="$services.localization.render('search.page.bar.submit')" title="$services.localization.render('search.page.bar.submit.title')"/&gt;
    &lt;/span&gt;
    &lt;div class="searchHelp"&gt;$services.localization.render('search.page.bar.querytip')&lt;/div&gt;
  &lt;/div&gt;
&lt;/form&gt;
{{/html}}
#end
## ---------------
## Results processing
## ---------------
## Since Lucene doesn't support '*' or '?' as the first character we just remove it for now. Note that the SOLR
## search doesn't have this limitation
#set ($query = $stringtool.removeStart($query, '*'))
#set ($query = $stringtool.removeStart($query, '?'))
## '!' is also an operator, and if it's not at the start of a word, it will cause a query parsing exception
#set ($query = $query.replaceAll('(?&lt;!^| )!++|!++(?=$| )', ''))
#if($query != '')
  #set($lucene = $xwiki.getPlugin("lucene"))
  #if($lucene)    
    ## ---------------
    ## Lucene search
    ## ---------------
    #set($searchresults = $lucene.getSearchResults("+(${query})${extraClause}${hiddenClause}", '', $wikinames, $!languages))
    #if($searchresults &amp;&amp; $searchresults.getHitcount() &gt; 0)
      ## -----------------
      ## Pagination (top)
      ## -----------------
      #if(!$rssmode)
        #set($paginationParameters = {'url' : $doc.getURL('view', "text=${escapetool.url($query)}&amp;amp;space=${escapetool.url($selectedSpace)}"), 'totalItems' : $searchresults.getHitcount(), 'defaultItemsPerPage' : $defaultItemsPerPage, 'position': 'top'})

        {{html}}
          #pagination($paginationParameters)
        {{/html}}
      #end
      ## -----------------
      ## Display results
      ## -----------------
      #set($firstIndex = "$!{paginationParameters.firstItem}")
      #if($firstIndex == '')
        #set($firstIndex = "$!request.getParameter('firstIndex')")
        #if($firstIndex == '')
          #set($firstIndex = '0')
        #end
      #end
      #set($firstIndex = $mathtool.toInteger($firstIndex))
      #set($firstIndex = $firstIndex + 1)
      #set($results = $searchresults.getResults("$firstIndex", "$itemsPerPage"))
      #if ($rssmode)
        #set ($list = [])
        #foreach ($item in $results)
          #if ($item.type != "attachment")
            #set ($ok = $list.add(0, "${item.space}.${item.name}"))
          #end
        #end
        #set ($feed = $xwiki.feed.getDocumentFeed($list, {}))
        #set ($feedURI = $doc.getExternalURL("view"))
        #set ($discard = $feed.setLink($feedURI))
        #set ($discard = $feed.setUri($feedURI))
        #set ($discard = $feed.setAuthor('XWiki'))
        #set ($discard = $feed.setTitle($services.localization.render('search.rss', [$text])))
        #set ($discard = $feed.setDescription($services.localization.render('search.rss', [$text])))
        #set ($discard = $feed.setLanguage($xcontext.language))
        #set ($discard = $feed.setCopyright($xwiki.getXWikiPreference('copyright')))
        {{{$xwiki.feed.getFeedOutput($feed, 'rss_2.0')}}}
      #else
        #set ($list = $results)
        #set ($isScored = true)

        {{include reference="XWiki.Results"/}}
      #end
      ## -----------------
      ## Pagination (bottom)
      ## -----------------
      #if(!$rssmode)
        #set($paginationParameters.position = 'bottom')

        {{html}}
          #pagination($paginationParameters)
        {{/html}}
        ## ---------------
        ## RSS link
        ## ---------------
        #if($selectedSpace == '')
          #set($rssURL = $xwiki.getURL($doc.fullName, 'get', "xpage=plain&amp;outputSyntax=plain&amp;text=${utext}" ))
        #else
          #set($rssURL = $xwiki.getURL($doc.fullName, 'get', "xpage=plain&amp;outputSyntax=plain&amp;space=${selectedSpace}&amp;text=${utext}"))
        #end

        {{html}}
          &lt;a href="${rssURL}" class='hasIcon iconRSS'&gt;$services.localization.render('search.rss', ["[$escapetool.xml($query)]"])&lt;/a&gt;
        {{/html}}
      #end
    #else

      {{info}}$services.localization.render('search.page.results.noResults'){{/info}}
    #end
  #else

    {{error}}$services.localization.render('search.lucene.plugin.notfound'){{/error}}
  #end
#end
#if (!$rssmode)
  ## ---------------
  ## Rebuild processing
  ## ---------------
  #set($lucene = $xwiki.getPlugin("lucene"))
  #if($lucene)
    ## ---------------
    ## Queue
    ## ---------------
    #set ($queuesize = $xwiki.lucene.getQueueSize())
    #if ($queuesize &gt; 0)

      {{info}}$services.localization.render('search.page.lucene.rebuilding', [${queuesize}]){{/info}}
    #end
  #end## lucene exists
#end## !$rssmode
{{/velocity}}</content>
</xwikidoc>
