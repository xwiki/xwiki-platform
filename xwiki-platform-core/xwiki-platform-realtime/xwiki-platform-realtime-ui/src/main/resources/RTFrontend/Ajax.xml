<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="RTFrontend.Ajax" locale="">
  <web>RTFrontend</web>
  <name>Ajax</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Realtime Ajax Merge</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki=false}}
#*
  This script provides a serverside merge API which allows realtime sessions to peacefully coexist with simultaneous
  non-realtime sessions. It expects the client to post its current realtime session content, the name of the relevant
  document, and the version of its latest common ancestor (the last known savepoint).
*#
##
#set ($result = {})
#set ($result.error = false)
#set ($CR = $util.decodeURI("%0D"))
##
#if ($request.version)
  ##
  ## the version the client expects to be its latest common ancestor
  #set ($previousVersion = $request.get('version'))
  ## the language of the document
  #set ($language = $request.get('language'))
  ## the name of the document
  #set ($documentName = $request.get('document'))
  ## the realtime editor's content
  #set ($currentContent = $request.get('content'))
  ##
  #set ($nextDocument = $xwiki.getDocument($documentName).getTranslatedDocument($language))
  #set ($nextContent = $nextDocument.content)
  #set ($previousDocument = $nextDocument.getDocumentRevision($previousVersion))
  #set ($previousContent = $previousDocument.content)
  ##
  ## Check if the translation in the requested language exists.
  ## If the translation does not exist, i.e. "getTranslatedDocument" is the default document, it means it's a new translation.
  ## In that case we have to set the contents to ""
  #if ($language != "default" &amp;&amp; $nextDocument.locale != $language)
    #set ($nextContent = '')
    #set ($previousContent = '')
  #end
  ##
  #if ("$!{request.convertHTML}" == '1')
    #set ($xdom = $services.rendering.parse($currentContent, 'xhtml/1.0'))
    #set ($currentContent = $services.rendering.render($xdom, $nextDocument.syntax.toIdString()))
  #end
  ##
  #set ($result.latestVersion = $previousVersion)
  #set ($result.currentVersion = $nextDocument.version)
  #set ($result.previousVersionContent = $nextDocument.content) ##TODO : convert if needed
  ##
  ## We don't need to merge if the content has not been changed outside of the real-time session (previous == next) or
  ## if the changes done outside of the real-time session are the same as those done within the real-time session
  ## (current == next).
  #if ($previousContent == $nextContent || $currentContent == $nextContent)
    #set ($result.content = $currentContent)
    #set ($result.merged = false)
    #set ($result.conflicts = false)
    #set ($result.saveRequired = $currentContent != $nextContent)
  ## Otherwise we need to perform a 3-way merge.
  #else
    #set ($placeholder = " ${escapetool.getNewline()} ")
    ##
    #set ($previousArray = $previousContent.replace($CR, '').replace($escapetool.getNewline(), $placeholder).split(' '))
    #set ($currentArray = $currentContent.replace($CR, '').replace($escapetool.getNewline(), $placeholder).split(' '))
    #set ($nextArray = $nextContent.replace($CR, '').replace($escapetool.getNewline(), $placeholder).split(' '))
    ##
    ## $services.diff.merge() expects lists so we need to convert the arrays.
    #set ($previousList = $previousArray.subList(0, $previousArray.size()))
    #set ($currentList = $currentArray.subList(0, $currentArray.size()))
    #set ($nextList = $nextArray.subList(0, $nextArray.size()))
    #set ($mergeResult = $services.diff.merge($previousList, $nextList, $currentList, null))
    ##
    #set ($mergedContent = $stringtool.join($mergeResult.merged, ' ').replace($placeholder, $escapetool.getNewline()))
    ##
    #if ("$!{request.convertHTML}" == '1')
      ## FIXME: This requires programming rights.
      #set ($discard = $xcontext.setDoc($nextDocument.document))
      #set ($source = {
        'content': $mergedContent,
        'syntax': $nextDocument.syntax,
        'documentReference': $nextDocument.documentReference
      })
      ## FIXME: We shouldn't depend on a particular WYSIWYG editor. The code should work with the configured WYSIWYG
      ## editor, whatever that may be.
      #set ($mergedContent = $xwiki.getDocument('CKEditor.ContentSheet').getRenderedContent().replaceAll(
        "([\t\r\n]|(\s{2,}))", ''))
    #end
    ##
    #set ($result.content = $mergedContent)
    #set ($result.merged = true)
    #set ($result.conflicts = $mergeResult.log)
    #set ($result.saveRequired = true)
  #end
#end
#if ($xcontext.action == 'get')
  #jsonResponse($result)
#end
{{/velocity}}</content>
</xwikidoc>
