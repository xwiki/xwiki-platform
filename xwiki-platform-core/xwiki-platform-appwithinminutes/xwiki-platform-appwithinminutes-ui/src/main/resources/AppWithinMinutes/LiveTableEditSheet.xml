<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="AppWithinMinutes.LiveTableEditSheet" locale="">
  <web>AppWithinMinutes</web>
  <name>LiveTableEditSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>AppWithinMinutes.LiveTableClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="XWiki.TemplateProviderMacros" /}}

{{include reference="AppWithinMinutes.VelocityMacros" /}}

{{velocity output="false"}}
#macro (listAvailableColumns $classReference)
  &lt;select id="availableColumns" aria-describedby='availableColumnsHint'&gt;
    #set ($classFields = $xwiki.getDocument($classReference).getxWikiClass().properties)
    #if ($classFields.size() &gt; 0)
      &lt;optgroup label="$escapetool.xml($services.localization.render(
          'platform.appwithinminutes.liveTableEditorClassFieldColumnGroupLabel'))" id="classFields"&gt;
        #foreach ($field in $classFields)
          &lt;option value="$field.name"&gt;$escapetool.xml($field.translatedPrettyName)&lt;/option&gt;
        #end
      &lt;/optgroup&gt;
    #end
    &lt;optgroup label="$escapetool.xml($services.localization.render(
        'platform.appwithinminutes.liveTableEditorGenericColumnGroupLabel'))"&gt;
      #foreach ($entry in $genericColumns.entrySet())
        &lt;option value="$entry.key" title="$escapetool.xml($entry.value.get(1))"&gt;
          $escapetool.xml($entry.value.get(0))
        &lt;/option&gt;
      #end
    &lt;/optgroup&gt;
  &lt;/select&gt;
  &lt;a href="#addColumn" class="addColumn" title="$services.localization.render(
    'platform.appwithinminutes.liveTableEditorAddColumnHint')"&gt;$services.icon.renderHTML('add')&lt;/a&gt;
#end

#macro (displayHelpPanel)
  #set ($genericColumns = {
    'doc.title': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocTitleColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocTitleColumnDescription')
    ],
    'doc.name': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocNameColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocNameColumnDescription')
    ],
    'doc.location': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocLocationColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocLocationColumnDescription')
    ],
    'doc.author': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocAuthorColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocAuthorColumnDescription')
    ],
    'doc.creator': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocCreatorColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocCreatorColumnDescription')
    ],
    'doc.date': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocDateColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocDateColumnDescription')
    ],
    'doc.creationDate': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocCreationDateColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorDocCreationDateColumnDescription')
    ],
    '_actions': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorActionsColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorActionsColumnDescription')
    ],
    '_attachments': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorAttachmentsColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorAttachmentsColumnDescription')
    ],
    '_images': [
      $services.localization.render('platform.appwithinminutes.liveTableEditorImagesColumnName'),
      $services.localization.render('platform.appwithinminutes.liveTableEditorImagesColumnDescription')
    ]
  })
  &lt;div class="wizard-help"&gt;
    &lt;p&gt;
      &lt;strong&gt;$services.localization.render('platform.appwithinminutes.liveTableEditorHelpTitle')&lt;/strong&gt;
      $services.localization.render('platform.appwithinminutes.liveTableEditorHelpDescription')
    &lt;/p&gt;
    &lt;dl&gt;
      #foreach ($columnId in ['doc.title', 'doc.location', 'doc.date', 'doc.author', '_actions'])
        &lt;dt&gt;$genericColumns.get($columnId).get(0)&lt;/dt&gt;
        &lt;dd&gt;$genericColumns.get($columnId).get(1)&lt;/dd&gt;
      #end
    &lt;/dl&gt;
  &lt;/div&gt;
#end

#macro (displayFormFields)
  &lt;div class="hidden"&gt;
    ## Make sure that only the sheet content is rendered when the class is saved using AJAX.
    &lt;input type="hidden" name="xpage" value="plain" /&gt;
    ## We prevent the class name and the data space from being edited directly. They can be specified in the URL.
    #getAppClassReference($doc)
    &lt;input type="hidden" name="AppWithinMinutes.LiveTableClass_0_class"
      value="$escapetool.xml($services.model.serialize($classReference, 'local'))" /&gt;
    #displayPropertyValue('dataSpace', 'hidden')
    ## We have to pass the list of available columns to the JavaScript code.
    #listAvailableColumns($classReference)
  &lt;/div&gt;
  &lt;dl&gt;
    &lt;dt&gt;
      &lt;label for="xwikidoctitleinput"&gt;$services.localization.render('core.editors.content.titleField.label')&lt;/label&gt;
      &lt;span class="xHint"&gt;$services.localization.render('platform.appwithinminutes.liveTableEditorTitleHint')&lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;&lt;input id="xwikidoctitleinput" type="text" name="title" value="$escapetool.xml($doc.title)"/&gt;&lt;/dd&gt;
    &lt;dt&gt;
      &lt;label for="AppWithinMinutes.LiveTableClass_0_description"&gt;
        $doc.displayPrettyName('description', false, false)
      &lt;/label&gt;
      &lt;span class="xHint"&gt;
        $services.localization.render('platform.appwithinminutes.liveTableEditorDescriptionHint')
      &lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;#displayPropertyValue('description')&lt;/dd&gt;
    &lt;dt&gt;
      &lt;label id='availableColumnsLabel' for="AppWithinMinutes.LiveTableClass_0_columns"&gt;$doc.displayPrettyName('columns', false, false)&lt;/label&gt;
      &lt;span id='availableColumnsHint' class="xHint"&gt;$services.localization.render('platform.appwithinminutes.liveTableEditorColumnsHint')&lt;/span&gt;
    &lt;/dt&gt;
    &lt;dd&gt;#displayPropertyValue('columns')&lt;/dd&gt;
  &lt;/dl&gt;
#end

#macro (getApplicationIcon $classReference)
  #set ($applicationIcon = '')
  ## Look for the corresponding UI extension.
  #set ($uixPointId = 'org.xwiki.platform.panels.Applications')
  #set ($uixObject = $doc.getObject('XWiki.UIExtensionClass', 'extensionPointId', $uixPointId))
  #set ($uixId = $uixObject.getValue('name'))
  #foreach ($uix in $services.uix.getExtensions($uixPointId))
    #if ($uix.id == $uixId)
      #set ($applicationIcon = $uix.parameters.icon)
    #end
  #end
  #if ("$!applicationIcon" == '')
    ## Fallback on the entry icon.
    #set ($templateProviderReference = $services.model.createDocumentReference(
      "$stringtool.removeEnd($classReference.name, 'Class')TemplateProvider",
      $classReference.parent
    ))
    #set ($entryIcon = $xwiki.getDocument($templateProviderReference).getValue('icon'))
    #if ("$!entryIcon" != '')
      #set ($applicationIcon = "icon:$entryIcon")
    #else
      #set ($applicationIcon = 'icon:application')
    #end
  #end
#end

#macro (displayIcon)
  #if ($services.uix)
    #getApplicationIcon($classReference)
    &lt;dl&gt;
      &lt;dt&gt;
        &lt;label for="applicationIcon"&gt;
          $services.localization.render('platform.appwithinminutes.liveTableEditorIcon')
        &lt;/label&gt;
        &lt;span class="xHint"&gt;
          $services.localization.render('platform.appwithinminutes.liveTableEditorIconHintWithPicker',
            [$xwiki.getSkinFile('icons/silk/index_abc.png')])
        &lt;/span&gt;
      &lt;/dt&gt;
      &lt;dd&gt;
        &lt;input id="applicationIcon" name="applicationIcon" type="text" size="10"
          value="$!escapetool.xml($applicationIcon)" /&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
  #end
#end

#macro (doEdit)
  {{html clean="false"}}
  #set ($liveTableObj = $doc.getObject('AppWithinMinutes.LiveTableClass', true))
  #set ($discard = $doc.use($liveTableObj))
  #set ($discard = $xwiki.ssx.use('AppWithinMinutes.LiveTableEditSheet'))
  #set ($discard = $xwiki.jsx.use('AppWithinMinutes.LiveTableEditSheet'))
  #if ("$!request.wizard" == 'true')
    #appWizardHeader('presentation')
  #end
  #displayHelpPanel()
  &lt;div class="form-body"&gt;
    #displayFormFields()
    #displayIcon()
    #if ("$!request.wizard" == 'true')
      #appWizardFooter('presentation')
    #end
  &lt;/div&gt;
  &lt;div class="clearfloats"&gt;&lt;/div&gt;
  {{/html}}

  {{iconPicker id="applicationIcon" prefix="icon:" /}}
#end

#macro (maybeGrantSpaceAdminRight $spaceRef)
  ## Grant space administration rights only if the space is new. Don't overwrite existing space preferences.
  #set ($spaceHomeRef = $services.model.resolveDocument('', 'default', $spaceRef))
  #set ($spacePrefsRef = $services.model.resolveDocument('WebPreferences', 'explicit', $spaceRef))
  ## Verify that the current user has script right on the current space home.
  #set ($hasScript = $services.security.authorization.hasAccess('script',  $xcontext.userReference, $spaceHomeRef))
  #if ($hasScript &amp;&amp; !$xwiki.exists($spaceHomeRef) &amp;&amp; !$xwiki.exists($spacePrefsRef))
    #set ($spacePrefsDoc = $xwiki.getDocument($spacePrefsRef))
    #set ($discard = $spacePrefsDoc.use($spacePrefsDoc.getObject('XWiki.XWikiGlobalRights', true)))
    #set ($discard = $spacePrefsDoc.set('allow', 1))
    #set ($discard = $spacePrefsDoc.set('levels', 'admin'))
    #set ($discard = $spacePrefsDoc.set('users', $services.model.serialize($xcontext.userReference, 'default')))
    #set ($discard = $spacePrefsDoc.setTitle('$services.localization.render(''admin.preferences.title'')'))
    #set ($discard = $spacePrefsDoc.setParent($services.model.serialize($spaceHomeRef, 'default')))
    #set ($discard = $spacePrefsDoc.setHidden(true))
    #set ($discard = $spacePrefsDoc.saveWithProgrammingRights($services.localization.render(
      'platform.appwithinminutes.grantSpaceAdminRightsSaveComment')))
  #end
#end

#macro (maybeGrantSpaceAdminRights)
  ## Application space
  #set ($appReference = $doc.documentReference.parent)
  #maybeGrantSpaceAdminRight($appReference)
  ## Code space (if it's not nested inside the application space)
  #set ($className = $request.get('AppWithinMinutes.LiveTableClass_0_class'))
  #set ($classReference = $services.model.resolveDocument($className))
  #if (!$classReference.hasParent($appReference))
    #maybeGrantSpaceAdminRight($classReference.parent)
  #end
#end

#macro (updateAndSaveLiveTable)
  #set ($discard = $doc.updateObjectFromRequest('AppWithinMinutes.LiveTableClass'))
  #set ($liveTableGeneratorDoc = $xwiki.getDocument('AppWithinMinutes.LiveTableGenerator'))

  ## Generate the LiveTable by displaying the LiveTableGenerator document in the context of the current document.
  #set ($displayParameters = $services.display.createDocumentDisplayerParameters())
  #set ($discard = $displayParameters.setExecutionContextIsolated(false))
  #set ($discard = $displayParameters.setContentTranslated(true))
  #set ($generatedLiveTableContent = $services.display.content($liveTableGeneratorDoc, {
    'outputSyntaxId': 'plain/1.0',
    'displayerParameters': $displayParameters
  }))

  ## Use the generated LiveTable content for the data home page.
  #set ($dataSpaceReference = $services.model.resolveSpace($doc.getValue('dataSpace')))
  #set ($dataSpaceHomeReference = $services.model.resolveDocument('', 'default', $dataSpaceReference))
  #if ($dataSpaceHomeReference.equals($doc.documentReference) || !$xwiki.exists($dataSpaceHomeReference))
    ## Either the application space and the data space are one and the same or this is a new application and we don't
    ## want to promote the data space anymore.
    #set ($dataHomePage = $doc)
  #else
    ## The application data is stored in a different space.
    #set ($dataHomePage = $xwiki.getDocument($dataSpaceHomeReference))
    #set ($discard = $dataHomePage.setHidden(true))
    #set ($escapedAppName = $doc.documentReference.parent.name.toLowerCase().replace("'", "''"))
    #set ($discard = $dataHomePage.setTitle("${escapetool.d}services.localization.render('${escapedAppName}.dataSpace.title')"))

    ## Update the home page content.
    #set ($homePageContent = '')
    #if ("$!generatedLiveTableContent" != '')
      ## Include the entries live table in the application home page.
      #set ($escapedReference = $services.model.serialize($dataSpaceHomeReference).replaceAll('([~"])', '~$1'))
      #set ($homePageContent = "{{include reference=""$escapedReference"" /}}")
    #end
    #set ($discard = $doc.setContent($homePageContent))
  #end
  #set ($discard = $dataHomePage.setContent($generatedLiveTableContent))
  ## We assume for now that the output produced by the live table generator uses the same syntax as the code of the live
  ## table generator. We have to set the syntax because the default wiki syntax (used when creating new wiki pages)
  ## could be different than the one used by the live table generator.
  #set ($discard = $dataHomePage.setSyntax($liveTableGeneratorDoc.syntax))

  #set ($minorEdit = "$!request.minorEdit" != '')
  #set ($comment = $request.comment)
  #if ("$!comment" == '')
    #set ($comment = $services.localization.render('platform.appwithinminutes.liveTableEditorSaveComment'))
  #end

  #if ($dataHomePage != $doc)
    ## Save the data home page.
    #set ($discard = $dataHomePage.save($comment, $minorEdit))
  #end

  ## Save the application home page.
  #set ($discard = $doc.save($comment, $minorEdit))
#end

#macro (updateAndSaveIcon)
  #set ($uix = $doc.getObject('XWiki.UIExtensionClass', true))
  #set ($discard = $uix.set('name', "platform.panels.${doc.space}Application"))
  #set ($discard = $uix.set('extensionPointId', 'org.xwiki.platform.panels.Applications'))
  #set ($uixParams = [
    "label=$doc.plainTitle",
    "target=$doc.fullName",
    "icon=$request.applicationIcon"
  ])
  #set ($discard = $uix.set('parameters', $stringtool.join($uixParams, $util.newline)))
  #set ($hasWikiAdminRights = $services.security.authorization.hasAccess('admin', $doc.documentReference.wikiReference))
  #set ($discard = $uix.set('scope', "#if ($hasWikiAdminRights)wiki#{else}user#end"))
  #set ($discard = $doc.save('Updated application icon', true))
#end

#macro (doSave)
  #maybeGrantSpaceAdminRights()
  #updateAndSaveLiveTable()
  #updateAndSaveIcon()
  #if ($action == 'save')
    #if ($errorMessage)
      {{html clean="false"}}
      &lt;div class="box errormessage"&gt;$errorMessage&lt;/div&gt;
      {{/html}}
    #else
      ## Redirect to view mode.
      $response.sendRedirect($doc.getURL())
    #end
  #else
    #if ($errorMessage)
      $response.sendError(400, $errorMessage)
    #else
      $response.setStatus(204)
    #end
  #end
#end
{{/velocity}}

{{velocity}}
#if (!$services.security.authorization.hasAccess('script', $xcontext.userReference, $doc.documentReference))
  {{error}}{{translation key="platform.appwithinminutes.appHomePageNoScriptRight" /}}{{/error}}

#end
#if ("$!request.wizard" == 'true')
  {{include reference="AppWithinMinutes.WizardStep" /}}
#end
{{/velocity}}

{{velocity}}
## Determine the action button that triggered the request
#set ($action = $xcontext.action)
#foreach ($paramName in $request.getParameterMap().keySet())
  #if ($paramName.startsWith('xaction_'))
    #set ($action = $paramName.substring(8))
    #break
  #end
#end
#if ($action == 'edit')
  #doEdit()
#elseif ($action == 'save' || $action == 'saveandcontinue')
  #if ($services.csrf.isTokenValid($request.form_token))
    #doSave()
  #else
    $response.sendRedirect($services.csrf.getResubmissionURL())
  #end
#end
{{/velocity}}</content>
  <object>
    <name>AppWithinMinutes.LiveTableEditSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>dd545e46-1a0f-494a-a1db-5a45892ad4ab</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {

XWiki.LiveTableEditor = Class.create({
  initialize : function() {
    this.columnsInput = $('AppWithinMinutes.LiveTableClass_0_columns');
    this.columnsInput.hide();

    this._createColumnPicker();
    this._createDeprecationMessage();
    this._createColumnList();

    document.observe('xwiki:inline:save', this._onSave.bind(this));
  },
  containsColumn : function(name) {
    var columns = this.list.childElements();
    for(var i = 0; i &lt; columns.length; i++) {
      if (columns[i]._name == name) {
        return true;
      }
    }
    return false;
  },
  addColumn : function(name, prettyName, isClassField) {
    if (!name || this.containsColumn(name)) {
      return;
    }
    var deprecated = !prettyName;
    prettyName = prettyName || name;
    var item = new Element('li').update('&lt;span title="$escapetool.xml($services.localization.render('platform.appwithinminutes.liveTableEditorMoveColumnHint'))"&gt;' + prettyName.escapeHTML() + '&lt;/span&gt;&lt;span title="$escapetool.xml($services.localization.render('platform.appwithinminutes.liveTableEditorDeleteColumnHint'))" class="delete"&gt;X&lt;/span&gt;');
    if (deprecated) {
      item.addClassName('deprecated');
      this.deprecationMessage.show();
    }
    if (isClassField) {
      item.addClassName('classField');
    }
    item._name = name;
    item.down('.delete').observe('click', this._onDeleteColumn.bindAsEventListener(this));
    this.list.insert(item);
    Sortable.create(this.list, {overlap: 'horizontal', constraint: 'horizontal'});
  },
  getColumnPrettyName : function(columnName) {
    var options = this.columnsSelect.options;
    for(var i = 0; i &lt; options.length; i++) {
      if (options[i].value == columnName) {
        return options[i].text;
      }
    }
    return null;
  },
  isClassField : function(columnName) {
    var options = this.columnsSelect.options;
    for(var i = 0; i &lt; options.length; i++) {
      if (options[i].value == columnName) {
        return options[i].up().id == 'classFields';
      }
    }
    return false;
  },
  _createColumnPicker : function() {
    this.columnsSelect = $('availableColumns');
    this.columnsSelect.selectedIndex = -1;

    var addButton = this.columnsSelect.next('a.addColumn');
    addButton.observe('click', this._onAddColumn.bindAsEventListener(this));

    var picker = new Element('div', {'class': 'columnPicker'}).insert(this.columnsSelect).insert(addButton);
    this.columnsInput.up().insert(picker);
    $('availableColumnsLabel').setAttribute('for', 'availableColumns');
  },
  _onAddColumn : function(event) {
    event.stop();
    if (this.columnsSelect.selectedIndex &gt;= 0) {
      var selectedOption = this.columnsSelect.options[this.columnsSelect.selectedIndex];
      this.addColumn(selectedOption.value, selectedOption.text, selectedOption.up().id == 'classFields');
      this.columnsSelect.selectedIndex = -1;
      this.columnsSelect.focus();
    }
  },
  _onDeleteColumn : function(event) {
    event.element().up('li').remove();
    // Hide deprecation message if there are no deprecated columns.
    if (this.list.select('.deprecated').length == 0) {
      this.deprecationMessage.hide();
    }
  },
  _createColumnList : function() {
    this.list = new Element('ul', {'class': 'hList'});
    this.columnsInput.up().insert(this.list);
    this.columnsInput.value.split(' ').each(function(columnName) {
      columnName = columnName.strip();
      if (columnName != '') {
        this.addColumn(columnName, this.getColumnPrettyName(columnName), this.isClassField(columnName));
      }
    }.bind(this));
  },
  _createDeprecationMessage : function() {
    this.deprecationMessage = new Element('div', {'class': 'warningmessage'}).update('$escapetool.javascript($services.localization.render('platform.appwithinminutes.liveTableEditorDeprecatedColumnsWarning'))');
    this.columnsInput.up().insert(this.deprecationMessage);
    this.deprecationMessage.hide();
    var yes = this.deprecationMessage.down('a');
    yes.observe('click', this._onRemoveDeprecatedColumns.bindAsEventListener(this));
    var no = yes.next();
    no.observe('click', function(event) {
      event.stop();
      this.deprecationMessage.hide();
    }.bindAsEventListener(this));
  },
  _onRemoveDeprecatedColumns : function(event) {
    event.stop();
    this.list.select('.deprecated').each(function(item) {
      item.remove();
    });
    this.deprecationMessage.hide();
  },
  _onSave : function() {
    var columns = [];
    this.list.childElements().each(function(item) {
      columns.push(item._name);
    });
    this.columnsInput.value = columns.join(' ');
  }
});

function initForm(form) {
  // Let the sheet handle the form submit. The form is submitted by default to the preview action which dispatches the
  // request to the save action if the save button is detected on the request parameters. By submitting to the edit
  // action the edit sheet is evaluated and thus it can handle the save by itself.
  form.action = XWiki.currentDocument.getURL('edit');

  // Apply the vertical form layout standard.
  form.addClassName('xform');

  // Remove the preview button.
  form.down("input[name='action_preview']").remove();

  // Rename the save buttons.
  form.down("input[name='action_save']").name = 'xaction_save';
  form.down("input[name='action_saveandcontinue']").name = 'xaction_saveandcontinue';

  // Make sure the 'Save &amp; Continue' button is submitted when clicked.
  document.observe('xwiki:inline:save', function(event) {
    event = event.memo.originalEvent;
    if (event.memo['continue']) {
      var submitButton = event.memo.originalEvent.element();
      submitButton.insert({after: new Element('input', {type: 'hidden', 'name': submitButton.name})});
      (function () {
        submitButton.next().remove();
      }).defer();
    }
  }.bindAsEventListener(window));

  new XWiki.LiveTableEditor();
}

function init() {
  var form = $('inline');
  if (form) {
    require(['scriptaculous/dragdrop'], function() {
      initForm(form);
    });
  }
  return form;
}

(XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);

// Allow widgets to catch the save event before the form is submitted when the 'Save &amp; Continue' button is clicked. We
// need this hack because the 'Save &amp; Continue' handler from actionbuttons.js is added right after the page is loaded,
// before any other code can register its own listener.
document.observe('xwiki:actions:save', function(event) {
  document.fire('xwiki:inline:save', {originalEvent: event});
}.bindAsEventListener(window));

return XWiki;
}(XWiki || {}));</code>
    </property>
    <property>
      <name>Code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>AppWithinMinutes.LiveTableEditSheet</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>c8e4a863-1a27-47d5-bb40-a37bcd27508d</guid>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <name>AppWithinMinutes.LiveTableEditSheet</name>
    <number>0</number>
    <className>XWiki.SheetDescriptorClass</className>
    <guid>b4421c7c-8010-487f-aa21-8abb799e011e</guid>
    <class>
      <name>XWiki.SheetDescriptorClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <action>
        <customDisplay/>
        <disabled>0</disabled>
        <name>action</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>Action</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </action>
    </class>
    <property>
      <action>edit</action>
    </property>
  </object>
  <object>
    <name>AppWithinMinutes.LiveTableEditSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>d6100cff-9fc3-46be-b56a-0561cadf45f9</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
#inline .hList {
  font-size: 90%;
  list-style: none outside none;
  margin: 0;
  padding: 0;
}

#inline .hList li {
  border: 1px solid $theme.borderColor;
  cursor: move;
  display: inline-block;
  margin: 0 0.2em 0.2em 0;
  padding: 0.1em 0.6em;
}

#inline .hList li:hover {
  background-color: $theme.highlightColor;
}

#inline .hList li .delete {
  color: $theme.pageContentBackgroundColor;
  cursor: pointer;
  font-size: 70%;
  font-weight: bold;
  position: absolute;
  text-decoration: none !important;
  vertical-align: super;
}

#inline .hList li:hover .delete {
  color: $theme.textPrimaryColor;
}

#inline .hList li .delete:hover {
  color: $theme.notificationErrorColor;
}

#inline .hList li.deprecated {
  border: 1px solid $theme.notificationWarningColor;
}

#inline .hList li.classField {
  font-weight: bolder;
}

.columnPicker {
  margin-bottom: .3em;
}

.columnPicker select {
  width: auto;
}

.columnPicker a.addColumn {
  margin: 0 .5em;
  padding: 0;
}

.form-body {
  margin-right: 19em;
}

.wizard-help {
  background-color: $theme.backgroundSecondaryColor;
  border-bottom: 1px solid $theme.borderColor;
  color: $theme.textSecondaryColor;
  float: right;
  font-size: 0.857em;
  margin: 0 0 2em 2em;
  padding: 1em;
  width: 17em;
}

.wizard-help dl, .wizard-help p {
  font-size: 0.9em;
}

.wizard-help dl {
  margin-left: 1em;
}

.wizard-help dt, .wizard-help strong {
  color: $theme.textColor;
}

/* Fix WYSIWYG Editor display. */
#inline .xToolbar div.clearfloats {
  clear: left;
}</code>
    </property>
    <property>
      <contentType/>
    </property>
    <property>
      <name>Style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
