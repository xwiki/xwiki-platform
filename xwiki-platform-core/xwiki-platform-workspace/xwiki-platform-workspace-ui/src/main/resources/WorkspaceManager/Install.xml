<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>WorkspaceManager</web>
  <name>Install</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WorkspaceManager.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1187017247000</creationDate>
  <date>1316551734000</date>
  <contentUpdateDate>1316551734000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set ($needsAdminRights = false)
##
## 2(1). Register workspace search suggestions
##
#macro (registerWorkspaceSearchSuggestions $wikiName $skipSuccessMessage $skipNeedsAdminRightsCheck)
  #set ($searchSuggestConfigDocumentReference = $services.model.createDocumentReference($wikiName, 'XWiki', 'SearchSuggestConfig'))
  #set ($searchSuggestConfigDocument = $xwiki.getDocument($searchSuggestConfigDocumentReference))
  #set ($searchSuggestConfigObject = $searchSuggestConfigDocument.getObject('XWiki.SearchSuggestSourceClass', 'name',
    'platform.workspace.searchSuggestSourceWorkspaces'))
  #if (!$searchSuggestConfigObject)
    #if ($hasGlobalAdmin)
      #set ($searchSuggestConfigObject = $searchSuggestConfigDocument.newObject('XWiki.SearchSuggestSourceClass'))
      #set ($discard = $searchSuggestConfigObject.set('name', 'platform.workspace.searchSuggestSourceWorkspaces'))
      #set ($discard = $searchSuggestConfigObject.set('engine', 'solr'))
      #set ($discard = $searchSuggestConfigObject.set('query', 'class:XWiki.XWikiServerClass AND propertyname:wikiprettyname AND propertyvalue__:__INPUT__*'))
      #set ($discard = $searchSuggestConfigObject.set('resultsNumber', '3'))
      #set ($searchSuggestServiceReference = $services.model.createDocumentReference($xcontext.mainWikiName, 'WorkspaceManager', 'WorkspacesSuggestSolrService'))
      #set ($discard = $searchSuggestConfigObject.set('url', "$searchSuggestServiceReference"))
      #set ($discard = $searchSuggestConfigObject.set('activated', 1))
      #set ($discard = $searchSuggestConfigObject.set('highlight', 1))
      #set ($discard = $searchSuggestConfigObject.set('icon', 'icon:chart_organisation'))
      ##
      #set ($discard = $searchSuggestConfigDocument.save($services.localization.render('platform.workspace.searchSuggestionsInstallSaveComment'), true))
      #if (!$skipSuccessMessage)

        {{success}}{{translation key="workspacemanager.searchSuggestions.install.success"/}}{{/success}}
      #end
    #elseif (!$skipNeedsAdminRightsCheck)
      #set ($needsAdminRights = true)
    #end
  #elseif (!$skipSuccessMessage)
    ##
    ## Don't display this information if the code is included from somewhere else.
    ##
    #if ($xcontext.doc == $xcontext.tdoc)

      {{success}}{{translation key="workspacemanager.searchSuggestions.install.success"/}}{{/success}}
    #end
  #end
#end
#registerWorkspaceSearchSuggestions($xcontext.database)
##
## 3. Install template
##
#if (!$WikiManager)
  #set ($WikiManager = $services.wikimanager)
  #if (!$WikiManager)

    {{error}}$services.localization.render('workspacemanager.dependencies.wikimanager.missing'){{/error}}
  #end
#end
#if (!$services.applicationmanager)

  {{error}}$services.localization.render('workspacemanager.dependencies.applicationmanager.missing'){{/error}}
#end
##
## Constants
#set ($TEMPLATE_NAME = 'workspacetemplate')
#set ($TEMPLATE_PACKAGE = 'workspace-template.xar')
##
#set ($Exception = $WikiManager.DefaultException)
#set ($template = $WikiManager.getWikiTemplateDocument($TEMPLATE_NAME))
#if ("$!template" == '')
  #if ($hasGlobalAdmin)
    #if ($doc.getAttachment($TEMPLATE_PACKAGE))
      #if ("$!request.confirmTemplateInstall" == '1')
        #set ($result = $WikiManager.createWikiTemplate($TEMPLATE_NAME, '', $TEMPLATE_PACKAGE))
        #if ($result == $Exception.ERROR_NOERROR)
          ## Set the template's pretty name.
          #set($wikiTemplateDocument = $WikiManager.getWikiDocument($TEMPLATE_NAME))
          #set($discard = $wikiTemplateDocument.setWikiPrettyName($services.localization.render('platform.workspace.templateWikiTitle')))
          ##
          ## Mark the template as a workspace to differentiate it from other regular wiki templates.
          #set($workspaceObj = $wikiTemplateDocument.getObject('WorkspaceManager.WorkspaceClass', true))
          #set($discard = $workspaceObj.set('membershipType', 'open'))
          #set($discard = $wikiTemplateDocument.save('Marked the template as a workspace.', true))
          ##
          ## Use a redirect so that the page can be refreshed after the form's POST.
          #set ($discard = $response.sendRedirect($doc.getURL()))

          {{success}}{{translation key="workspacemanager.template.install.success"/}}{{/success}}
        #elseif ($result == $Exception.ERROR_XWIKI_ACCESS_DENIED)
          #set ($needsAdminRights = true)
        #else

          {{error}}$services.localization.render('workspacemanager.template.install.error', [$xcontext.lastexception]){{/error}}
        #end
      #else

        {{warning}}
          {{translation key="platform.workspace.templateNotInstalledInstallNow"/}}

          {{html}}
          &lt;form method='post' action="$doc.getURL()"&gt;
            &lt;div&gt;
              &lt;input type='hidden' name='form_token' value="$!{services.csrf.getToken()}" /&gt;
              &lt;input type='hidden' name='confirmTemplateInstall' value='1' /&gt;
              &lt;span class='buttonwrapper'&gt;
                &lt;input type='submit' value="$services.localization.render('platform.workspace.templateInstallConfirm')" class='button' /&gt;
              &lt;/span&gt;
            &lt;/div&gt;
          &lt;/form&gt;
          {{/html}}
        {{/warning}}
      #end
    #else

      #set ($repositoryLocation = 'public')
      #if ($xwiki.version.endsWith('SNAPSHOT'))
        #set ($repositoryLocation = 'public-snapshots')
      #end
      {{error}}$services.localization.render('workspacemanager.template.install.error.missingtemplateattachment', [$TEMPLATE_PACKAGE, $doc.fullName, "http://nexus.xwiki.org/nexus/content/groups/${repositoryLocation}/org/xwiki/enterprise/xwiki-enterprise-ui-all/${xwiki.version}/"]){{/error}}
    #end
  #else
    #set ($needsAdminRights = true)
  #end
#elseif (!${services.workspace.isWorkspace($TEMPLATE_NAME)})
  ##
  ## Migration introduced in 4.3M1. Workspace templates are now marked as workspaces to diferentiate them between regular wiki templates.
  ##
  #set ($workspaceObject = $template.getObject("WorkspaceManager.WorkspaceClass", true))
  #set ($discard = $template.save($services.localization.render('platform.workspace.templateMigrateSuccess')))

  {{warning}}{{translation key="platform.workspace.templateMigrateSuccess"/}}{{/warning}}
#else
  ##
  ## Don't display this information if the code is included from somewhere else.
  ##
  #if ($xcontext.doc == $xcontext.tdoc)

    {{success}}{{translation key="workspacemanager.template.install.success"/}}{{/success}}
  #end
#end
##
## 4. Install template features (workspace related pages + settings)
##
#set ($TEMPLATE_FEATURES_PACKAGE = 'workspace-template-features.xar')
##
## Install template features only if not already done so.
#set ($template = $WikiManager.getWikiTemplateDocument($TEMPLATE_NAME))
#if (!$template)
  #if (!$hasGlobalAdmin)
    #set ($needsAdminRights = true)
  #else

    {{error}}{{translation key="platform.workspace.templateFeaturesInstallErrorNeedTemplateFirst"/}}{{/error}}
  #end
#else
  #set ($manageWorkspaceDocumentReference = $services.model.createDocumentReference("$TEMPLATE_NAME", 'XWiki', 'ManageWorkspace'))
  #set ($xwikiPreferencesDocumentReference = $services.model.createDocumentReference("$TEMPLATE_NAME", 'XWiki', 'XWikiPreferences'))
  #set ($xwikiPreferencesDocument = $xwiki.getDocument($xwikiPreferencesDocumentReference))
  #set ($xwikiPreferencesClassName = $services.model.serialize($xwikiPreferencesDocumentReference))
  #set ($xwikiPreferencesObject = $xwikiPreferencesDocument.getObject($xwikiPreferencesClassName))
  #set ($workspaceInformationPanel = 'Panels.WorkspaceInformationPanel')
  #set ($currentRightPanels = $xwikiPreferencesObject.getProperty('rightPanels').value)  
  #if (!$xwiki.exists($manageWorkspaceDocumentReference) || !$currentRightPanels.contains($workspaceInformationPanel))
    #set ($templateFeaturesAttachment = $doc.getAttachment($TEMPLATE_FEATURES_PACKAGE))
    #if (!$hasGlobalAdmin)
      #set ($needsAdminRights = true)
    #elseif ($templateFeaturesAttachment)
      ## Change the database to the target wiki due to the Packager plugin limitation.
      #set ($currentDatabase = $xcontext.database)
      #set ($discard = $xcontext.setDatabase($TEMPLATE_NAME))
      #set ($packager = $xwiki.package)
      #set ($templateFeaturesAttachmentLoadResultOk = $packager.importPackageFromByteArray($templateFeaturesAttachment.content))
      #set ($templateFeaturesAttachmentInstallResult = $packager.install())
      ## Change back to the current wiki.
      #set ($discard = $xcontext.setDatabase($currentDatabase))
      #set ($PACKAGE_INSTALL_OK = 2)
      #if (!$templateFeaturesAttachmentLoadResultOk || $templateFeaturesAttachmentInstallResult != $PACKAGE_INSTALL_OK)

        {{error}}The template features package contains invalid entries. $!xcontext.import_error{{/error}}
      #else
        ## The workspace pages are now imported. Making final changes.      
        #set ($xwikiPreferencesNeedsSaving = false)
        ##
        ## 2(1). Register the Workspace Information Panel
        ##      
        #if (!$currentRightPanels.contains($workspaceInformationPanel))
          #set ($discard = $xwikiPreferencesObject.set('rightPanels', "$workspaceInformationPanel,$!currentRightPanels"))
          #set ($xwikiPreferencesNeedsSaving = true)
        #end
        ##
        ## Save XWikiPreferences with the new changes.
        #if ($xwikiPreferencesNeedsSaving)
          #set ($discard = $xwikiPreferencesDocument.save($services.localization.render('platform.workspace.templateFeaturesInstallTranslationsAndPanelSaveComment'), true))
        #end
        ##
        ## 3. Extend XWiki.SearchSuggestConfig to show Workspaces as search suggestions.
        ##
        #registerWorkspaceSearchSuggestions($TEMPLATE_NAME, true, true)
        ##
        ## 4. Remove the local admin from XWikiAllGroup and XWikiAdminGroup.
        ##
        #set ($templateXwikiAllGroupDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'XWikiAllGroup'))
        #set ($templateXwikiAdminGroupDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'XWikiAdminGroup'))
        #set ($templateGroupClass = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'XWikiGroups'))
        #set ($groupReferencesToClean = [$templateXwikiAllGroupDocumentReference, $templateXwikiAdminGroupDocumentReference])
        ##
        #foreach ($groupReferenceToClean in $groupReferencesToClean)
          #set ($groupDocumentToClean = $xwiki.getDocument($groupReferenceToClean))
          #set ($serializedTemplateGroupClass = $services.model.serialize($templateGroupClass))
          #set ($groupAllMembers = $groupDocumentToClean.getObjects($serializedTemplateGroupClass))
          #set ($templateAdminMember = $groupDocumentToClean.getObject($serializedTemplateGroupClass, 'member', 'XWiki.Admin'))
          #if ($templateAdminMember)
            #if ($groupAllMembers.size() == 1)
              ## Just one member, we must not delete the object or the group will be dissolved.
              #set ($discard = $templateAdminMember.set('member', ''))
            #else
              ## More than 1 member, we can safely delete this object and the group will not be affected.
              #set ($discard = $groupDocumentToClean.removeObject($templateAdminMember))
            #end
            #set ($discard = $groupDocumentToClean.save($services.localization.render('platform.workspace.templateFeaturesInstallRemoveAdminSaveComment'), true))
          #end
        #end
        ##
        ## Some tools used below, for steps 5, 6, 7 and 8.
        ##
        #set ($templateXWikiRightsDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'XWikiRights'))
        #set ($templateXWikiGlobalRightsDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'XWikiGlobalRights'))
        #macro (setRights $documentReference $rightsClassDocumentReference $entity $comment $isGroup)
          #set ($document = $xwiki.getDocument($documentReference))
          #set ($discard = $document.setHidden(true))
          #set ($serializedRightsClass = $services.model.serialize($rightsClassDocumentReference))
          #set ($entityType = "#if($isGroup)groups#{else}users#end")
          #set ($existingRight = $document.getObject($serializedRightsClass, $entityType, $entity))
          #if (!$existingRight)
            #set ($newRightsObject = $document.newObject($serializedRightsClass))
            #set ($discard = $newRightsObject.set($entityType, "$!entity"))
            #set ($discard = $newRightsObject.set('levels', 'view'))
            #set ($discard = $newRightsObject.set('allow', 1))
            ##
            #set ($discard = $document.save("$!comment", true))
          #end
        #end
        ##
        #set ($allGlobalUsersGroup = "${xcontext.mainWikiName}:XWiki.XWikiAllGroup")
        #set ($guestUser = 'XWiki.XWikiGuest')
        ##
        ## 5. Set initial rights for the entire workspace to registered users.
        ##
        #setRights($xwikiPreferencesDocumentReference, $templateXWikiGlobalRightsDocumentReference, $allGlobalUsersGroup, $services.localization.render('platform.workspace.templateFeaturesInstallSetViewRightsSaveComment'), true)
        ##
        ## 6. Set initial rights for displaying panels properly to guests/registered users.
        ##
        #set ($panelsSpacePreferencesDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'Panels', 'WebPreferences'))
        #setRights($panelsSpacePreferencesDocumentReference, $templateXWikiGlobalRightsDocumentReference, $guestUser, $services.localization.render('platform.workspace.templateFeaturesInstallSetPanelViewRightsGuestsSaveComment'))
        #setRights($panelsSpacePreferencesDocumentReference, $templateXWikiGlobalRightsDocumentReference, $allGlobalUsersGroup, $services.localization.render('platform.workspace.templateFeaturesInstallSetPanelViewRightsGlobalUsersSaveComment'), true)
        ##
        ## 7. Set initial rights for displaying color themes properly to guests/registered users.
        ##
        #set ($colorThemesSpacePreferencesDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'ColorThemes', 'WebPreferences'))
        #setRights($colorThemesSpacePreferencesDocumentReference, $templateXWikiGlobalRightsDocumentReference, $guestUser, $services.localization.render('platform.workspace.templateFeaturesInstallSetThemesViewRightsGuestsSaveComment'))
        #setRights($colorThemesSpacePreferencesDocumentReference, $templateXWikiGlobalRightsDocumentReference, $allGlobalUsersGroup, $services.localization.render('platform.workspace.templateFeaturesInstallSetThemesViewRightsGlobalUsersSaveComment'), true)
        ##
        ## 8. Set initial rights for displaying the skin properly to guests/registered users.
        ##
        #set ($skinDocumentName = $xwikiPreferencesObject.getProperty('skin').value)
        #set ($discard = $xcontext.setDatabase($TEMPLATE_NAME))
        #set ($skinDocumentReference = $services.model.resolveDocument($skinDocumentName))
        #set ($discard = $xcontext.setDatabase($currentDatabase))
        #setRights($skinDocumentReference, $templateXWikiRightsDocumentReference, $guestUser, $services.localization.render('platform.workspace.templateFeaturesInstallSetSkinViewRightsGuestsSaveComment'))
        #setRights($skinDocumentReference, $templateXWikiRightsDocumentReference, $allGlobalUsersGroup, $services.localization.render('platform.workspace.templateFeaturesInstallSetSkinViewRightsGlobalUsersSaveComment'), true)
        ##
        ## 9. Disable local user registration
        ##
        #macro (permanentlyDeleteDocument $documentReferenceToRemove)
          #if ($xwiki.exists($documentReferenceToRemove))
            #set ($documentToRemove = $xwiki.getDocument($documentReferenceToRemove))
            #set ($discard = $xcontext.setDatabase($TEMPLATE_NAME))
            ## Make sure not to leave anything in the recycle bin so don't send to trash.
            #set ($discard = $xwiki.xWiki.deleteDocument($documentToRemove.document, false, $xcontext.context))
            #set ($discard = $xcontext.setDatabase($currentDatabase))
          #end
        #end
        ##
        #set ($templateAdminRegistrationSheetDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'AdminRegistrationSheet'))
        #set ($templateRegistrationConfigDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'RegistrationConfig'))
        #set ($templateRegistrationHelpDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'RegistrationHelp'))
        #permanentlyDeleteDocument($templateAdminRegistrationSheetDocumentReference)
        #permanentlyDeleteDocument($templateRegistrationConfigDocumentReference)
        #permanentlyDeleteDocument($templateRegistrationHelpDocumentReference)
        ##
        ## 10. Disable local user management
        ##
        #set ($templateAdminRegistrationSheetDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'AdminUsersSheet'))
        #permanentlyDeleteDocument($templateAdminRegistrationSheetDocumentReference)
        ##
        ## 11. Disable the local admin.
        ##
        #set ($templateLocalAdminDocumentReference = $services.model.createDocumentReference($TEMPLATE_NAME, 'XWiki', 'Admin'))
        #permanentlyDeleteDocument($templateLocalAdminDocumentReference)
        ##
        ## Macro to be used for setting the document author of documents requiring an existing user as author or a user with admin/programming rights.
        ##
        #set ($documentNamesAlreadyFixed = [])
        #macro(fixDocumentAuthor $className $comment $documentNamesAlreadyFixed)
          #set ($currentDatabase = $xcontext.database)
          #set ($discard = $xcontext.setDatabase($TEMPLATE_NAME))
          #set ($documentNamesToFix = $services.query.xwql("from doc.object($className) as theObject").execute())
          #foreach ($documentNameToFix in $documentNamesToFix)
            #if (!$documentNamesAlreadyFixed.contains($documentNameToFix))
              #set ($documentReferencetoFix = $services.model.resolveDocument($documentNameToFix))
              #set ($documentToFix = $xwiki.getDocument($documentReferencetoFix))
              #set ($discard = $documentToFix.save($comment, true))
              #set ($discard = $documentNamesAlreadyFixed.add($documentNameToFix))
            #end
          #end
          #set ($discard = $xcontext.setDatabase($currentDatabase))
        #end
        ##
        ## 12. Fix the author of wiki macro documents (use the current admin user) so that they are correctly registered.
        ##
        #fixDocumentAuthor('XWiki.WikiMacroClass', $services.localization.render('platform.workspace.templateFeaturesInstallFixMacrosSaveComment'), $documentNamesAlreadyFixed)
        ##
        ## 13. Fix the author of configuration pages for each application (use the current admin user) so that they are correctly registered and accessible in the workspace Administration section.
        ##
        #fixDocumentAuthor('XWiki.ConfigurableClass', $services.localization.render('platform.workspace.templateFeaturesInstallFixConfigurableClassSaveComment'), $documentNamesAlreadyFixed)
        ##
        ## 14. Fix the author of SSX and JSX extensions.
        ##
        #fixDocumentAuthor('XWiki.StyleSheetExtension', $services.localization.render('platform.workspace.templateFeaturesInstallFixSSXSaveComment'), $documentNamesAlreadyFixed)
        #fixDocumentAuthor('XWiki.JavaScriptExtension', $services.localization.render('platform.workspace.templateFeaturesInstallFixJSXSaveComment'), $documentNamesAlreadyFixed)
        ##
        ## 15. Fix the author of documents with RequiredRightClass declarations.
        ##
        #fixDocumentAuthor('XWiki.RequiredRightClass', $services.localization.render('platform.workspace.templateFeaturesInstallFixRequiredRightClassSaveComment'), $documentNamesAlreadyFixed)

        {{success}}{{translation key="platform.workspace.templateFeaturesInstallSuccess"/}}{{/success}}
      #end
    #else

      {{error}}$services.localization.render('workspacemanager.template.install.error.missingattachment', [$TEMPLATE_FEATURES_PACKAGE, $doc.fullName]){{/error}}
    #end
  #else
    ##
    ## Don't display this information if the code is included from somewhere else.
    ##
    #if ($xcontext.doc == $xcontext.tdoc)

      {{success}}{{translation key="platform.workspace.templateFeaturesInstallSuccess"/}}{{/success}}
    #end
  #end
#end
##
#if ($needsAdminRights)
  ## It might be possible that admin rights are required to register the translations themselves. Use this as backup message.
  ## It will not look nice if the current language is not english, but at least the user will know what to do.
  #if ($services.localization.get('workspacemanager.install.notallowed'))

    {{error}}Admin rights are required to complete the Workspace Manager installation. Please login as Admin to complete the installation.{{/error}}
  #else

    {{error}}{{translation key="workspacemanager.install.notallowed"/}}{{/error}}
  #end
#end
{{/velocity}}</content>
</xwikidoc>
