## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#macro (displayUserAliasWithAvatar $userReference $disabled)
  <div class="user#if ($disabled) disabled#end" data-reference="$escapetool.xml($userReference)">
    <span class="user-avatar-wrapper">
      #getUserAvatarURL($userReference $avatarURL 120)
      <img class="user-avatar" src="$escapetool.xml($avatarURL.url)" />
    </span>
    <a href="$xwiki.getURL($userReference)">$escapetool.xml($userReference.name)</a>
  </div>
#end

#set ($userClassName = 'XWiki.XWikiUsers')
#set ($userClass = $xwiki.getDocument($userClassName).xWikiClass)
#set ($docProps = ['fullName', 'name'])
#set ($filterMap = {})
#set ($orderList = [])

## Look for filters in request parameters.
#foreach ($entry in $request.parameterMap.entrySet())
  #set ($userProperty = $userClass.get($entry.key))
  #if ($userProperty)
    ## TODO: Get the property type from the user property. We don't have a scripting API for this ATM. Note that this is
    ## the type used to store the property value in the database (represents the database table that stores the property
    ## value).
    #set ($propertyType = 'StringProperty')
    #set ($discard = $filterMap.put($entry.key, [$propertyType, $entry.value.get(0)]))
    #set ($discard = $orderList.add([$entry.key, $propertyType]))
  #elseif ($docProps.contains($entry.key))
    #set ($discard = $filterMap.put($entry.key, $entry.value.get(0)))
    #set ($discard = $orderList.add($entry.key))
  #end
#end

#if ($orderList.isEmpty())
  #set ($discard = $orderList.add('name'))
#end

#set ($usersService = $xwiki.rightsmanager.usersApi)
#set ($offset = $numbertool.toNumber($request.get('offset')).intValue())
#set ($limit = $numbertool.toNumber($request.get('limit')).intValue())

## If the Rights Manager Plugin is not enabled, then return an empty JSON result.
#if ("$!usersService" != '')
  ## The live table offset starts from 1 so we need to subtract 1.
  #if ($request.wiki == 'local')
    #set ($users = $usersService.getAllMatchedLocalUsers($filterMap, $limit, $mathtool.sub($offset, 1), $orderList))
    #set ($countUsers = $usersService.countAllMatchedLocalUsers($filterMap))
  #elseif ($request.wiki == 'global')
    #set ($users = $usersService.getAllMatchedGlobalUsers($filterMap, $limit, $mathtool.sub($offset, 1), $orderList))
    #set ($countUsers = $usersService.countAllMatchedGlobalUsers($filterMap))
  #else
    ## Get both local and global users.
    #set ($users = $usersService.getAllMatchedUsers($filterMap, $limit, $mathtool.sub($offset, 1), $orderList))
    #set ($countUsers = $usersService.countAllMatchedUsers($filterMap))
  #end
#else
  #set ($users = [])
  #set ($countUsers = 0)
#end

#set ($data = {
  'totalrows': $countUsers,
  'returnedrows': $mathtool.min($countUsers, $limit),
  'offset': $offset,
  'reqNo': $numbertool.toNumber($request.reqNo).intValue(),
  'rows': []
})
#foreach ($user in $users)
  #if ($services.security.authorization.hasAccess('view', $user.documentReference))
    #set ($grayed = $xcontext.user == $user.fullName)
    #set ($wikiName = $user.wiki)
    #if ($wikiName != $xcontext.mainWikiName || $wikiName == $xcontext.database)
      #set ($wikiName = 'local')
    #end
    #set ($userObject = $user.getObject($userClassName))
    ## Deprecated properties kept for backward compatibility with XWiki versions older than 10.9
    #set ($row = {
      'username': $user.documentReference.name,
      'fullname': $user.fullName,
      'wikiname': $wikiName,
      'firstname': $userObject.getValue('first_name'),
      'lastname': $userObject.getValue('last_name'),
      'userurl': $user.getURL(),
      'usersaveurl': $user.getURL('save'),
      'userinlineurl': $user.getURL('edit', 'xpage=edituser'),
      'docurl': $xwiki.getURL('XWiki.XWikiPreferences', 'admin', 'section=Users'),
      'grayed': $grayed
    })
    #if ($user.wiki == $xcontext.mainWikiName)
      #set ($scope = 'global')
    #else
      #set ($scope = 'local')
    #end
    #set ($hasEdit = $services.security.authorization.hasAccess('edit', $user.documentReference))
    #set ($disabled = $xwiki.getUser($user.documentReference).isDisabled())
    #set ($hasEnable = $hasEdit && $disabled)
    ## Prevent users from disabling their own accounts.
    #set ($hasDisable = $hasEdit && !$disabled && $xcontext.userReference != $user.documentReference)
    ## Delete user accounts only after they have been disabled. Also prevent users from deleting their own accounts.
    #set ($hasDelete = $disabled && $xcontext.userReference != $user.documentReference
      && $services.security.authorization.hasAccess('delete', $user.documentReference))
    #set ($discard = $row.putAll({
      'doc_fullName': $user.fullName,
      'doc_wiki': $user.wiki,
      'doc_url': $user.getURL(),
      'doc_viewable': true,
      'doc_hasadmin': $xwiki.hasAdminRights(),
      'doc_hasedit': $hasEdit,
      'doc_edit_url': $user.getURL('edit'),
      'doc_hasdelete': $hasDelete,
      'doc_delete_url': $user.getURL('delete'),
      'doc_hasdisable': $hasDisable,
      'doc_disable_url': $user.getURL('save', $escapetool.url({
        "${userClassName}_0_active": 0,
        'comment': $services.localization.render('core.users.disable.saveComment'),
        'form_token': $services.csrf.token
      })),
      'doc_hasenable': $hasEnable,
      'doc_enable_url': $user.getURL('save', $escapetool.url({
        "${userClassName}_0_active": 1,
        'comment': $services.localization.render('core.users.enable.saveComment'),
        'form_token': $services.csrf.token
      })),
      'name': "#displayUserAliasWithAvatar($user.documentReference $disabled)",
      'first_name': $userObject.getValue('first_name'),
      'last_name': $userObject.getValue('last_name'),
      'scope': $services.localization.render("xe.admin.groups.$scope")
    }))
  #else
    #set($row = {
      'doc_viewable': false,
      'doc_fullName': 'obfuscated'
    })
  #end
  #set ($discard = $data.rows.add($row))
#end
#livetable_filterObfuscated($data)
#jsonResponse($data)
