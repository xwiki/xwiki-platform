<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.Notifications.Code.XWikiUserNotificationsSheet" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>XWikiUserNotificationsSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1488292213000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1488297950000</date>
  <contentUpdateDate>1488296825000</contentUpdateDate>
  <parent>XWiki.Notifications.Code.WebHome</parent>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="locationPicker_macros.vm" /}}

{{velocity}}
#set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.XWikiUserNotificationsSheet'))
## TODO: replace by $xwiki.sswx.use() or something like this when XWIKI-12788 is closed.
#set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-switch', 'css/bootstrap3/bootstrap-switch.min.css'), {'type': 'text/css', 'rel': 'stylesheet'}))
(% class="profile-section highlighted-profile-section" %)
(((
==$services.localization.render('notifications.settings.title')==
{{html wiki="true"}}
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="width: 250px;"&gt;&lt;/th&gt;
      &lt;th&gt;$escapetool.xml($services.localization.render('notifications.settings.menu'))&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    #set ($types = [])
    #foreach ($descriptor in $services.eventstream.allRecordableEventDescriptors)
      #set ($discard = $types.add({
        'applicationName' : "$!services.localization.render($descriptor.applicationName)",
        'applicationIcon' : "$!services.icon.renderHTML($descriptor.applicationIcon)",
        'description'     : "$!services.localization.render($descriptor.description)",
        'eventType'       : "$!descriptor.eventType",
        'filter'          : "$!descriptor.filter"
      }))
    #end
    #set ($lastApp = '')
    #set ($discard = $sorttool.sort($types, ['applicationName', 'eventType']))
    #foreach ($type in $types)
      #if ($lastApp != $type.applicationName)
        #set ($lastApp = $type.applicationName)
        &lt;tr&gt;
          &lt;th colspan="2"&gt;
            $type.applicationIcon $escapetool.xml($type.applicationName)
          &lt;/th&gt;
        &lt;/tr&gt;
      #end
      #set ($checked = '')
      #set ($preference = $doc.getObject('XWiki.Notifications.Code.NotificationPreferenceClass', 'eventType', $type.eventType))
      #if ("$!preference" != '' &amp;&amp; $preference.getValue('notificationEnabled') == 1)
        #set ($checked = 'checked="checked"')
      #end
      &lt;tr data-eventtype="$!escapetool.xml($type.eventType)" data-applicationid="$!escapetool.xml($type.applicationId)" data-objnumber="$!preference.number"&gt;
        &lt;td&gt;$escapetool.xml($type.description)&lt;/td&gt;
        &lt;td class="notificationTypeCell loading"&gt;
          &lt;div class="hidden"&gt;
            &lt;input type="checkbox" class="notificationTypeCheckbox" $checked/&gt;
            #if ($type.filter == 'WIKI_FILTER' || $type.filter == 'WIKI_AND_SPACE_FILTER' || $type.filter == 'WIKI_SPACE_AND_DOCUMENT_FILTER')
              #displayScopeLivetable($type.eventType, $type.filter)
            #elseif($type.filter == 'CUSTOM_FILTER')
              ## TODO: handle UIX from other wikis
              $services.uix.getExtensions('notification.profile.filter', {'select': $type.eventType})
            #end
          &lt;/div&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    #end
  &lt;/tbody&gt;
&lt;/table&gt;
{{/html}}
)))
#macro(displayScopeLivetable $eventType $filterType)
  #set ($count = 0)
  #foreach ($obj in $doc.getObjects('XWiki.Notifications.Code.NotificationPreferenceScopeClass'))
    #if ($obj.getValue('eventType') == $eventType)
      #set ($count = $count + 1)
    #end
  #end
  #set ($showTerminalDocuments = ($filterType == 'WIKI_SPACE_AND_DOCUMENT_FILTER'))
  &lt;p&gt;&lt;a href="#collapse-$eventType" data-toggle="collapse"&gt;$services.localization.render('notifications.settings.filters', ["&lt;span class='notificationPreferenceScopeCount'&gt;$count&lt;/span&gt;"])&lt;/a&gt;&lt;/p&gt;
  &lt;div class="notificationPreferenceScopeContainer collapse" id="collapse-$eventType" data-eventtype="$escapetool.xml($eventType)" data-filter="${filterType}"&gt;
    #set($collist  = ['scope', 'location', '_actions'])
    #set($colprops = {
      'scope':          { 'sortable': false, 'html': true},
      'location':       { 'sortable': false, 'html': true },
      '_actions':       { 'sortable': false, 'actions': ['delete']}
    })
    #set($options  = {
      'resultPage'        : 'XWiki.Notifications.Code.NotificationPreferenceScopeLivetableResults',
      'rowCount'          : 10,
      'description'       : 'This table lists all watched elements.',
      'translationPrefix' : 'notifications.preferences.scope.table.',
      'extraParams'       : "eventType=${eventType}&amp;user=${services.model.serialize($doc.documentReference, 'default')}"
    })
    #livetable("notificationPreferenceScopeContainer-$eventType" $collist $colprops $options)
    &lt;p&gt;&lt;button class="btn btn-primary btn-addfilter"&gt;$escapetool.xml($services.localization.render('notifications.settings.addFilter'))&lt;/button&gt;&lt;/p&gt;
    ## TODO: handle properly the "WIKI" filter with a wiki picker instead
    ## TODO: add an option so the user can select a page without its children
    #documentPickerModal({
      'wiki': true,
      'showTerminalDocuments': $showTerminalDocuments
    })
  &lt;/div&gt;
#end
{{/velocity}}
</content>
  <object>
    <name>XWiki.Notifications.Code.XWikiUserNotificationsSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0f871729-5139-494d-a2ab-1ce903ff91b0</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/**
 * Start the requirejs config.
 */
require.config({
  paths: {
    'bootstrap-switch': '$services.webjars.url('bootstrap-switch', 'js/bootstrap-switch.min')'
  },
  shim: {
    'bootstrap-switch' : ['jquery']
  }
});
/**
 * Start the real script.
 */
require(['jquery', 'xwiki-meta', 'bootstrap', 'bootstrap-switch', 'xwiki-events-bridge'], function ($, xm) {
  'use strict';

  /**
   * Enable or disable some DOM elemnts.
   */
  var enableDOMElements = function (elements, enable) {
    elements.css('pointer-events', enable ? 'auto' : 'none').css('opacity', enable ? 1.0 : 0.4);
  };

  /**
   * Disable all filters where the event type is not enabled
   */
  $('.notificationTypeCheckbox').each(function () {
    var checkBox = $(this);
    if (!checkBox.attr('checked')) {
      enableDOMElements(checkBox.parents('td').find('.notificationPreferenceScopeContainer'), false);
    }
  });

  /**
   * Enable bootstrap switch.
   */
  $('.notificationTypeCheckbox').bootstrapSwitch({
    size: 'mini',
    onColor: 'success',
    offColor: 'danger',
    labelText: '$escapetool.javascript($services.icon.renderHTML("bell"))'
  });

  /**
   * Called when the user enable or disable an event type.
   */
  $('.notificationTypeCheckbox').on('switchChange.bootstrapSwitch', function (event, state) {
    // Getting info
    var input        = $(this);
    var tr           = input.parents('tr');
    var eventType    = tr.attr('data-eventtype');
    var objNumber    = tr.attr('data-objnumber');

    // Change the state of the filter container
    enableDOMElements(input.parents('td').find('.notificationPreferenceScopeContainer'), state);

    // Saving
    var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
    if (objNumber == '' &amp;&amp; state) {
      // If the object does not exist yet, create it
      var restURL = xm.restURL + '/objects?media=json';
      $.post(restURL, {
        'className': 'XWiki.Notifications.Code.NotificationPreferenceClass',
        'property#eventType': eventType,
        'property#notificationEnabled': 1
      }).done(function (data) {
        tr.attr('data-objnumber', data.number);
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
      }).fail(function () {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
      });
    } else if (objNumber != '') {
      // If the object already exist, just update its value
      var restURL = xm.restURL + '/objects/XWiki.Notifications.Code.NotificationPreferenceClass/' + objNumber
        + '/properties/notificationEnabled?media=json';
      $.ajax(restURL, {
        method: 'PUT',
        contentType: 'text/plain',
        data: state ? '1' : '0'
      }).done(function (data) {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
      }).fail(function () {
        notification.hide();
        new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
      });
    }
  });

  /**
   * Handle the livetable 'delete' action
   */
  var handleFilterLivetableDelete = function (event) {
    event.preventDefault();
    var link = $(this);
    var livetable = window['livetable_' + link.parents('.xwiki-livetable').attr('id')];
    var filter = $(this).parents('.notificationPreferenceScopeContainer').parent().find('.notificationPreferenceScopeCount');
    // Ask a confirmation
    new XWiki.widgets.ConfirmationBox({
      onYes: function() {
        // Delete on confirmation
        // This is done thanks to a REST URL with the "delete" action
        $.ajax(link.attr('href'), {
          type: 'DELETE'
        }).done(function() {
          // Reload the livetable
          livetable.refresh();
          filter.text(parseInt(filter.text()) - 1);
        });
      }
    });
  };
  $(document).on('xwiki:livetable:newrow', function (event, data) {
    $(data.row).find('a.actiondelete').click(handleFilterLivetableDelete);
  });
  $('.notificationPreferenceScopeContainer .xwiki-livetable a.actiondelete').click(handleFilterLivetableDelete);

  /**
   * Make the location picker effective
   */
  $('.notificationPreferenceScopeContainer').each(function() {
    var scope = $(this);
    var modal = scope.find('.modal');
    // Open the location picker
    scope.find('.btn-addfilter').click(function(event) {
      modal.modal('show');
      scope.find('.location-tree').xtree();
      modal.find('.modal-footer button.btn-primary').each(function() {
        $(this).prop('disabled', 'disabled');
      });
    });
    // Enable the "select" button when a selection is made on the tree.
    scope.find('.location-tree').on('changed.jstree', function(e, data) {
      if (data.selected.length &gt; 0) {
        modal.find('.modal-footer button.btn-primary').prop('disabled', '');
      }
    });
    // Callback called when the "select" button is clicked
    modal.find('.modal-footer button.btn-primary').click(function() {
      modal.modal('hide');
      var tree = $.jstree.reference(scope.find('.location-tree'));
      var nodes = tree.get_selected(true);
      var filterType = scope.attr('data-filter');
      for (var i = 0; i &lt; nodes.length; ++i) {
        var node = nodes[i];
        var scopeType = 'pageOnly';
        if (node.data.type == 'wiki') {
          scopeType = 'wiki';
        } else if (node.data.type == 'document' &amp;&amp; node.data.id.match('WebHome$')) {
          scopeType = 'pageAndChildren';
        }
        // Don't save a preference scope if we expect to have a wiki and the selected data is a page
        if (filterType == 'WIKI_FILTER' &amp;&amp; scopeType != 'wiki') {
          // TODO: would be even better if the picker was not suggesting pages...
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.errorFilterWiki'))", 'error');
          continue;
        }
        // Saving
        var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saving'))", 'inprogress');
        var restURL = xm.restURL + '/objects?media=json';
        $.post(restURL, {
          'className': 'XWiki.Notifications.Code.NotificationPreferenceScopeClass',
          'property#eventType': scope.attr('data-eventtype'),
          'property#scopeReference': node.data.id,
          'property#scope': scopeType
        }).done(function (data) {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.saved'))", 'done');
          // Reload the livetable
          window['livetable_' + scope.find('.xwiki-livetable').attr('id')].refresh();
          // Update the filter count
          var filter = scope.parent().find('.notificationPreferenceScopeCount');
          var filterValue = parseInt(filter.text());
          filter.text(filterValue + 1);
        }).fail(function () {
          notification.hide();
          new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.settings.savingfailed'))", 'error');
        });
      }
    });
  });

  /**
   * Disable the "loading" screens
   */
  $('td.notificationTypeCell').each(function(){
    $(this).find('&gt; div.hidden').removeClass('hidden');
    $(this).removeClass('loading');
  });
});
</code>
    </property>
    <property>
      <name>JS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
