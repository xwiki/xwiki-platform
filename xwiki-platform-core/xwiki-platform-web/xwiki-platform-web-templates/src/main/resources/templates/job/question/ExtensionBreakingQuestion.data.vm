## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
###
### Return the list of pages and extensions that are going to be deleted by a delete job
###
$response.setContentType("application/json")

###
### Globals
###
#set ($offset = "$!request.offset")
#if ($offset == '')
  #set ($offset = '0')
#end
#set ($offset = $numbertool.toNumber($offset))
#set ($limit = 15)

#**
 * Display a pagination node.
 * @param $data the collection where the node will be added
 * @param $howMany the number of nodes that remains
 * @param $newOffset the offset to use to display the next batch of nodes
 *#
#macro(paginationNode $data $howMany $newOffset)
  #set ($id = "$!{request.id}")
  #if ($id == '')
    #set ($id = '#')
  #end
  #set ($discard = $data.add({
    'id': "pagination:$id",
    'text': "$escapetool.javascript($services.localization.render('job.question.ExtensionBreakingQuestion.tree.paginationNode', [$howMany]))",
    'icon': 'fa fa-eye',
    'children': false,
    'data': {
     'type': 'pagination',
     'validChildren': [],
     'canDelete': true,
     'offset': $newOffset
    },
    'li_attr': {
      'class': 'paginationNode'
    }
  }))
#end

#**
 * Add page node in the collection.
 * @param $question the question beeing asked
 * @param $data the collection where the nodes will be added
 *#
#macro(displayPages $question $data)
  #set ($pages = [])
  #if ("$!request.id" == 'freePages')
    #set ($pages = $question.freePages)
  #else
    #set ($pages = $question.getExtension($request.id).pages)
  #end
  #foreach ($page in $pages)
    #set ($pageReference = $page.entityReference)
    #if ($foreach.count > $offset + $limit)
      #set ($howMany = $pages.size() - $foreach.count + 1)
      #paginationNode($data, $howMany, $foreach.count)
      #break
    #end
    #if ($foreach.count > $offset)
      #set ($pageDoc = $xwiki.getDocument($pageReference))
      #set ($title = $pageDoc.getRenderedTitle('html/5.0'))
      #if ("$!title" == '')
        #set ($title = $pageDoc.pageReference.name)
      #end
      #set ($discard = $data.add({
        'id': $services.model.serialize($pageReference, 'default'),
        'text': "$title ($services.model.serialize($pageReference, 'local'))",
        'icon': 'fa fa-file-o',
        'children': false,
        'data': {
          'type': 'page'
        },
        'state': {
          'selected': $page.isSelected()
        }
      }))
    #end
  #end
#end

#**
 * Add extension nodes in the collection.
 * @param $question the question beeing asked
 * @param $data the collection where the nodes will be added
 *#
#macro(displayExtensions $question $data)
  #set ($extensions = [])
  #foreach ($entry in $question.extensions.entrySet())
    #set ($discard = $extensions.add({'extension': $entry.value.extension, 'pages': $entry.value.pages, 'name': $entry.value.extension.name}))
  #end
  #set ($extensions = $collectiontool.sort($extensions, 'name'))
  #foreach ($ext in $extensions)
    #if ($foreach.count > $offset + $limit)
      #set ($howMany = $extensions.size() - $foreach.count + 1)
      #paginationNode($data, $howMany, $foreach.count)
      #break
    #end
    #if ($foreach.count > $offset)
      #set ($extension = $ext.extension)
      #set ($discard = $data.add({
        'id': "$extension.id.id",
        'text': "$extension.name",
        'icon': 'fa fa-cube',
        'children': true,
        'data': {
          'type': 'extension'
        }
      }))
    #end
  #end
#end

#**
 * Controller
 *#
#set ($jobStatus = $job.status)
#set ($question = $jobStatus.question)
#set ($data = [])
#if ("$!request.data" == 'children' && "$!request.id" != '#')
  #displayPages($question, $data)
#else
#if ($offset == 0 && !$question.freePages.isEmpty())
  #set ($discard = $data.add({
    'id': 'freePages',
    'text': "$escapetool.javascript($services.localization.render('job.question.ExtensionBreakingQuestion.tree.freePages'))",
    'icon': 'fa fa-folder',
    'children': true,
    'data': {
      'type': 'pages'
    }
  }))
  #end
  #displayExtensions($question, $data)
#end
$jsontool.serialize($data)
