## Make sure the XWiki velocity variables are defined when the edited content is rendered.
#template("xwikivars.vm")
## The XML declaration is commented out to avoid quirks mode in IE6.
##<?xml version="1.0" encoding="$xwiki.encoding" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$xcontext.language" xml:lang="$xcontext.language">
<head>
<title>WYSIWYG Editor Input Template</title>
<meta http-equiv="Content-Type" content="text/html; charset=$xwiki.encoding" />
## Include the stylesheets that affect the content in view mode.
#template("stylesheets.vm")
## RichTextArea.css overwrites those CSS rules defined in the previous stylesheets that are improper in edit mode.
<link type="text/css" rel="stylesheet" href="$xwiki.getSkinFile('js/xwiki/wysiwyg/xwe/stylesheets/RichTextArea.css', true)"/>
<script type="text/javascript">
// <![CDATA[
function fireHTMLEvent(element, eventType, bubbles, cancelable) {
  if (element.ownerDocument.createEvent) {
    // Standards compliant.
    var event = element.ownerDocument.createEvent('HTMLEvents');
    event.initEvent(eventType, bubbles, cancelable);
    return !element.dispatchEvent(event);
  } else if (document.createEventObject) {
    // IE
    var event = element.ownerDocument.createEventObject();
    return element.fireEvent('on' + eventType, event);
  }
}
/**
 * We fire the load event on the rich text area as soon as the DOM is ready. We don't rely on the DOMContentLoaded event
 * because the listeners are lost when the window is reloaded. For instance, if we submit a page to itself (form
 * action is the empty string) or if we call window.location.reload(true) the DOMContentLoaded event listeners are lost
 * and there's no clean way to register them back after the window unloads but before the DOMContentLoaded event is fired.
 *
 * NOTE: The editor ignores the second load event which is fired by the browser after all the external resources like
 * images and embedded objects are loaded.
 */
function fireContentLoad(contentLoadTriggerId) {
  // Remove the script that called this function to prevent it from being saved with the rest of the content. The script
  // was placed at the end of the body in order to be interpreted immediately after the content is loaded.
  var contentLoadTrigger = document.getElementById(contentLoadTriggerId);
  contentLoadTrigger.parentNode.removeChild(contentLoadTrigger);
  // Check if this page was loaded inside an in-line frame element.
  if (window.frameElement) {
    fireHTMLEvent(window.frameElement, 'load', false, false);
  }
}
// ]]>
</script>
</head>
#if($request.method.equalsIgnoreCase('post') && $services.csrf.isTokenValid($request.token))
#if($request.getParameterMap().containsKey('source'))
#set($content = $services.wysiwyg.toAnnotatedXHTML($request.source, $tdoc.getSyntax().toIdString()))
#elseif($request.getParameterMap().containsKey('html'))
#set($content = $services.wysiwyg.parseAndRender($request.html, $tdoc.getSyntax().toIdString()))
#end
#end
<body id="body" class="main">$!content<script id="__contentLoadTrigger" type="text/javascript"><!--
fireContentLoad('__contentLoadTrigger')
--></script></body></html>
