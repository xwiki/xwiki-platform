<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="AppWithinMinutes.LiveTableViewSheet" locale="">
  <web>AppWithinMinutes</web>
  <name>LiveTableViewSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>AppWithinMinutes.LiveTableClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>#sheetTitle('LiveTable View Sheet' $doc.fullName.equals('AppWithinMinutes.LiveTableViewSheet'))</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="locationPicker_macros.vm" /}}

{{velocity output="false"}}
#macro (displayApp)
  #set ($discard = $xwiki.ssx.use('AppWithinMinutes.LiveTableViewSheet'))
  #set ($discard = $xwiki.jsx.use('AppWithinMinutes.LiveTableViewSheet', {'currentApp': $doc.getDocumentReference()}))
  #if (!$isReadOnly)
    #displayAppActions
  #end
  $doc.display('description')
  ## Display the live table only if it was generated.
  #if ($doc.content.length() &gt; 0)
    = $services.localization.render('platform.appwithinminutes.appLiveTableHeading') =
    ## We don't use the Include macro (with empty reference) because we want the content to be executed with the rights
    ## of the current document rather than the rights of the sheet. This is important because the user can modify the
    ## content of the application home page which means we could execute untrusted content with the rights of the sheet.
    ## Ideally we should use the Display macro with a parameter to disable the sheet, but we don't have this parameter.
    ## We don't clean the HTML content because getRenderedContent() should produce clean HTML, unless the user has 
    ## disabled the HTML cleaning, in which case he will get what he asked for. Note that one good reason to disable
    ## HTML cleaning is to preserve the whitespaces in the attribute values.
    ## Escape {{ in the rendered content to be sure that the HTML macro is not closed unintentionally.
    {{html clean="false"}}$doc.getRenderedContent($doc.content,
      $doc.syntax.toIdString()).replace('{{', '&amp;amp;#123;&amp;amp;#123;'){{/html}}
  #end
#end

#macro (displayAppActions)
  ## Determine the user's rights
  #set ($className = $stringtool.removeEnd($classFullName, 'Class'))
  #set ($templateProviderReference = $services.model.resolveDocument("${className}TemplateProvider"))
  #set ($templateProvider = $xwiki.getDocument($templateProviderReference))
  #set ($creationRestrictions = $templateProvider.getValue('creationRestrictions'))
  #if ($creationRestrictions)
    #if ($creationRestrictions.size() &gt; 0)
      #set ($dataSpaceRef = $services.model.resolveSpace($creationRestrictions.get(0)))
    #else
      ## There is no data space as the user can create application entries anywhere. Let's use the application space
      ## when the user clicks on the Add New Entry link from the home page.
      #set ($dataSpaceRef = $doc.documentReference.parent)
    #end
  #else
    ## The template provider is missing. Fall-back on the old 'dataSpace' property.
    #set ($dataSpaceRef = $services.model.resolveSpace($doc.getValue('dataSpace'), 'explicit',
      $doc.documentReference))
  #end
  #set ($hasCreateData = $services.security.authorization.hasAccess('edit', $dataSpaceRef))
  #set ($hasDeleteData = $services.security.authorization.hasAccess('admin', $dataSpaceRef))
  #set ($translationsRef = $services.model.resolveDocument("${className}Translations"))
  #set ($hasEditTranslations = $xwiki.isMultiLingual() &amp;&amp; $xwiki.exists($translationsRef)
    &amp;&amp; $services.security.authorization.hasAccess('edit', $translationsRef))
  #set ($classRef = $services.model.resolveDocument($classFullName))
  #set ($hasEditApplication = $services.security.authorization.hasAccess('edit', $classRef))
  #set ($hasDeleteApplication = $hasDeleteData
    &amp;&amp; $services.security.authorization.hasAccess('admin', $doc.documentReference.parent)
    &amp;&amp; $services.security.authorization.hasAccess('admin', $classRef.parent))
  ## Display the application actions based on the user's rights
  #if ($hasCreateData || $hasDeleteData || $hasEditApplication || $hasEditTranslations || $hasDeleteApplication)
    (% id="actionBox" class="floatinginfobox" %)
    (((
      = $services.localization.render('platform.appwithinminutes.appHomePageActionsHeading') =
      #if ($hasCreateData)
        * [[$services.localization.render('platform.appwithinminutes.appHomePageAddEntryHint')&gt;&gt;||anchor="AddNewEntry" class="action add"]]##
          #if ("$!templateProvider.getValue('terminal')" == '1')
            #set ($entryReference = $services.model.createDocumentReference('__entryName__', $dataSpaceRef))
          #else
            #set ($entryReference = $services.model.resolveDocument('', 'default',
              $services.model.createSpaceReference('__entryName__', $dataSpaceRef)))
          #end
          ## We need to set the title if we want to be able to sort or filter the doc.title live table column.
          #set ($params = {
            'template': "${className}Template",
            'title': '__entryName__',
            'parent': $services.model.serialize($doc.documentReference, 'local')
          })
          #if ($xwiki.getDocument($classRef).xWikiClass.properties.size() &gt; 0)
            ## The entry has properties so go in edit mode to edit them.
            #set ($action = 'edit')
            #set ($params.editor = 'inline')
          #else
            ## There are no properties to edit so create the new entry and get back to the home page.
            #set ($action = 'save')
            #set ($discard = $params.putAll({
              'xredirect': $doc.getURL(),
              'form_token': $services.csrf.token
            }))
          #end
          {{html}}&lt;input type="hidden" value="$xwiki.getURL($entryReference, $action, $escapetool.url($params))" /&gt;{{/html}}
      #end
      #if ($hasEditApplication)
        #set ($queryString = $escapetool.url({
          'appName': $doc.space,
          'resolve': true
        }))
        * [[$services.localization.render('platform.appwithinminutes.appHomePageEditAppLabel')&gt;&gt;AppWithinMinutes.CreateApplication||queryString="$queryString" class="action edit"]]
      #end
      #if ($hasEditTranslations)
        * [[$services.localization.render('platform.appwithinminutes.appHomePageTranslateAppLabel')&gt;&gt;path:$xwiki.getURL($translationsRef, 'edit', 'editor=wiki')||class="action translate"]]
      #end
      #if ($hasDeleteData)
        #set ($deleteDataURL = $xwiki.getURL('AppWithinMinutes.DeleteApplication', 'view', $escapetool.url({
          'appName': $doc.space,
          'resolve': true,
          'scope': 'entries',
          'xredirect': $doc.getURL()
        })))
        * [[$services.localization.render('platform.appwithinminutes.appHomePageDeleteEntriesLabel')&gt;&gt;path:$deleteDataURL||class="action deleteData"]]
      #end
      #if ($hasDeleteApplication)
        #set ($deleteAppURL = $xwiki.getURL('AppWithinMinutes.DeleteApplication', 'view', $escapetool.url({
          'appName': $doc.space,
          'resolve': true,
          'xredirect': $doc.getURL()
        })))
        * [[$services.localization.render('platform.appwithinminutes.appHomePageDeleteAppLabel')&gt;&gt;path:$deleteAppURL||class="action delete"]]
      #end
    )))
  #end
#end

#macro (renameAppModal)
  &lt;div class="modal" id="renameAppModal" tabindex="-1" role="dialog" aria-labelledby="renameAppModal-label"
      data-backdrop="static" data-keyboard="false"&gt;
    &lt;div class="modal-dialog" role="document"&gt;
      &lt;form class="modal-content xform"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-label="Close"&gt;
            &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
          &lt;/button&gt;
          &lt;h4 class="modal-title" id="renameAppModal-label"&gt;Rename Application&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          #renameAppModalBody
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;button type="button" class="btn btn-default" data-dismiss="modal"&gt;
            $escapetool.xml($services.localization.render('cancel'))
          &lt;/button&gt;
          &lt;button type="submit" class="btn btn-primary" disabled="disabled"&gt;
            $escapetool.xml($services.localization.render('core.rename.submit'))
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/form&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end

#macro (renameAppModalBody)
  &lt;div class="box infomessage"&gt;
    $services.icon.renderHTML('info')
    $services.localization.render('appWithinMinutes.renameApp.changeAppTitleInfo')
  &lt;/div&gt;
  &lt;div class="box warningmessage"&gt;
    $services.icon.renderHTML('warning')
    $services.localization.render('appWithinMinutes.renameApp.regenerateAppCodeWarning')
  &lt;/div&gt;
  &lt;div class="hidden"&gt;
    &lt;input type="hidden" name="form_token" value="$!escapetool.xml($services.csrf.token)" /&gt;
    &lt;input type="hidden" name="oldAppReference" value="$escapetool.xml(
      $services.model.serialize($doc.documentReference.parent, 'local'))"/&gt;
    &lt;span class="appNameEmptyError xErrorMsg"&gt;
      $services.localization.render("platform.appwithinminutes.appNameEmptyError")
    &lt;/span&gt;
    &lt;span class="pageExistsError xErrorMsg"&gt;
      $services.localization.render("appWithinMinutes.renameApp.pageExistsError")
    &lt;/span&gt;
    &lt;span class="locationForbiddenError xErrorMsg"&gt;
      $services.localization.render("appWithinMinutes.renameApp.locationForbiddenError")
    &lt;/span&gt;
  &lt;/div&gt;
  #set ($appName = $doc.pageReference.name)
  #set ($isNestedPage = $doc.documentReference.name == $services.model.getEntityReference('DOCUMENT', 'default').name)
  #set ($parentReference = $doc.documentReference.parent)
  #if ($isNestedPage)
    #set ($parentReference = $parentReference.parent)
  #end
  #locationPicker({
    'id': 'renameApp',
    'title': {
      'label': 'appWithinMinutes.renameApp.newName.label',
      'hint': 'platform.appwithinminutes.appNameHint',
      'name': 'newAppName',
      'value': $appName,
      'placeholder': 'appWithinMinutes.renameApp.newName.label'
    },
    'preview': {
      'label': 'appWithinMinutes.renameApp.location.label',
      'hint': 'appWithinMinutes.renameApp.location.hint'
    },
    'parent': {
      'label': 'appWithinMinutes.renameApp.parent.label',
      'hint': 'appWithinMinutes.renameApp.parent.hint',
      'name': 'newAppParentReference',
      'reference': $parentReference,
      'placeholder': 'appWithinMinutes.createApp.parent.placeholder'
    }
  })
#end
{{/velocity}}

{{velocity}}
#set ($liveTableObj = $doc.getObject('AppWithinMinutes.LiveTableClass'))
#if ($liveTableObj)
  #set ($discard = $doc.use($liveTableObj))
  #set ($classFullName = $doc.getValue('class'))
  #if ("$!classFullName" == '' || !$xwiki.exists($classFullName))
    {{warning}}
    $services.icon.render('warning') {{translation key="platform.appwithinminutes.appHomePageMovedWarning"/}}
    {{/warning}}

  #end
  #displayApp
  {{html clean="false"}}
  #renameAppModal
  {{/html}}
#end
{{/velocity}}</content>
  <attachment>
    <filename>locate.png</filename>
    <mimetype>image/png</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAoxJREFUeNqMUztrFFEU/u48NyZr3I0iKMFHY2BBhaRVbLRUUoiNRLRctBQDYZNCBX+DohbBQtAQBcFCwbS6iykiIihEG0Uxu5OZyezM3Ifn3tlkt/TCuY8z537nO9+5w+r1OpRSSNMUjUYDcRwjz/NlKeUF7QdjfdPnntEJzLJeMA2gB+ccSZJgYWEBURSpYxMTUJYFuC4U+kNfpAyAlPi8tgZLn3Umi4J93zcsHMeBJN+vToCNxUVwyi7I9Lqx+MT4iaEBtmizzHmuiLYSQmhfkZCC3fIIyjMzJq3yPLOWZy4bv2KGC5ycar1y9Rp8zzeOLMtMdqJETFxDWbmeKcXg0nfHL4HlWQEQlXx0qJKH9x+QKDYE6XB79iYRIAasRycrgvWqz9rPtkXhWoL5eSUGNP7w7avqcq4CKqmztKQC8m1bZ2VFBfStm6aq2WwqJyaQXWmOfGwf0bZhhyGE7YPZNlxCxfR0ATvYCRLQJqFNCZIm8acLZY8SbduIVX32Gq2z54p2aboWTZ5uqX4XQisPi8rZDMN3bPPNpCrXjgNBU0cSGqVNqWYtEgVCkVWnsPVlFez8OvzZOXTu3cUYMEW5Ow42KaBECrMDBT/TSNlXRDuGqxDfd8PyKpCCQ0v6G2j9aLepBIEwevu+7EDAYzn1IzcAQkikXIJrjNI6WEC6lIch4y0tPHTpBysVOHsufjxNe1snv3TjTnP8zHX8bIdIMoHn9UPYflnZ/sPAiA8rCsxl9ECc7OXJVddPcPRxA5/+xjgxlCApdeGYPEW/tdk+wYyOwKJ3Igc7ol7VMP7oFvYOxfRAcqUkN/SjJMfTuVMIMwVeqeJIrbbzU/VA2c7PNTAm8f+jpad/AgwABu5JtlhhRBEAAAAASUVORK5CYII=</content>
    <filesize>746</filesize>
  </attachment>
  <object>
    <name>AppWithinMinutes.LiveTableViewSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e6b1654b-d0d1-4af9-9c45-1d4e814fd9ae</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {

XWiki.EntryNamePopup = Class.create(XWiki.widgets.ModalPopup, {
  initialize : function($super, trigger) {
    trigger.observe('click', this.showDialog.bindAsEventListener(this));
    this.urlTemplate = trigger.up().next('input[type=hidden]').value;

    this.input = new Element('input', {type: 'text'});
    this.addButton = new Element('input', {
      type: 'image',
      src: '$xwiki.getSkinFile('icons/silk/add.png')',
      alt: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.appHomePageAddEntryLabel'))'
    });

    var container = new Element('div', {id: 'entryNamePopup'});
    container.insert(this.input);
    container.insert(this.addButton);

    $super(container, {
      show: {method: this.showDialog, keys: []},
      add: {method: this._onAdd, keys: ['Enter']}
    }, {
      title: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.appHomePageEntryNameLabel'))',
      verticalPosition: 'top'
    });
  },
  createDialog : function($super, event) {
    this.addButton.observe('click', this._onAdd.bind(this));
    $super(event);
  },
  showDialog : function($super, event) {
    $super(event);
    this.input.clear().focus();
  },
  _onAdd : function() {
    if (this.input.value != '') {
      // We use the global flag because we need to replace both the page name and its title.
      window.self.location = this.urlTemplate.replace(/__entryName__/g, encodeURIComponent(this.input.value));
    } else {
      this.input.focus();
    }
  }
});

function init() {
  var actionBox = $('actionBox');
  if(actionBox) {
    new XWiki.EntryNamePopup(actionBox.down('.add'));
    return true;
  }
  return false;
}
(XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);

return XWiki;
}(XWiki || {}));

/**
 * Rename Application
 */
require(['jquery', 'bootstrap'], function($) {
  #set ($currentDocReference = $xwiki.getDocument($request.currentApp).getDocumentReference())
  // if we cannot find any extension related to this page app, it's not part of an extension.
  var isNotAnExtension = $services.extension.xar.getInstalledExtensions($currentDocReference).isEmpty();

  // double negation! if it's an extension, we stop there: we don't want to add custom AWM rename capabilities
  if (!isNotAnExtension) {
        return;
  }
  // Hijack the rename page action.
  var renameAppModal = $('#renameAppModal');
  $('#tmActionRename').click(function(event) {
    event.preventDefault();
    renameAppModal.modal();
  });

  // Form validation.
  var appNameInput = $('#renameAppTitle');
  var appParentInput = $('#renameAppParentReference');
  var submitButton = renameAppModal.find('.btn-primary[type="submit"]');

  var appNameEmptyError = renameAppModal.find('.appNameEmptyError');
  var pageExistsError = renameAppModal.find('.pageExistsError');
  var locationForbiddenError = renameAppModal.find('.locationForbiddenError');
  appNameEmptyError.add(pageExistsError).add(locationForbiddenError).hide().insertAfter(appNameInput);

  var getNewAppReference = function(local) {
    var appParentReference = local ? null : new XWiki.WikiReference(XWiki.currentWiki);
    if (appParentInput.val() !== '') {
      appParentReference = XWiki.Model.resolve(appParentInput.val(), XWiki.EntityType.SPACE, appParentReference);
    }
    return new XWiki.EntityReference(appNameInput.val(), XWiki.EntityType.SPACE, appParentReference);
  };

  var getNewAppHomePage = function() {
    var newAppReference = getNewAppReference();
    var newAppHomePageReference = new XWiki.EntityReference('WebHome', XWiki.EntityType.DOCUMENT, newAppReference);
    return new XWiki.Document(newAppHomePageReference);
  };

  var startValidation = function() {
    if (appNameInput.val() === '') {
      endValidation(appNameEmptyError);
    } else {
      var newAppHomePage = getNewAppHomePage();
      if (newAppHomePage.documentReference.equals(XWiki.currentDocument.documentReference)) {
        endValidation(pageExistsError);
      } else {
        $.ajax({
          type: 'HEAD',
          url: newAppHomePage.getURL()
        }).done(function() {
          endValidation(pageExistsError);
        }).fail(function(response) {
          if (response.status === 404) {
            $.ajax({
              type: 'HEAD',
              url: newAppHomePage.getURL('edit')
            }).done(function() {
              endValidation();
            }).fail(function() {
              endValidation(locationForbiddenError);
            });
          } else if (response.status === 403) {
            endValidation(locationForbiddenError);
          } else {
            endValidation();
          }
        });
      }
    }
  };

  var endValidation = function(error) {
    if (error) {
      error.show();
    }
    appNameInput.removeClass('loading');
    submitButton.prop('disabled', !!error);
  };

  var validationTimeout;
  var scheduleValidation = function() {
    clearTimeout(validationTimeout);
    renameAppModal.find('.xErrorMsg').hide();
    appNameInput.addClass('loading');
    submitButton.prop('disabled', true);
    validationTimeout = setTimeout(startValidation, 500);
  };

  appNameInput.add(appParentInput).on('input', scheduleValidation);

  var locationPickerModal = renameAppModal.find('.location-picker .modal');
  renameAppModal.on('shown.bs.modal', function(event) {
    // Nested modals are not supported so we have to move the location picker modal outside, but we shouldn't do this
    // before the location picker has been initialized. That's why we wait for the rename application modal to be shown
    // first.
    renameAppModal.after(locationPickerModal);
    appNameInput.focus();
  });

  // Hide the rename application modal when the location picker modal is shown.
  locationPickerModal.removeClass('fade').on('show.bs.modal', function(event) {
    renameAppModal.modal('hide');
  // Show the rename application modal when the location picker modal is hidden.
  }).on('hidden.bs.modal', function(event) {
    renameAppModal.modal('show');
  });

  renameAppModal.find('form').submit(function(event) {
    event.preventDefault();
    renameApp(getRenameData($(this)));
  });

  var getRenameData = function(form) {
    var data = getFormData(form);
    data.newAppReference = XWiki.Model.serialize(getNewAppReference(true));
    delete data.newAppName;
    delete data.newAppParentReference;
    data.outputSyntax = 'plain';
    return data;
  };

  var getFormData = function(form) {
    var data = {};
    form.serializeArray().forEach(function(parameter) {
      // Keep the first value;
      if (!data.hasOwnProperty(parameter.name)) {
        data[parameter.name] = parameter.value;
      }
    });
    return data;
  };

  var renameApp = function(data) {
    // Disable the form to prevent it from being submitted twice.
    renameAppModal.find(':input').prop('disabled', true);
    var notification = new XWiki.widgets.Notification(
      $jsontool.serialize($services.localization.render('appWithinMinutes.renameApp.inProgress')),
      'inprogress'
    );
    var renameAppURL = new XWiki.Document('RenameApplication', 'AppWithinMinutes').getURL('get');
    $.post(renameAppURL, data).then(updateAppHomePage).done(function() {
      renameAppModal.modal('hide');
      notification.replace(new XWiki.widgets.Notification(
        $jsontool.serialize($services.localization.render('appWithinMinutes.renameApp.done')),
        'done'
      ));
      // Delay a bit the redirect so that the user notices the success message.
      setTimeout(function() {
        window.location.href = getNewAppHomePage().getURL();
      }, 0);
    }).fail(function() {
      notification.replace(new XWiki.widgets.Notification(
        $jsontool.serialize($services.localization.render('appWithinMinutes.renameApp.failed')),
        'error'
      ));
    }).always(function() {
      // Re-enable the form.
      renameAppModal.find(':input').prop('disabled', false);
    });
  };

  var updateAppHomePage = function() {
    var deferred = $.Deferred();
    var newAppHomePageEditURL = getNewAppHomePage().getURL('edit');
    $('&lt;div/&gt;').load(newAppHomePageEditURL + ' #inline', function() {
      var formData = $(this).children('form#inline').serializeArray();
      if (formData.length &gt; 0) {
        formData.push({name: 'xaction_save', value: true});
        $.post(newAppHomePageEditURL, formData).done(function() {
          deferred.resolve();
        }).fail(function() {
          deferred.reject();
        });
      } else {
        deferred.reject();
      }
    });
    return deferred.promise();
  }
});</code>
    </property>
    <property>
      <name>Code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>AppWithinMinutes.LiveTableViewSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>d3d5a7c9-7f57-45b2-a750-7c6088881953</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#actionBox {
  width: 13.4em;
}

#actionBox h1 {
  margin: 0 0 .5em 0;
}

#actionBox ul {
  list-style: none outside none;
  margin: 0;
  padding: 0;
}

#actionBox .action {
  background: none no-repeat scroll 0 center transparent;
  display: block;
  font-size: .8em;
  padding: .3em .3em .3em 20px;
  text-transform: uppercase;
}

#actionBox .action.edit {
  background-image: url("$xwiki.getSkinFile('icons/silk/application_edit.png')");
}

#actionBox .action.translate {
  background-image: url("$doc.getAttachmentURL('locate.png')");
}

#actionBox .action.delete {
  background-image: url("$xwiki.getSkinFile('icons/silk/application_delete.png')");
}

#actionBox .action.deleteData {
  background-image: url("$xwiki.getSkinFile('icons/silk/application_form_delete.png')");
}

#actionBox .action.add {
  background-image: url("$xwiki.getSkinFile('icons/silk/add.png')");
}

#entryNamePopup {
  margin-right: 20px;
}

#entryNamePopup input[type=text] {
  width: 99%;
}

#entryNamePopup input[type=image] {
  margin: .3em .5em;
  padding: 0;
  position: absolute;
}

.xwiki-livetable-container {
  /* Make sure the live table doesn't overflow the action panel. */
  clear: right;
}

/**
 * Rename Application
 */
#renameAppTitle.loading {
  background-position: right .3em center;
  padding-left: 12px;
  padding-right: 2em;
}</code>
    </property>
    <property>
      <name>Style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
