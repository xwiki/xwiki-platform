#template('hierarchy_macros.vm')

#set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)

#macro (displaySourceDocument $options)
  <dt>
    <label>$services.localization.render($options.label)</label>
    <span class="xHint">$services.localization.render($options.hint)</span>
  </dt>
  <dd>
    #hierarchy()
    <input type="hidden" name="sourceWikiName" value="$!escapetool.xml($doc.wiki)" />
    <input type="hidden" name="sourceSpaceName" value="$!escapetool.xml($doc.space)" />
    <input type="hidden" name="sourcePageName" value="$!escapetool.xml($doc.name)" />
  </dd>
#end

#macro (displayTranslationSelector $options)
  #set ($docTranslations = $doc.getTranslationList())
  #if ($xwiki.isMultiLingual() && $docTranslations.size() > 0)
    <dt>
      <label for="language">$services.localization.render('language')</label>
      <span class="xHint">$services.localization.render($options.hint)</span>
    </dt>
    <dd>
      <select id="language" name="language">
        ## Add a special "All Translations" combo box entry to copy all translations.
        <option value="ALL" selected="selected">
          $services.localization.render('core.copy.allTranslations')
        </option>
        ## Add all the existing translations.
        #set ($currentLocale = $services.localization.currentLocale)
        #foreach ($docTranslation in $docTranslations)
          #set ($locale = $services.localization.toLocale($docTranslation))
          <option value="$escapetool.xml($docTranslation)">
            $escapetool.xml($locale.getDisplayName($currentLocale))
          </option>
        #end
      </select>
    </dd>
  #end
#end

#macro (displayChildrenCheckbox $options)
  ## Check if the document can have children.
  #if ($doc.name == $defaultDocumentName)
    #set ($spaceReference = $doc.documentReference.parent)
    #countNestedDocuments($spaceReference $childCount)
    #set ($childrenURL = $escapetool.xml($doc.getURL('view', 'viewer=children&displayHidden=true')))
    #set ($checked = !$request.deep || $request.deep == 'true')
    <dt>
      <label>
        <input type="checkbox" name="deep" value="true" #if ($checked)checked="checked"#end />
        $services.localization.render($options.label)
      </label>
      ## The value submitted when the checkbox is not checked, used to preserve the form state.
      <input type="hidden" name="deep" value="false" />
    </dt>
    <dd>
      <span class="xHint">
        $services.localization.render($options.hint, ["<a href='$childrenURL'>", $childCount, '</a>'])
      </span>
    </dd>
  #end
#end

#macro (displayLinksCheckbox $options)
  #set ($backLinksCount = $doc.backlinks.size())
  #set ($backLinksURL = $escapetool.xml($doc.getURL('view', 'viewer=backlinks')))
  #set ($checked = !$request.updateLinks || $request.updateLinks == 'true')
  <dt>
    <label>
      <input type="checkbox" name="updateLinks" value="true" #if ($checked)checked="checked"#end />
      $services.localization.render($options.label)
    </label>
    ## The value submitted when the checkbox is not checked, used to preserve the form state.
    <input type="hidden" name="updateLinks" value="false" />
  </dt>
  <dd>
    <span class="xHint">
      $services.localization.render($options.hint, ["<a href='$backLinksURL'>", $backLinksCount, '</a>'])
    </span>
  </dd>
#end

#macro (displayTerminalCheckbox $options)
  <dt>
    <label>
      #if ($request.terminal)
        #set ($checked = $request.terminal == 'true')
      #else
        #set ($checked = $doc.name != $defaultDocumentName)
      #end
      <input type="checkbox" name="terminal" value="true" #if ($checked)checked="checked"#end />
      $services.localization.render($options.label)
    </label>
    ## Hidden input used to ensure that an unchecked terminal checkbox means non-terminal and that the default is not used by mistake.
    <input type="hidden" name="terminal" value="false" />
  </dt>
  <dd>
    <span class="xHint">$services.localization.render($options.hint)</span>
  </dd>
#end

#macro (maybeDisplayTerminalCheckbox $options)
  #if ($isAdvancedUser || $isSuperAdmin)
    <dl>
      #displayTerminalCheckbox($options)
    </dl>
  #end
#end

#macro (countNestedDocuments $spaceReference $return)
  #set ($isDirectChild = '(doc.space = :space and doc.name <> :defaultDocumentName)')
  #set ($isIndirectChild = "doc.space like :spacePrefix escape '/'")
  #set ($query = $services.query.hql("where $isDirectChild or $isIndirectChild"))
  #set ($query = $query.setWiki($spaceReference.wikiReference.name))
  #set ($localSpaceReference = $services.model.serialize($spaceReference, 'local'))
  #set ($query = $query.bindValue('space', $localSpaceReference))
  #set ($query = $query.bindValue('defaultDocumentName', $defaultDocumentName))
  #set ($spacePrefix = $localSpaceReference.replaceAll('([%_/])', '/$1'))
  #set ($query = $query.bindValue('spacePrefix', "${spacePrefix}.%"))
  #set ($return = $NULL)
  #setVariable("$return" $query.count())
#end

#macro (getNestedDocumentReference $wiki $localSpaceReference $name $locale $terminal $return)
  #if ("$!wiki" == '')
    #set ($wiki = $xcontext.database)
  #end
  #set ($wikiReference = $services.model.createWikiReference($wiki))
  #if ($terminal)
    #set ($spaceReference = $services.model.resolveSpace($localSpaceReference, 'explicit', $wikiReference))
    #set ($documentReference = $services.model.createDocumentReference($name, $spaceReference))
  #else
    #set ($parentReference = $wikiReference)
    #if ($localSpaceReference != "")
      #set ($parentReference = $services.model.resolveSpace($localSpaceReference, 'explicit', $wikiReference))
    #end
    #set ($spaceReference = $services.model.createSpaceReference($name, $parentReference))
    #set ($documentReference = $services.model.resolveDocument('', 'default', $spaceReference))
  #end
  #set ($documentReference = $services.model.createDocumentReference($documentReference, $locale))
  #set ($return = $NULL)
  #setVariable("$return" $documentReference)
#end

#macro (isTargetDocumentTerminal $sourceDocumentName)
  #if ("$!request.terminal" != '' || $request.terminal == '')
    ## The terminal parameter is specified.
    #set ($terminal = $request.terminal == 'true')
  #else
    ## Preserve the source document type.
    #set ($terminal = $sourceDocumentName != $defaultDocumentName)
  #end
#end

#macro (maybeUpdateTitleAfterCopy $copyRequest $sourceDocumentReference $titleRequestParameter)
  ## Check if we need to update the title of the copied page.
  #set ($defaultTitle = $sourceDocumentReference.name)
  #if ($defaultTitle == $services.model.getEntityReference('DOCUMENT', 'default').name)
    #set ($defaultTitle = $sourceDocumentReference.lastSpaceReference.name)
  #end
  ## Update the title of the copied page if the user modified the suggested title or, otherwise, if the original
  ## page title is in sync with the original document reference (in which case the low level copy API keeps the
  ## title of the copy in sync with the new reference, and thus we need to update the title after the page is
  ## copied -- the user preserved the suggested title but changed the reference so they are not anymore in sync).
  #set ($sourceDocument = $xwiki.getDocument($sourceDocumentReference))
  #set ($newTitle = $request.getParameter($titleRequestParameter))
  #if ($newTitle && ($newTitle != $sourceDocument.plainTitle || $sourceDocument.title == $defaultTitle))
    #set ($discard = $copyRequest.setEntityParameters($sourceDocumentReference, {
      'title': $newTitle
    }))
  #end
#end