## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#template('display_macros.vm')
#initRequiredSkinExtensions()
#macro(docTranslationLink $locale $action $fragment)
  #set ($localeName = $locale.getDisplayName($xcontext.locale))
  #if ("$!localeName" == '')
    #set ($localeName = $services.localization.render('core.viewers.information.noLocale'))
  #end
  #set ($translationURL = $doc.getURL($action, $escapetool.url({
    'language': $locale
  })))
  #if ($fragment)
    #set ($translationURL = $translationURL + '#' + $escapetool.url($fragment))
  #end
  <a href="$translationURL" data-locale="$escapetool.xml($locale)">$escapetool.xml($localeName)</a>
#end
$xwiki.jsfx.use('js/xwiki/viewers/information.js', {'forceSkinAction': true, 'language': ${xcontext.locale}})
$xwiki.ssfx.use('js/xwiki/viewers/information.css', true)
$xwiki.jsfx.use('uicomponents/edit/editableProperty.js', {'forceSkinAction': true, 'language': $xcontext.locale})

## Prepare a static list of extensions that provide the default content as XWIKI-12823 hasn't been implemented yet
#set ($staticUIX = [])

##
## Locale
##
#set ($discard = $staticUIX.add({'content': "
  <dt#if ($hasEdit && $tdoc.realLocale == $doc.realLocale && $xwiki.isMultiLingual()) class=""editableProperty""
      data-property=""defaultLocale""#end>
    <label>$escapetool.xml($services.localization.render('core.viewers.information.locale'))</label>
  </dt>
  #set ($displayParams = {'value': $tdoc.realLocale})
  <dd data-key=""locale"">#displayProperty_locale($displayParams)</dd>
  ",
  'order': 100
}))

##
## Original Locale
##
#if ($tdoc.realLocale != $doc.realLocale)
  #set ($discard = $staticUIX.add({'content': "
    <dt>
      <label>$escapetool.xml($services.localization.render('core.viewers.information.originalLocale'))</label>
    </dt>
    <dd data-key=""originalLocale"">#docTranslationLink($doc.realLocale 'view')</dd>
    ",
    'order': 200
  }))
#end

##
## Translations
##
#set ($existingTranslations = $doc.translationLocales)
## Show the list of translations if multilingual is on and either the original page is translatable (has a
## locale specified) or it has existing translations.
#if ($xwiki.isMultiLingual() && ("$!doc.realLocale" != '' || !$existingTranslations.isEmpty()))
  #set ($supportedLocales = $xwiki.availableLocales)
  ## Remove the translations that we already display above.
  #set ($discard = $supportedLocales.remove($tdoc.realLocale))
  #set ($discard = $supportedLocales.remove($doc.realLocale))
  #if (!$supportedLocales.isEmpty())
    #set ($output = [])
    #foreach ($supportedLocale in $supportedLocales)
      #if ($existingTranslations.contains($supportedLocale))
        #set ($discard = $output.add($stringtool.trim("#docTranslationLink($supportedLocale 'view')")))
      #elseif ($hasEdit)
        ## Show the link to create the missing translation if the current user can edit the page. Use the
        ## preferred edit mode (in-place versus stand-alone) depending on the user preferences, in order to
        ## replicate the behavior of the Translate button.
        #set ($action = 'edit')
        #set ($fragment = $NULL)
        #getDefaultDocumentEditor($defaultEditMode)
        #if ($services.edit.document.inPlaceEditingEnabled() && $defaultEditMode == 'wysiwyg')
          ## Link to the in-place page editor which currently uses the view action.
          #set ($action = 'view')
          #set ($fragment = 'translate')
        #end
        #set ($discard = $output.add(
          "<span class='wikicreatelink skipCreatePagePopup'>" +
            $stringtool.trim("#docTranslationLink($supportedLocale $action $fragment)") +
          "</span>"
        ))
      #end
    #end
    #set ($discard = $staticUIX.add({'content': "
      <dt>
        <label>$escapetool.xml($services.localization.render('core.viewers.information.translations'))</label>
      </dt>
      <dd data-key=""translations"">$stringtool.join($output, ', ')</dd>
      ",
      'order': 300
    }))
  #end
#end

##
## Syntax
##
#set ($discard = $staticUIX.add({'content': "
  <dt#if ($hasEdit) class=""editableProperty""#end data-property=""syntax"">
    <label>$escapetool.xml($services.localization.render('core.viewers.information.syntax'))</label>
  </dt>
  <dd>#displayDocumentProperty_syntax()</dd>
  ",
  'order': 400
  }))

##
## Hidden
##
#set ($discard = $staticUIX.add({'content': "
  <dt#if ($hasEdit) class=""editableProperty""#end data-property=""hidden"">
    <label>$escapetool.xml($services.localization.render('core.viewers.information.hidden'))</label>
  </dt>
  <dd>#displayDocumentProperty_hidden()</dd>
  ",
  'order': 500
}))

##
## Required rights
##
#set ($documentRequiredRights = $doc.getRequiredRights())
#set ($suggestedChanges = $services.security.requiredrights.getSuggestedOperations($doc))
#set ($suggestedChangesDisplay = '')
#set ($primaryButton = 'close')
#if ($hasEdit)
  #foreach ($suggestedChange in $suggestedChanges)
    #if ($suggestedChange.increasesRights())
      #if (!$suggestedChange.requiresManualReview())
        #set ($suggestedChangesDisplay =
          "${suggestedChangesDisplay} This document requires ${suggestedChange.rightToAdd().right()} right.")
        #set ($primaryButton = $suggestedChange.rightToAdd().right())
      #else
        #set ($suggestedChangesDisplay =
          "${suggestedChangesDisplay} This document might require ${suggestedChange.rightToAdd().right()} right
                                      but the automated analysis couldn't determine if it is really needed.
          Please manually review the content.")
      #end
    #else
      #if (!$suggestedChange.requiresManualReview())
        #set ($suggestedChangesDisplay = "${suggestedChangesDisplay} According to the analysis, this document doesn't
        require the ${suggestedChange.rightToRemove().right()} right.")
        #if ($suggestedChange.rightToAdd())
          #set ($suggestedChangesDisplay =
            "${suggestedChangesDisplay} Instead, ${suggestedChange.rightToAdd()} might be enough.")
        #else
          #set ($suggestedChangesDisplay =
            "${suggestedChangesDisplay} According to the analysis, no rights are needed.")
        #end
        #set ($primaryButton = $suggestedChange.rightToAdd().right())
      #else
        #set ($suggestedChangesDisplay = "${suggestedChangesDisplay} The analysis couldn't determine if the
          ${suggestedChange.rightToRemove().right()} right is really needed.")
        #if ($suggestedChanges.rightToAdd())
          #set ($suggestedChangesDisplay = "$suggestedChangesDisplay
          It might be enough to require ${suggestedChange.rightToAdd().right()}")
        #else
          #set ($suggestedChangesDisplay = "$suggestedChangesDisplay No right might be required.")
        #end
        #set ($suggestedChangesDisplay = "$suggestedChangesDisplay Please review the analysis results.")
      #end
    #end
  #end
  #set ($requiredRightsHTML = '')
  #foreach($requiredRight in $documentRequiredRights.rights())
    #set ($rightTranslation =
      $services.localization.render("core.viewers.information.requiredRights.right.${requiredRight.right()}"))
    #set ($requiredRightsHTML = "$requiredRightsHTML<li>$escapetool.xml($rightTranslation)</li>")
  #end
  #*
<script>
define('xwiki-required-rights-messages', {
  prefix: 'core.viewers.information.requiredRights.',
  keys: [
    'modal.label',
    'enforcedNoRight',
    'enforced',
    'notEnforced',
    'right.script',
    'right.programming',
    'right.admin'
  ]
});

require(['jquery', 'xwiki-l10n!xwiki-required-rights-messages', function($, l10n) {
  ## TODO: REST API? Or transport them via some attribute (but insecure!)
  const requiredRights = $jsontool.serialize($documentRequiredRights);
  const suggestedChanges = $jsontool.serialize($suggestedChanges);
  const modal = $(`<div class="modal fade text-left" id="requiredRightsModal" tabindex="-1" role="dialog"
  aria-labelledby="requiredRightsModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                ## TODO: aria label?
                $services.icon.renderHTML('cross')
              </button>
              <div class="modal-title" id="requiredRightsModalLabel"></div>
            </div>
            <div class="modal-body xform"></div>
            <div class="modal-footer"></div>
          </div>
        </div>
      </div>
  `);
  modal.find('.modal-title').text(l10n['modal.label']);
  const modalBody = modal.find('.modal-body');
  if (requiredRights.enforce) {
    if (requiredRights?.rights.length === 0) {
      modalBody.append($('<p>').text(l10n['enforcedNoRight']));
    } else {
      modalBody.append($('<p>').text(l10n['enforced']));
      const rightsList = $('<ul>');
      for (const right of requiredRights) {
        rightList.append($('<li>').text(l10n['right.' + right.right.name]));
      }
      modalBody.append(rightsList);
    }
  } else {
    modalBody.append($('<p>').text(l10n['notEnforced']));
  }

  #if (!($documentRequiredRights.enforce() && $docudocumentRequiredRights.rights().isEmpty()))
    <button type="button" class="btn btn-default">Require just edit right</button>
  #end
#if (!($documentRequiredRights.enforce() && $docudocumentRequiredRights.rights().contains))
  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>

  ## TODO: Display the proposed changes if any.
  ## TODO: Render the buttons for which the user has the right.

});
</script>
   *#
  <script>
    define('xwiki-required-rights-messages', {
      keys: [
        'core.editors.saveandcontinue.notification.inprogress',
        'core.editors.saveandcontinue.notification.done',
        'core.editors.saveandcontinue.notification.error'
      ]
    });
    require(['jquery', 'xwiki-meta', 'xwiki-l10n!xwiki-required-rights-messages'], function($, xm, l10n) {
      function init(element) {
        element.find('button[data-xwiki-required-right]').on('click', function() {
          const desiredRight = $(this).data('xwikiRequiredRight');
          // Assume the required right is in the first object.
          const formData = {
            enforceRequiredRights: '1',
            form_token: xm.form_token
          };
          if (desiredRight === '') {
            // Delete the first object.
            formData['deletedObjects'] = 'XWiki.RequiredRightClass_0';
          } else {
            formData['addedObjects'] = 'XWiki.RequiredRightClass_0';
            formData['XWiki.RequiredRightClass_0_level'] = desiredRight;
          }
          const url = new XWiki.Document(xm.documentReference).getURL('save');
          const notification = new XWiki.widgets.Notification(
                  l10n['core.editors.saveandcontinue.notification.inprogress'], 'inprogress');
          $.post(url, formData)
            .then(() => {
                // TODO: trigger an event editor.trigger('xwiki:document:saved');
                notification.replace(new XWiki.widgets.Notification(
                        l10n['core.editors.saveandcontinue.notification.done'],
                        'done'));
              }).catch(response => {
                // TODO: trigger an event editor.trigger('xwiki:document:saveFailed');
                notification.replace(new XWiki.widgets.Notification(
                        l10n.get('core.editors.saveandcontinue.notification.error', response.statusText),
                        'error'));
                return Promise.reject();
              });
        });
      }
      $(function () {
        $(document).on('xwiki:dom:updated', (event, data) => {
          data.elements.forEach(element => init($(element)));
        });
        init($(document.body));
      });
      console.log("inside!");
    });
    console.log("outside");
  </script>
<div class="modal fade text-left" id="required-rights-modal" tabindex="-1" role="dialog"
     aria-labelledby="requiredRightsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
          ## TODO: aria label?
          $services.icon.renderHTML('cross')
        </button>
        <div class="modal-title" id="requiredRightsModalLabel">
          $escapetool.xml($services.localization.render('core.viewers.information.requiredRights.modal.label'))
        </div>
      </div>
      <div class="modal-body xform">
        #if ($documentRequiredRights.enforce())
          #if ($documentRequiredRights.rights().isEmpty())
            <p>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights.enforcedNoRight'))</p>
          #else
            <p>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights.enforced'))</p>
            <ul>
              $requiredRightsHTML
            </ul>
          #end
        #else
          <p>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights.notEnforced'))</p>
        #end
        #if ($suggestedChangesDisplay == '')
          #if ($documentRequiredRights.enforce())
            <p>No changes suggested.</p>
          #else
            <p>According to the analysis, no rights are required. Consider enabling required rights by requiring
              just edit rights.</p>
            #set ($primaryButton = $null)
          #end
        #else
          <p>$suggestedChangesDisplay</p>
        #end
        ## TODO: Render only the buttons for which the user has the right.
      </div>
      <div class="modal-footer">
        #if (!($documentRequiredRights.enforce() && $docudocumentRequiredRights.rights().isEmpty()))
          #if ($primaryButton == $null)
            #set ($buttonClass = 'btn-primary')
          #else
            #set ($buttonClass = 'btn-default')
          #end
          <button type="button" class="btn $buttonClass" data-xwiki-required-right="" data-dismiss="modal"##
          >Require just edit right</button>
        #end
        #set ($requiresScriptRight = false)
        #set ($requiresWikiAdminRight = false)
        #set ($requiresProgrammingRight = false)
        #foreach($requiredRight in $documentRequiredRights)
          #if ($requiredRight.right == 'script')
            #set ($requiresScriptRight = true)
          #elseif ($requiredRight.right == 'admin')
            #set ($requiresWikiAdminRight = true)
          #elseif($requiredRight.right == 'programming')
            #set ($requiresProgrammingRight = true)
          #end
        #end
        #if (!($documentRequiredRights.enforce() && $requiresScriptRight))
          #if ($primaryButton == 'script')
            #set ($buttonClass = 'btn-primary')
          #else
            #set ($buttonClass = 'btn-default')
          #end
          <button type="button" class="btn $buttonClass" data-xwiki-required-right="script" data-dismiss="modal"##
          >Require script right</button>
        #end
        #if (!($documentRequiredRights.enforce() && $requiresWikiAdminRight))
          #if ($primaryButton == 'admin')
            #set ($buttonClass = 'btn-primary')
          #else
            #set ($buttonClass = 'btn-default')
          #end
          <button type="button" class="btn $buttonClass" data-xwiki-required-right="wiki_admin" data-dismiss="modal"##
          >Require wiki admin right</button>
        #end
        #if (!($documentRequiredRights.enforce() && $requiresProgrammingRight))
          #if ($primaryButton == 'programming')
            #set ($buttonClass = 'btn-primary')
          #else
            #set ($buttonClass = 'btn-default')
          #end
          <button type="button" class="btn $buttonClass" data-xwiki-required-right="programming" data-dismiss="modal"##
          >Require programming right</button>
        #end
        #if ($primaryButton == 'close')
          #set ($buttonClass = 'btn-primary')
        #else
          #set ($buttonClass = 'btn-default')
        #end
        <button type="button" class="btn $buttonClass" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
#end
#set ($discard = $staticUIX.add({'content': "
  <dt>
    <label>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights'))</label>
  </dt>
  <dd>
    #if ($documentRequiredRights.enforce())
      #if ($documentRequiredRights.rights().isEmpty())
        <p>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights.enforcedNoRight'))</p>
      #else
        <p>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights.enforced'))</p>
        <ul>
        $requiredRightsHTML
        </ul>
      #end
    #else
      <p>$escapetool.xml($services.localization.render('core.viewers.information.requiredRights.notEnforced'))</p>
    #end

    <p>$suggestedChangesDisplay</p>

    <button type='button' class='btn btn-default' data-toggle='modal' data-target='#required-rights-modal'
    >Review required rights</button>
  </dd>
  ",
  'order': 600
}))

##
## Included Pages
##
#set ($discard = $staticUIX.add({'content': "
  <dt>
    <label>$escapetool.xml($services.localization.render('core.viewers.information.includedPages'))</label>
  </dt>
  <dd>
    #set ($includedPages = $tdoc.includedPages)
    #if ($includedPages.isEmpty())
      <span class=""noitems"">
        $escapetool.xml($services.localization.render('core.viewers.information.noIncludedPages'))
      </span>
    #else
      #displayDocumentList($includedPages false $NULL)
    #end
  </dd>
  ",
  'order': 1100}))

##
## Backlinks
##
#set ($discard = $staticUIX.add({'content': "
  <dt>
    <label>$escapetool.xml($services.localization.render('core.viewers.information.backlinks'))</label>
  </dt>
  <dd>
    #set ($backlinks = $doc.backlinks)
    #set ($discard = $collectiontool.sortModifiable($backlinks))
    #if ($backlinks.isEmpty())
      <span class=""noitems"">
        $escapetool.xml($services.localization.render('core.viewers.information.noBacklinks'))
      </span>
    #else
      #displayDocumentList($backlinks false $NULL)
    #end
  </dd>
  ",
  'order': 1200}))

##
## Reference
##
#set ($discard = $staticUIX.add({'content': "
  <dt>
    <label for=""reference-value"">
      $escapetool.xml($services.localization.render('core.viewers.information.pageReference'))
    </label>
  </dt>
  <dd id=""information-reference"">
    <div class=""reference-group input-group flat-buttons"">
      #set ($globalHint = $services.localization.render('core.viewers.information.pageReference.globalButton'))
      <span class=""input-group-btn"">
        <button id=""button-inout"" class=""btn btn-default"" type=""button"" title=""$escapetool.xml($globalHint)"">
          $services.icon.renderHTML('world')
        </button>
      </span>
      <input id=""reference-value"" type=""text"" readonly title=""$escapetool.xml($services.localization.render(
        'core.viewers.information.pageReference.tips'))"" value=""$escapetool.xml($services.model.serialize(
        $doc.getDocumentReference().getLocalDocumentReference(), 'local'))"" />
      #set ($copyHint = $services.localization.render('core.viewers.information.pageReference.copyButton'))
      <span class=""input-group-btn"">
        <button id=""button-paste"" class=""btn btn-default"" type=""button"" title=""$escapetool.xml($copyHint)"">
          $services.icon.renderHTML('paste')
        </button>
      </span>
    </div>
  </dd>
  ",
  'order': 1300}))

## Add the static UIX to the list of UIX to display
#set ($extensions = [])
#set ($discard = $extensions.addAll($staticUIX))

## Add the dynamic UIX to the list of UIX to display
#foreach($uix in $services.uix.getExtensions('org.xwiki.platform.template.information'))
  #set ($order = $numbertool.toNumber($uix.getParameters().order).intValue())
  #if ("$!order" == '')
    ## Fallback for incomplete/invalid extension orders to avoid breaking the display.
    #set ($order = 0)
  #end
  #set ($uixMap = { 'content'  : $services.rendering.render($uix.execute(), 'html/5.0'),
                    'order'    : $order})
  #set ($discard = $extensions.add($uixMap))
#end

## Sort the extensions by order
#set ($sortedExtensions = $collectiontool.sort($extensions, 'order'))

##
## UIXs are split into two columns based on their order so they have some influence on the column they are displayed in
## as a completely dynamic (e.g., first half left, second half right column) allocation could have strange effects. At
## the same time, the number of columns can be changed by the skin and should not be dictated by the UIXs.
## UIXs with a limit below $columnOrderLimit will be displayed in the left column.
##
#set ($columnOrderLimit = 1000)

###
### Display document information
###
<div id="informationcontent" class="xwikiintracontent">
  <div id="_information" class="row xform">
    ##--------------------------------------------------
    ## Left Column - UIXs with order < $columnOrderLimit
    ##--------------------------------------------------
    <div id="informationleft" class="col-xs-12 col-sm-6">
      <dl>
        #foreach ($extension in $sortedExtensions)
          #if ($extension.order < $columnOrderLimit)
            $extension.content
          #end
        #end
      </dl>
    </div>
    ##----------------------------------------------------
    ## Right Column - UIXs with order >= $columnOrderLimit
    ##----------------------------------------------------
    <div id="informationright" class="col-xs-12 col-sm-6">
      <dl>
        #foreach ($extension in $sortedExtensions)
          #if ($extension.order >= $columnOrderLimit)
            $extension.content
          #end
        #end
      </dl>
    </div>
    <div class="clearfloats">&nbsp;</div>
  </div>## _information
</div>## informationcontent
#getRequiredSkinExtensions($requiredSkinExtensions)
#set ($discard = $response.setHeader('X-XWIKI-HTML-HEAD', $requiredSkinExtensions))
