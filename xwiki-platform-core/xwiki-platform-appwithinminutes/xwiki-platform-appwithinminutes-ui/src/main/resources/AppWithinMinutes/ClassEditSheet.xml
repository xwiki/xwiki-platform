<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>AppWithinMinutes</web>
  <name>ClassEditSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>AppWithinMinutes.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1317906771000</creationDate>
  <date>1319634251000</date>
  <contentUpdateDate>1319634251000</contentUpdateDate>
  <version>1.1</version>
  <title>#if(!$doc.name.endsWith('Sheet'))Class: #end$stringtool.removeEnd($doc.name, 'Class')</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <attachment>
    <filename>bullettick.png</filename>
    <filesize>419</filesize>
    <author>XWiki.Admin</author>
    <date>1319487186000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAB3RJTUUH1woQCDUr2dijRwAAAAlw
SFlzAAAewQAAHsEBw2lUUwAAAARnQU1BAACxjwv8YQUAAAEySURBVHjaY2AYBYzEKgxd4DPx+5/v
Ngz/GE9uSduTBRNnIlazuJBYnqWOuREnE2cmshwLsZoVZeUZ/gHh65dvGHAakLUr3ubf3/+Hv3/9
XrAwZPVEmGZZaWmGX/9+M2xcv43h9rubKN5G8cKf339WyAlJM/z+9adXv1dVk12EKU1KSorhz78/
YM233txgtO4ywe2CF9+fimpxajJoK2syC/EIXhMXFWP48/8Pw7aNuxhuv7/JaNFhxLiJ5+B/nLFg
Pl2HQZBH4L+jthPDv39/wc7evmkPw/WX1xg/zv6BNYxQXMArz8305PIzxo0fN/1X4ldhuHPzHsO1
51cYOSXZmT4y/PhHVDowWaTF9Orq63+SLDL/b7+9wfj7/2+mzzP/YNWMF/BmsHGIN/MRndAGDgAA
vQx64I+NPuAAAAAASUVORK5CYII=
</content>
  </attachment>
  <attachment>
    <filename>bulletcross.png</filename>
    <filesize>587</filesize>
    <author>XWiki.Admin</author>
    <date>1319487186000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAB3RJTUUH1woQCDkQxGYFbwAAAAlw
SFlzAAAewQAAHsEBw2lUUwAAAARnQU1BAACxjwv8YQUAAAHaSURBVHja3VJBa9RAFP5mJroxm3Td
rR4sgojHFaGIvVvBo3gWlGr9CUrFXyD4KwQR/A1KD4VW8NBTrnWr6XazLVvbjW4mmcyML9sqG1v1
7oOXSd7M982X7z1gIqy1/0y5sOhNfrMKwZOlw5eXL3BSZAuLsIWCUQW8t2/GNV45IcTh+vTZX8FG
KSR37p5AoPUlIrGWc5s/etz+WZYPHrZBNR4EdvBh7eaYKFf4eus2r/7C0nOLWg225NrdhZHp1fJG
xnkoGlNwGg1k0RZkHDOT52guv4NTIchzQwo4CwIwz4PNZAjGwH0fTjAFGUXIerE2qgS/H2MqBNnO
zg3uuh95kgineRbCdQFjKDXkl890c18Xo9HcudWVX5iKB+7rV+s6TefUYGCgNLC5CXQ6pTeQvdgc
gdcnMRUFR8OQMc44dAGQ22MFBfkgOC/3fj9eUZDeu9+myQjFGY9ABJ6ZobwwJqiRgcIRYX/2evvP
CqwNHQKf8j2k29uQ/T4ZppjbbPH6+WnopA61vx9uXb7CLnY2jiuwZBY9kHZ7Zas09dq3StW/d7t6
uPGJRoGXLYUlT4jkuAJ1MJzXo3RZDQ+MLbQ/vboiy3p8bdZPoujb6SAQcm9v3m21QCv+k/gB4NkS
we3cC88AAAAASUVORK5CYII=
</content>
  </attachment>
  <attachment>
    <filename>arrow-move.png</filename>
    <filesize>616</filesize>
    <author>XWiki.Admin</author>
    <date>1319487186000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAAZiS0dEAP8A
/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9sFCwoGAh4PDUEAAAHoSURBVCjP
Y2CAAotpDxkYGBgYzKc/1fBe9ua05cxnbgxYACMyx272C10pUbYZxuoCVneffXt29vr7XGEBng07
YgT/wdQwGXRdhWu4eftm7cHjl4V+/vr9d/v+C28ePbpXuPPAAXYGBgYGg84rCJO1Wy/q6ndcXsXA
wMDAmLwluvbU93/cOTvXMTAwMOh3Xpmm03bJB6aWRaHimIaUCOeMZy8/CUkVHYr+9P2H+dev3/8x
/WfkVig7Gvr54xd1Qy1R/7eFh7OERbg3M+o1nTjtYqNtwsj4/+/3P3+Y3n7++u/r159MrOwsf///
+8/8n4Hh79cvP1gY/v57d+3acy2W58/fVt+882T+9dvP3nz+/OPu399/uY09jJyO7zx3nIWN5fXf
33/F1K01ja8fu9rNw8f1jun1dO9dBw5fyf344fOn1zO8g/58+TTnDRM7879fP1+/nOYVzMj479HV
/RdauQQ4eh5NcP3NwsDAwMDK+G8DMzPzdt7oZdP+fvum/p6Z8++vjx/EeGOWL/3140c1ExPT0yd9
7n/Es7aiRgpH0Fwfvo4LT5k2///Pv/zdNw7PqdWcYQtZsUUgA1f4QkjEWLX6szeefstk21HBkrKO
hYEQYAqay8Tg0C3O5DeTlYGBgYE1cC6KPAAEFtSlCs4TrgAAAABJRU5ErkJggg==
</content>
  </attachment>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>AppWithinMinutes.ClassEditSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>cb6bd1b4-599c-4fd6-9862-7969cf38b097</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {
// Start XWiki augmentation.
/**
 * Displays the title (tool tip) inside the text input when there's no value and the text input is not focused.
 */
XWiki.InputWithTitle = Class.create({
  initialize : function(input) {
    this.input = input;
    this.input.observe('focus', this._onFocus.bindAsEventListener(this));
    this.input.observe('blur', this._onBlur.bind(this));

    // We have to listen to the save event because 'Save &amp; Continue' doesn't trigger a form submit event.
    document.observe('xwiki:class:save', this._onSave.bind(this));

    this._onBlur();
  },
  _onFocus : function(event) {
    if (this.input.hasClassName('unset')) {
      this.input.value = '';
      this.input.removeClassName('unset');
    }
  },
  _onBlur : function() {
    if (this.input.value == '') {
      this.input.addClassName('unset');
      this.input.value = this.input.title;
    }
  },
  _onSave : function() {
    this._onFocus();
    this._onBlur.bind(this).defer();
  }
});

/**
 * A text input that is automatically resized to fit its value.
 */
XWiki.AutoResizeInput = Class.create({
  initialize : function(input) {
    this.input = input;
    var resizeEvents = ['blur', 'change', 'cut', 'keyup', 'paste'];
    for(var i = 0; i &lt; resizeEvents.length; i++) {
      this.input.observe(resizeEvents[i], this._resize.bindAsEventListener(this));
    }
    this.input.observe('keypress', this._reserveSpace.bindAsEventListener(this));

    this.meter = new Element('pre', {'class': 'autoResize-meter inherit'});
    this.meter.appendChild(document.createTextNode(''));
    this.input.addClassName('inherit').insert({after: this.meter});

    this._resize();
  },
  _resize : function(event) {
    if (event) {
      this._resize.bind(this).defer();
    } else {
      // Make sure the meter text is not set to the empty string because otherwise the meter offset width is wrongly
      // computed in Chrome. See http://code.google.com/p/chromium/issues/detail?id=105573 .
      this.meter.firstChild.data = this.input.value || ' ';
      this.input.setStyle({width: (this.meter.offsetWidth + 6) + 'px'});
    }
  },
  _reserveSpace : function(event) {
    /* Ignore: Backspace, Delete, End, Home, Left, Up, Right, Down. */
    var ignored = [8, 46, 35, 36, 37, 38, 39, 40];
    for(var i = 0; i &lt; ignored.length; i++) {
      if (event.keyCode == ignored[i]) {
        return;
      }
    }
    this.input.setStyle({width: (this.input.offsetWidth + 6) + 'px'});
  }
});

/**
 * A toggle button backed by a select with two options.
 */
XWiki.ToggleSelect = Class.create({
  initialize : function(select) {
    this.select = select;
    this.select.hide();

    this.off = select.options[0];
    this.on = select.options[1];

    this.switcher = new Element('span', {'class': this.select.className, title: this.select.title});
    this.switcher.removeClassName('toggle').addClassName('toggle-switcher');
    this.switcher.appendChild(document.createTextNode(''));
    this.switcher.observe('click', this._toggle.bind(this));
    this.select.insert({after: this.switcher});

    this._update();
  },
  _toggle : function() {
    if (this.on.selected) {
      this.off.selected = true;
    } else {
      this.on.selected = true;
    }
    this._update();
  },
  _update : function() {
    this.switcher.firstChild.nodeValue = this.select.options[this.select.selectedIndex].text;
  }
});

// Allow widgets to catch the save event before the form is submitted when the 'Save &amp; Continue' button is clicked. We
// need this hack because the 'Save &amp; Continue' handler from actionbuttons.js is added right after the page is loaded,
// before any other code can register its own listener.
document.observe('xwiki:actions:save', function(event) {
  document.fire('xwiki:class:save', {originalEvent: event});
}.bindAsEventListener(window));
// End XWiki augmentation.
return XWiki;
}(XWiki || {}));</code>
    </property>
    <property>
      <name>Widgets</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>AppWithinMinutes.ClassEditSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>9ecc7b32-69ee-4b95-8806-60885aaeb85b</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function (XWiki) {
// Start XWiki augmentation.
/**
 * Handles the form field display (through AJAX), configure (toggle) and delete.
 */
XWiki.FormField = Class.create({
  initialize : function(container) {
    this.container = container;
  },
  enhance : function(data) {
    this.container.insert({top: this._createToolBox()});
    if (data) {
      this.container.addClassName('loading');
      new Ajax.Request(data, {
        method: 'get',
        onSuccess: this._display.bind(this)
      });
    } else {
      this._display(null);
    }
  },
  getContainer : function() {
    return this.container;
  },
  getViewer : function() {
    return this.container.down('.field-viewer')
  },
  getConfig : function() {
    return this.container.down('.field-config');
  },
  getToolBox : function() {
    return this.container.down('.toolBox');
  },
  getName : function() {
    if (!this.container._typeInput) {
      // Field type should be stored in the first hidden input under the field container.
      this.container._typeInput = this.container.down('input[type=hidden]');
    }
    return this.container._typeInput.name.substring('type-'.length);
  },
  getPropertyId : function(propertyName) {
    return 'field-' + this.getName() + '_' + propertyName;
  },
  _display : function(response) {
    // If the field container is still attached, update its content.
    if (this.container.parentNode) {
      if (response) {
        this.container.removeClassName('loading');
        this._injectHTML(response.responseText);
      }

      this.getToolBox().insert({top: this._createConfigIcon()});
      this._onConfigure();

      document.fire('xwiki:class:displayField', {field: this, 'new': !!response});

      this._twoColumnConfigDisplay();
    }
  },
  _injectHTML : function(html) {
    // We don't use Element#update() because it doesn't move external scripts and sheets into HEAD and also because we
    // don't want to support in-line scripts in displayers.
    var container = new Element('div');
    container.innerHTML = html;
    var head = document.body.previous('head');
    container.select('link').each(function(link) {
      head.insert(link);
    });
    container.select('script').each(function(script) {
      if (script.src) {
        head.insert(new Element('script', {type: script.type, src: script.readAttribute('src')}));
      }
      script.remove();
    });
    this.container.insert(container);
  },
  _createToolBox : function() {
    var deleteIcon = new Element('img', {
      src: '$xwiki.getAttachmentURL('AppWithinMinutes.ClassEditSheet', 'bulletcross.png')',
      alt: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorDeleteFieldLabel'))',
      title: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorDeleteFieldLabel'))'
    });
    deleteIcon.observe('click', this._onDelete.bindAsEventListener(this));

    var toolBox = new Element('div', {'class': 'toolBox'});
    toolBox.insert(deleteIcon);
    return toolBox;
  },
  _createConfigIcon : function() {
    return new Element('img').observe('click', this._onConfigure.bindAsEventListener(this));
  },
  _onConfigure : function(event) {
    var icon = event ? event.element() : this.getToolBox().down('img');
    var fieldConfig = this.getConfig();
    if (fieldConfig.visible()) {
      fieldConfig.hide();
      icon.alt = icon.title = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorConfigureFieldLabel'))';
      icon.src = '$xwiki.getSkinFile('icons/silk/bullet_wrench.png')';
      this._maybePreview();
    } else {
      fieldConfig.show();
      icon.alt = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorPreviewFieldLabel'))';
      icon.title = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorPreviewFieldHint'))';
      icon.src = '$xwiki.getAttachmentURL('AppWithinMinutes.ClassEditSheet', 'bullettick.png')';
      this._maybeSavePreviewData();
    }
  },
  _onDelete : function(event) {
    new XWiki.widgets.ConfirmationBox({
      onYes : this._onConfirmedDelete.bind(this)
    }, {
      confirmationText : '$services.localization.render('core.editors.class.deleteProperty.confirm')'
    });
  },
  _onConfirmedDelete : function() {
    this.container.remove();
    document.fire('xwiki:class:deleteField', {field: this});
  },
  _maybeSavePreviewData : function() {
    // Initialize the preview data.
    this.previewData || this._savePreviewData();
    // Make sure the preview data is updated when the field is renamed.
    if (!this._renameListener) {
      this._renameListener = function(event) {
        if (event.memo.field.getContainer() == this.container) {
          this._savePreviewData();
        }
      }.bindAsEventListener(this);
      document.observe('xwiki:class:renameField', this._renameListener);
    }
  },
  _savePreviewData : function() {
    this.previewData = this._asHash();
    // Ignore properties that don't affect the preview.
    ['name', 'prettyName', 'hint', 'required', 'number'].each(function(propertyName) {
      this.previewData.unset(this.getPropertyId(propertyName));
    }.bind(this));
    // Add parameters required by the AJAX preview request.
    this.previewData.set('preview', true);
    this.previewData.set('xpage', 'plain');
  },
  _maybePreview : function() {
    if(!this.previewData) {
      return;
    }
    // Check if there are configuration changes.
    var data = new Hash();
    var areEqual = function(alice, bob) {
      if (typeof alice == typeof bob) {
        if (alice.join) {
          return alice.join() == bob.join();
        }
        return alice == bob;
      }
      return false;
    }
    this._asHash().each(function(pair) {
      var oldValue = this.previewData.get(pair.key);
      if (oldValue != undefined &amp;&amp; !areEqual(pair.value, oldValue)) {
        data.set(pair.key, pair.value);
      }
    }.bind(this));
    var modifiedKeys = data.keys();
    if (modifiedKeys.length &gt; 1 || (modifiedKeys.length == 1 &amp;&amp; !modifiedKeys[0].endsWith('_0_' + this.getName()))) {
      this._preview(this.previewData.clone().update(data));
    }
  },
  _preview : function(data) {
    var preview = this.getViewer().down('dd');
    if (preview) {
      preview.addClassName('loading');
      // Firefox 3.6 doesn't resolve the empty string to the current page URL so we have to explicitly specify it.
      new Ajax.Request(window.location.href, {
        parameters: data.toQueryString(),
        onSuccess: function(response) {
          preview.removeClassName('loading');
          preview.update(response.responseText);
          this.previewData = data;
          document.fire('xwiki:class:previewField', {field: this});
          document.fire('xwiki:dom:updated', {elements: [preview]});
        }.bind(this)
      });
    }
  },
  _asHash : function() {
    // Simulate a submit so that we collect the right values.
    document.fire('xwiki:class:save', {originalEvent: {memo: {}}});
    var inputs = this.container.select('input', 'textarea', 'select');
    return new Hash(Form.serializeElements(inputs, {hash: true}));
  },
  _twoColumnConfigDisplay : function() {
    var leftColumn = this.getConfig();
    var fieldConfig = new Element('div', {'class': leftColumn.className});
    leftColumn.insert({before: fieldConfig});
    fieldConfig.insert(leftColumn);
    fieldConfig.hide();
    leftColumn.className = 'leftColumn';
    leftColumn.show();
    var rightColumn = new Element('dl', {'class': 'rightColumn'});
    fieldConfig.insert(rightColumn);

    var visibleDTs = [];
    leftColumn.select('dt').each(function(dt) {
      if(dt.visible()) {
        visibleDTs.push(dt);
      }
    });

    var half = Math.ceil(visibleDTs.length / 2);
    for(var i = half; i &lt; visibleDTs.length; i++) {
      var dt = visibleDTs[i];
      var dd = dt.next();
      rightColumn.insert(dt);
      if (dd &amp;&amp; dd.tagName.toLowerCase() == 'dd') {
        rightColumn.insert(dd);
      }
    }

    fieldConfig.insert(new Element('div', {'style': 'clear: left'}));
  }
});

/**
 * Manages the form field names. Generates unique names for newly added fields and renames field configuration property ids/names when a field is renamed.
 */
XWiki.FormFieldNameManager = Class.create({
  initialize : function() {
    // Generate a unique field name when a new field is dragged from the palette to the form canvas.
    document.observe('xwiki:class:displayField', this._maybeGenerateFieldName.bind(this));
    // Rename the field configuration property ids/names when a field is renamed. This is needed for AJAX Save &amp; Continue.
    document.observe('xwiki:document:saved', this._maybeRenameFields.bind(this));
  },
  _maybeGenerateFieldName : function(event) {
    if (!event.memo['new']) {
      return;
    }
    var field = event.memo.field;
    var nameInput = $(field.getPropertyId('name'));
    var counter = 1;
    // We check the type meta property because there can be unsupported field types for which we know only their type.
    while($('type-' + nameInput.value + counter++));
    nameInput.value = nameInput.value + (counter - 1);
    this._maybeRenameField(field);
  },
  _maybeRenameFields : function() {
    $('fields').childElements().each(function(item) {
      this._maybeRenameField(new XWiki.FormField(item));
    }.bind(this));
  },
  _maybeRenameField : function(field) {
    var oldName = field.getName();
    var newName = $(field.getPropertyId('name')).value;
    if (oldName != newName) {
      this._maybeRenameElement(oldName, newName, field.getContainer());
      field.getContainer().descendants().each(this._maybeRenameElement.bind(this, oldName, newName));
      document.fire('xwiki:class:renameField', {field: field});
    }
  },
  _maybeRenameElement : function(oldName, newName, element) {
    ['id', 'name', 'for'].each(function(attribute) {
      var value = element.readAttribute(attribute) || '';
      if (value.startsWith('xwiki-form-' + oldName)) {
        // This is for fields with multiple values (e.g. radio buttons).
        value = 'xwiki-form-' + newName + value.substring(11 + oldName.length);
      } else if (value.endsWith('_0_' + oldName)) {
        // This is for field default value.
        value = value.substring(0, value.length - oldName.length) + newName;
      } else {
        // This is for field meta properties.
        var nameIndex = value.indexOf('-') + 1;
        if (nameIndex &gt; 0 &amp;&amp; (value.substring(nameIndex) == oldName || value.substring(nameIndex).startsWith(oldName + '_'))) {
          value = value.substring(0, nameIndex) + newName + value.substring(nameIndex + oldName.length);
        }
      }
      if (value != '') {
        element.writeAttribute(attribute, value);
      }
    });
  }
});

/**
 * Enhances the way the field pretty name is edited. Allows users to edit the pretty name in-place inside the field preview.
 */
XWiki.FormFieldPrettyNameManager = Class.create({
  initialize : function() {
    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));
  },
  _onDisplayField : function(event) {
    var field = event.memo.field;
    var prettyNameInput = $(field.getPropertyId('prettyName'));
    // Hide the DD containing the pretty name input.
    var parentDD = prettyNameInput.up('dd');
    parentDD.hide();
    // Hide the DT containing the pretty name input label.
    var previousDT = parentDD.previous('dt');
    previousDT.hide();
    // Use the label text as tool tip for the pretty name input, if the title attribute is not specified.
    if (!prettyNameInput.title) {
      var label = previousDT.down('label');
      prettyNameInput.title = label.textContent || label.innerText;
    }
    // Replace the preview label with the pretty name input.
    var previewLabel = field.getViewer().down('label');
    previewLabel.writeAttribute('for', '');
    previewLabel.removeChild(previewLabel.lastChild);
    previewLabel.insert(prettyNameInput);
    // Enhance the pretty name input.
    new XWiki.InputWithTitle(prettyNameInput);
    new XWiki.AutoResizeInput(prettyNameInput);
  }
});

/**
 * Adds a tool tip to the default value input.
 */
XWiki.FormFieldDefaultValueManager = Class.create({
  initialize : function() {
    var enhanceFieldDefaultValue = this._enhanceFieldDefaultValue.bindAsEventListener(this);
    document.observe('xwiki:class:displayField', enhanceFieldDefaultValue);
    document.observe('xwiki:class:previewField', enhanceFieldDefaultValue);

    // We need to listen to save event to rename the default value inputs to match the new field name.
    document.observe('xwiki:class:save', this._onSave.bind(this));
  },
  _enhanceFieldDefaultValue : function(event) {
    var field = event.memo.field;
    var fieldName = field.getName();
    field.getViewer().select('input[type=text]', 'textarea').each(function(input) {
      if (!input.title &amp;&amp; input.name.endsWith('_0_' + fieldName)) {
        input.title = '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorFieldDefaultValueToolTip'))';
      }
    });
  },
  _onSave : function() {
    $('fields').childElements().each(function(item) {
      this._maybeRenameDefaultValue(new XWiki.FormField(item));
    }.bind(this));
  },
  _maybeRenameDefaultValue : function(field) {
    var oldName = field.getName();
    var newName = $(field.getPropertyId('name')).value;
    if(oldName != newName) {
      field.getViewer().select('input', 'textarea', 'select').each(function(element) {
        if (element.name.endsWith('_0_' + oldName)) {
          element.name = element.name.substring(0, element.name.length - oldName.length) + newName;
        }
      });
    }
  }
});

/**
 * Makes the hint editable in place.
 */
XWiki.FormFieldHintManager = Class.create({
  initialize : function() {
    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));
  },
  _onDisplayField : function(event) {
    var field = event.memo.field;
    var hintInput = $(field.getPropertyId('hint'));
    // TODO: Remove this test after the 'hint' meta property is added to the platform.
    if (hintInput) {
      hintInput.addClassName('xHint');
      if (!hintInput.title) {
        hintInput.title = 'Hint';
      }
      // Move the hint input below the pretty name input, in the field viewer.
      field.getViewer().down('label').insert({after: hintInput});
      // Enhance the hint input.
      new XWiki.InputWithTitle(hintInput);
      new XWiki.AutoResizeInput(hintInput);
    }
  }
});

/**
 * Replaces the input of the "required" field property with a toggle button.
 */
XWiki.FormFieldRequiredManager = Class.create({
  initialize : function() {
    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));
  },
  _onDisplayField : function(event) {
    var field = event.memo.field;
    var requiredInput = $(field.getPropertyId('required'));
    // TODO: Remove this test after the 'required' meta property is added to the platform.
    if (requiredInput) {
      var prettyNameLabel = field.getViewer().down('label');
      var wrapper = new Element('div', {'class': 'labelLine'});
      prettyNameLabel.insert({before: wrapper});
      wrapper.insert(prettyNameLabel);
      wrapper.insert('&lt;label&gt;&lt;select class="xRequired" title="Click to toggle between (Optional) and (Required)"&gt;&lt;option&gt;(Optional)&lt;/option&gt;&lt;option&gt;(Required)&lt;/option&gt;&lt;/select&gt;&lt;/label&gt;');
      new XWiki.ToggleSelect(prettyNameLabel.next().down('select'));
    }
  }
});

/**
 * Manages the sortable list of form fields. Accepts fields dragged from the field palette.
 */
XWiki.FormCanvas = Class.create({
  initialize : function(container) {
    this.container = $(container);
    Droppables.add(this.container, {accept: 'field', hoverclass: 'hovered', onDrop: this._onDrop.bind(this)});

    document.observe('xwiki:class:deleteField', this._onDeleteField.bind(this));
    document.observe('xwiki:class:displayField', this._onDisplayField.bindAsEventListener(this));

    this.fields = this.container.down('ul');
    if (!this.fields) {
      this.fields = new Element('ul');
      this.container.insert(this.fields);
    }
    this.fields.id = 'fields';
    if (this.fields.empty()) {
      this.container.addClassName('empty');
    } else {
      this._enhanceFields();
    }
  },
  _enhanceFields : function() {
    this.fields.childElements().each(function(item) {
      new XWiki.FormField(item).enhance();
    });
  },
  _onDrop : function(field) {
    var fieldContainer = new Element('li');
    this.fields.insert(fieldContainer);
    this.container.removeClassName('empty');
    new XWiki.FormField(fieldContainer).enhance(field.down('.data').value);
  },
  _onDeleteField : function() {
    if (this.fields.empty()) {
      this.container.addClassName('empty');
    } else {
      this._updateOrder();
    }
  },
  _onDisplayField : function(event) {
    var field = event.memo.field;

    // We have to set the ID of the field container as otherwise Sortable.onUpdate() isn't triggered.
    field.getContainer().id = 'field-' + field.getName();

    // Hide the property number, as ordering can be done by drag and drop
    var numberInput = $(field.getPropertyId('number'));
    numberInput.up().hide();
    numberInput.up().previous().hide();

    // Create and insert the move icon.
    var moveIcon = new Element('img', {
      src: '$xwiki.getAttachmentURL('AppWithinMinutes.ClassEditSheet', 'arrow-move.png')',
      alt: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorMoveFieldLabel'))',
      title: '$escapetool.javascript($services.localization.render('platform.appwithinminutes.classEditorMoveFieldHint'))',
      'class': 'icon-move'
    });
    field.getToolBox().insert({bottom: moveIcon});

    Sortable.create('fields', {
      handle: 'icon-move',
      format: /^[^_\-](?:[A-Za-z0-9\-\_]*)[\-](.*)$/,
      onUpdate : this._updateOrder.bind(this)
    });

    if (event.memo['new']) {
      this._updateOrder();
    }
  },
  _updateOrder : function() {
    var items = this.fields.childElements();
    for(var i = 0; i &lt; items.length; i++) {
      var field = new XWiki.FormField(items[i]);
      if (field.getConfig()) {
        $(field.getPropertyId('number')).value = i + 1;
      } else {
        // Stop updating the order. This method will be called again when the field will be loaded.
        break;
      }
    }
  }
});

/**
 * Manages the palette of form fields.
 */
XWiki.FormFieldPalette = Class.create({
  initialize : function(container) {
    $(container).select('.field').each(function(field) {
      new Draggable(field, {
        revert: true,
        reverteffect: function(field) {
          // Reset the in-line style.
          field.setStyle({
            height: '',
            left: '',
            position: '',
            top: '',
            zIndex: '',
            width: ''
          });
        },
        ghosting: true
      });
    });
  }
});
// End XWiki augmentation.
return XWiki;
}(XWiki || {}));

(function() {
  function init() {
    var form = $('inline');
    if (!form) {
      return false;
    }
    // Let the sheet handle the form submit.
    // NOTE: The code that handles Save&amp;Continue uses this URL to make the AJAX request and Firefox 3.6 doesn't resolve
    // the empty string to the current page URL so we have to explicitly specify it.
    form.action = window.location.href;

    // Apply the vertical form layout standard.
    form.addClassName('xform');

    // Remove the preview button.
    form.down("input[name='action_preview']").remove();

    // Rename the save buttons.
    form.down("input[name='action_save']").name = 'xaction_save';
    form.down("input[name='action_saveandcontinue']").name = 'xaction_saveandcontinue';

    // Make sure the 'Save &amp; Continue' button is submitted when clicked.
    document.observe('xwiki:class:save', function(event) {
      event = event.memo.originalEvent;
      if (event.memo['continue']) {
        var submitButton = event.memo.originalEvent.element();
        submitButton.insert({after: new Element('input', {type: 'hidden', 'name': submitButton.name})});
        (function () {
          submitButton.next().remove();
        }).defer();
      }
    }.bindAsEventListener(window));

    // Be prepared to enhance some of the field properties.
    new XWiki.FormFieldNameManager();
    new XWiki.FormFieldPrettyNameManager();
    new XWiki.FormFieldHintManager();
    new XWiki.FormFieldDefaultValueManager();
    new XWiki.FormFieldRequiredManager();

    // Make the palette and the canvas live.
    new XWiki.FormFieldPalette('palette');
    new XWiki.FormCanvas('canvas');

    return true;
  }
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
}).call();</code>
    </property>
    <property>
      <name>Framework</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <name>AppWithinMinutes.ClassEditSheet</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>2a2d7281-2e73-4ed6-a6b4-863b8ae360e3</guid>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.SheetDescriptorClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <action>
        <customDisplay/>
        <disabled>0</disabled>
        <name>action</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>Action</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </action>
    </class>
    <name>AppWithinMinutes.ClassEditSheet</name>
    <number>0</number>
    <className>XWiki.SheetDescriptorClass</className>
    <guid>c25fb06c-956e-4cc3-a891-63bef91b2c21</guid>
    <property>
      <action>edit</action>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>AppWithinMinutes.ClassEditSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>ca2012cf-0113-4cc4-a140-98582ca729a1</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
#canvas, #options {
  border: 1px solid $theme.pageContentBackgroundColor;
  margin: 0.5em 16em 0.5em 0;
  padding: 0.5em;
}

#canvas.empty, #canvas.hovered {
  border: 1px dashed $theme.borderColor;
}

#canvas .hint {
  background: url("$xwiki.getSkinFile('icons/silk/application_form_add.png')") no-repeat scroll left center transparent;
  color: $theme.textSecondaryColor;
  display: none;
  font-style: italic;
  margin: 0.5em;
  padding-left: 24px;
}

#canvas.empty .hint {
  display: block;
}

#fields input:focus, #fields textarea:focus {
  background-color: $theme.highlightColor;
}

#fields {
  margin: 0;
  padding: 0;
}

#fields &gt; li {
  border: 1px dotted $theme.pageContentBackgroundColor;
  list-style: none;
  /* Make sure the loading animation is properly displayed. */
  min-height: 18px;
  padding: 0 0.5em 0.5em;
}

#fields &gt; li .toolBox {
  display: none;
  position: absolute;
  right: 0.5em;
  top: 0.5em;
}

#fields .icon-move {
  cursor: move;
  margin: 2px;
}

#fields &gt; li:hover {
  border: 1px dotted $theme.borderColor;
}

#fields &gt; li:hover .toolBox {
  display: block;
}

#fields .field-config {
  background-color: $theme.backgroundSecondaryColor;
  margin-top: 1em;
  padding: 0 0.5em 0.5em;
}

#fields .fullScreenEditLinkContainer {
  display: none;
}

#fields .field-config .leftColumn, #fields .field-config .rightColumn {
  float: left;
  width: 49%;
}

#fields .field-config .leftColumn {
  margin-right: 2%;
}

#fields .field-config .readOnly {
  background-color: $theme.backgroundSecondaryColor;
}

#options {
  background-color: $theme.backgroundSecondaryColor;
  padding-left: 1em;
  width: 33%;
}

#options .warningmessage {
  border: 0 none;
  font-size: 0.8em;
}

#palette {
  background-color: $theme.backgroundSecondaryColor;
  float: right;
  max-width: 13.5em;
  padding: 0.5em 1em 1em;
}

#palette ul {
  margin: 0;
  padding: 0;
}

#palette li {
  list-style: none;
}

#palette .category {
  border-bottom: 1px dotted $theme.borderColor;
  color: $theme.linkColor;
  display: block;
  margin-bottom: 0.5em;
  margin-top: 0.7em;
}

#palette .field {
  cursor: move;
  display: block;
  font-size: smaller;
  padding: .3em;
}

#palette .field:hover {
  background-color: $theme.highlightColor !important;
}

.xform .wizard-footer {
  margin: 1em 16em 0 0;
}</code>
    </property>
    <property>
      <name>Framework</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>AppWithinMinutes.ClassEditSheet</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>25c841f5-068e-4fdc-9599-6b8f63353958</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#options dt, #fields dt {
  margin-top: 0;
  padding-top: 0.5em;
}

#fields .field-config label {
  color: $theme.textSecondaryColor;
}

#fields .unset {
  color: $theme.textSecondaryColor !important;
}

#fields .autoResize-meter {
  left: -9999px;
  position: absolute;
  top: 0;
  visibility; hidden;
}

#fields .inherit {
  background-image: none;
  border: 0 none;
  box-shadow: none;
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  letter-spacing: inherit;
  padding: 0;
  text-align: inherit;
  text-transform: inherit;
  word-spacing: inherit;
}

#fields input.inherit:hover, #fields input.xHint:hover {
  background-color: $theme.highlightColor;
}

#fields input.xHint {
  border: 0 none;
}

#fields .labelLine label {
  display: inline-block;
}

#fields .toggle-switcher {
  cursor: pointer;
}</code>
    </property>
    <property>
      <name>Widgets</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{groovy}}
import com.xpn.xwiki.XWikiContext;
import com.xpn.xwiki.api.Context;
import com.xpn.xwiki.api.Object;
import com.xpn.xwiki.api.PropertyClass;
import com.xpn.xwiki.doc.XWikiDocument;
import com.xpn.xwiki.objects.BaseObject;

/**
 * Used to preview class fields that have a custom display associated, before they are actually added/saved to the
 * class. For instance, when the user drags a Date field from the palette to the field canvas the class editor needs to
 * display that Date field as if the user would be editing an object with this Date field in "Inline form" edit mode.
 * This means that if the Date field has a custom display, the custom display should be used (e.g. using a Date picker).
 */
class PropertyCustomDisplayer
{
    private XWikiContext context;

    public PropertyCustomDisplayer(Context context)
    {
        this.context = context.getContext();
    }

    public String display(PropertyClass property, String prefix, com.xpn.xwiki.api.Object object)
    {
        HashMap&lt;String, Object&gt; backup = new HashMap&lt;String, Object&gt;();
        try {
            XWikiDocument.backupContext(backup, this.context);
            return this.displayInternal(property.getPropertyClass(), prefix, object.getXWikiObject());
        } finally {
            XWikiDocument.restoreContext(backup, this.context);
        }
    }

    private String displayInternal(com.xpn.xwiki.objects.classes.PropertyClass property, String prefix, BaseObject object)
    {
        StringBuffer result = new StringBuffer();
        property.displayCustom(result, property.getName(), prefix, "edit", object, this.context);
        return result.toString();
    }
}
xcontext.put('propertyCustomDisplayer', new PropertyCustomDisplayer(xcontext))
{{/groovy}}

{{velocity output="false"}}
#**
 * Displays the field palette.
 *#
#macro(displayFieldPalette)
  (% id="palette" %)
  (((
    **$services.localization.render('platform.appwithinminutes.classEditorPaletteTitle')**

    (% class="xHint" %)
    $services.localization.render('platform.appwithinminutes.classEditorPaletteHint')

    ## List all form field types, grouped by category.
    #set($formFieldDocs = [])
    #set($formFieldClassName = 'AppWithinMinutes.FormFieldClass')
    #set($categoryListStatement = 'from doc.object(AppWithinMinutes.FormFieldCategoryClass) as category order by category.priority')
    #foreach($category in $services.query.xwql($categoryListStatement).execute())
      #set($categoryDoc = $xwiki.getDocument($category))
      * (% class="category" %)$categoryDoc.plainTitle
        #set($formFieldsForCategoryStatement = "from doc.object($formFieldClassName) as field where field.category = :category order by field.priority")
        #set($formFieldsForCategoryQuery = $services.query.xwql($formFieldsForCategoryStatement).bindValue('category', $category))
        #foreach($formField in $formFieldsForCategoryQuery.execute())
          #set($formFieldDoc = $xwiki.getDocument($formField))
          #set($discard = $formFieldDocs.add($formFieldDoc))
          #set($formFieldIcon = $formFieldDoc.getObject($formFieldClassName).getProperty('icon').value)
          #if($formFieldIcon.contains('/'))
            #set($formFieldIconURL = $xwiki.getSkinFile($formFieldIcon))
          #else
            #set($formFieldIconURL = $formFieldDoc.getAttachmentURL($formFieldIcon))
          #end
          ** (% class="field" %){{html}}
              &lt;img src="$formFieldIconURL" alt="$escapetool.xml($formFieldDoc.title)" class="icon" /&gt;
              $escapetool.xml($formFieldDoc.plainTitle)
              ## FIXME: We should use the 'get' action instead to prevent the stats module from recording this AJAX request.
              ## The 'edit' action is a temporary solution until the sheet module is modified to allow a sheet to be enforced through
              ## the query string even if it doesn't match the action (e.g. the 'get' action).
              ## The sheet parameter is required when editing a new class because the request will be made to a document that doesn't exist.
              &lt;input type="hidden" value="$doc.getURL('edit', "xpage=plain&amp;sheet=AppWithinMinutes.ClassEditSheet&amp;field=$escapetool.url($formFieldDoc.fullName)")" class="data"/&gt;
            {{/html}}
        #end
    #end
  )))
#end

#**
 * Displays the field canvas.
 *#
#macro(displayFieldCanvas)
  #set($propertyType2FormField = {})
  #foreach($formFieldDoc in $formFieldDocs)
    ## Use the type of the field template.
    #set($type = $formFieldDoc.getxWikiClass().properties.get(0).classType)
    #set($discard = $propertyType2FormField.put($type, $formFieldDoc))
  #end
  (% id="canvas" %)
  (((
    (% class="hint" %)
    $services.localization.render('platform.appwithinminutes.classEditorCanvasHint')

    #set($unknownFields = [])
    #set($empty = true)
    #foreach ($field in $doc.getxWikiClass().properties)
      #set($formFieldDoc = $propertyType2FormField.get($field.classType))
      #if($formFieldDoc)
        #set($empty = false)
        * (((#displayField($field $formFieldDoc))))
      #else
        #set($discard = $unknownFields.add($field))
      #end
    #end
    #if(!$empty)
      ## Leave an empty line to separate the blocks.

    #end
    ##
    (% class="hidden" %)
    {{html}}
      ## Output the field meta data even if the field is not supported to preserve it when the class is saved.
      #foreach($field in $unknownFields)
        #displayFieldMetaData($field)
      #end
    {{/html}}
  )))
#end

#**
 * Display the options to create/update the class template, the class sheet and the class translation bundle.
 *#
#macro(displayClassOptions)
  #set($className = $stringtool.removeEnd($doc.name, 'Class'))
  #set($templateName = "${className}Template")
  #set($translationsName = "${className}Translations")
  #set($classSheets = $services.sheet.getClassSheets($doc))
  #if($classSheets.isEmpty())
    #set($sheetName = "${className}Sheet")
  #elseif($classSheets.size() == 1)
    #set($sheetName = $services.model.serialize($classSheets.get(0)))
  #end
  {{html wiki="true"}}
  ## Hide the options if neither the sheet nor the template nor the translation bundle exists. They don't have to be updated, they have to be created.
  (% id="options" #if(!$xwiki.exists($sheetName) &amp;&amp; !$xwiki.exists($templateName) &amp;&amp; !$xwiki.exists($translationsName))class="hidden" #end%)
  ; &lt;label for="updateClassTemplate"&gt;&lt;input type="checkbox" id="updateClassTemplate" name="updateClassTemplate" checked="checked" /&gt;$services.localization.render('platform.appwithinminutes.classEditorUpdateTemplateLabel')&lt;/label&gt;
  : (% class="xHint" %)$services.localization.render('platform.appwithinminutes.classEditorUpdateTemplateHint', "[[$templateName]]")
  ; &lt;label for="updateClassSheet"&gt;&lt;input type="checkbox" id="updateClassSheet" name="updateClassSheet" #if($sheetName)checked="checked" #{else}disabled="disabled" #end/&gt;$services.localization.render('platform.appwithinminutes.classEditorUpdateSheetLabel')&lt;/label&gt;
  : #if($sheetName)
      (% class="xHint" %)$services.localization.render('platform.appwithinminutes.classEditorUpdateSheetHint', "[[$sheetName]]")
    #else
      (% class="warningmessage" %)$services.localization.render('platform.appwithinminutes.classEditorMultipleSheetsWarning')
    #end
  ; &lt;label for="updateClassTranslations"&gt;&lt;input type="checkbox" id="updateClassTranslations" name="updateClassTranslations" checked="checked" /&gt;$services.localization.render('platform.appwithinminutes.classEditorUpdateTranslationsLabel')&lt;/label&gt;
  : (% class="xHint" %)$services.localization.render('platform.appwithinminutes.classEditorUpdateTranslationsHint', "[[$translationsName]]")
  {{/html}}
#end

#**
 * Display a form field.
 *#
#macro(displayField $field $formFieldDoc)
  #if($formFieldDoc.getObject('XWiki.StyleSheetExtension'))
    #set($discard = $xwiki.ssx.use($formFieldDoc.fullName))
  #end
  #if($formFieldDoc.getObject('XWiki.JavaScriptExtension'))
    #set($discard = $xwiki.jsx.use($formFieldDoc.fullName))
  #end
  (% class="hidden" %)
  {{html}}
    #displayFieldMetaData($field)
    ## We need this information to avoid querying and loading all FormField documents twice.
    ## NOTE: We use a different ID format to avoid collisions with the field meta properties.
    &lt;input type="hidden" id="template-$field.name" name="template-$field.name" value="$escapetool.xml($formFieldDoc.fullName)" /&gt;
  {{/html}}

  #set($className = $stringtool.removeEnd($doc.name, 'Class'))
  #set($templateRef = $services.model.createDocumentReference($doc.wiki, $doc.space, "${className}Template"))
  #set($templateDoc = $xwiki.getDocument($templateRef))
  ## Simulate the editing of the class instance from the template document.
  ## Note that we can't simply call display on the template document because $field could be a new field that hasn't
  ## been added to the class yet (so the object from the template doesn't have this field yet).
  (% class="field-viewer" %)
  #displayFieldProperty($field "${doc.fullName}_0_" $templateDoc.getObject($doc.fullName, true))

  #set($propertyNames = ['name', 'prettyName', 'number', 'required', 'hint'])
  #set($formFieldObj = $formFieldDoc.getObject('AppWithinMinutes.FormFieldClass'))
  #set($customPropertyNames = $formFieldObj.getProperty('properties').value.split('\s+'))
  #set($discard = $customPropertyNames.removeAll($propertyNames))
  #set($discard = $propertyNames.addAll($customPropertyNames.subList(0, $customPropertyNames.size())))
  (% class="field-config" %)
  #foreach($propertyName in $propertyNames)
    #set($propertyDefinition = $field.xWikiClass.get($propertyName))
    #if($propertyDefinition)
      #displayFieldProperty($propertyDefinition "field-${field.name}_" $field)
    #end
  #end
#end

#**
 * Display the field meta data. This is needed to preserve the field when its type is not supported by the editor.
 *#
#macro(displayFieldMetaData $field)
  &lt;input type="hidden" id="type-$field.name" name="type-$field.name" value="$field.classType" /&gt;
#end

#**
 * Displays a configuration property of a class field. This macro can also be used to display a property of an object.
 *#
#macro(displayFieldProperty $property $prefix $field)
  #set($displayFormType = $property.getProperty('displayFormType'))
  #if($property.classType == 'Boolean' &amp;&amp; (!$displayFormType || $displayFormType.value == 'checkbox'))
    ; {{html clean="false"}}&lt;label for="$!{prefix}$property.name"&gt;#displayPropertyEditInput($property, $prefix, $field)$escapetool.xml($property.prettyName)&lt;/label&gt;{{/html}}
  #else
    ; {{html}}&lt;label for="${prefix}$property.name"&gt;$escapetool.xml($property.prettyName)&lt;/label&gt;{{/html}}
    : {{html clean="false"}}#displayPropertyEditInput($property, $prefix, $field){{/html}}
  #end
#end

#**
 * Displays the input used to edit the specified property of the given object. The given object can be either an
 * instance of an XWiki class or a class field. In the first case the property represents an object field and in the
 * second case the property represents a field meta property.
 *#
#macro(displayPropertyEditInput $property $prefix $object)
  #set($wrappedProperty = $property.propertyClass)
  #if($wrappedProperty.isCustomDisplayed($xcontext.context))
    $xcontext.get('propertyCustomDisplayer').display($property, $prefix, $object)
  #else
    $doc.displayEdit($property, $prefix, $object)
  #end
#end

#**
 * Called when a new form field is added via AJAX.
 *#
#macro(displayNewField)
  ## Output the SkinExtension hooks to allow field displayers to pull JavaScript/CSS resources.
  ## The class editor moves this resource includes in the HTML page head.
  {{html}}
  #skinExtensionHooks
  {{/html}}

  #set($formFieldDoc = $xwiki.getDocument($request.field))
  #set($formFieldDocClassFields = $formFieldDoc.getxWikiClass().getXWikiClass().properties)
  #if($formFieldDocClassFields.size() &gt; 0)
    ## Clone the field template.
    #set($field = $formFieldDocClassFields.get(0).clone())
    #if("$!field.prettyName" == '')
      #set($discard = $field.setPrettyName($formFieldDoc.title))
    #end
    #set($discard = $doc.getxWikiClass().getXWikiClass().addField($field.name, $field))
    #displayField($doc.getxWikiClass().get($field.name) $formFieldDoc)
  #else
    Unsupported form field.
  #end
#end

#**
 * Preview a class field.
 *#
#macro(previewField)
  ## Find the request parameter that specifies the field template.
  #foreach($paramName in $request.getParameterMap().keySet())
    #if($paramName.startsWith('template-'))
      #set($fieldName = $paramName.substring(9))
      #set($fieldTemplateDoc = $xwiki.getDocument($request.getParameter($paramName)))
      #break
    #end
  #end
  ##
  ## Clone the field template.
  #set($field = $fieldTemplateDoc.getxWikiClass().getXWikiClass().properties.get(0).clone())
  ##
  ## Update the field meta properties based on the submitted data.
  #set($valuesFromRequest = $xcontext.context.getForm().getObject("field-$fieldName"))
  #set($discard = $field.getxWikiClass().fromMap($valuesFromRequest, $field))
  ##
  ## Don't rename the field (ignore the submitted name).
  #set($discard = $field.setName($fieldName))
  ##
  ## We have to add the field to the class before setting its value.
  ## (otherwise the field value from the request is ignored).
  #set($xclass = $doc.getxWikiClass().getXWikiClass())
  #set($discard = $xclass.addField($fieldName, $field))
  ##
  ## Create an object that has this field and set its value from request.
  #set($object = $fieldTemplateDoc.getObject($doc.fullName, true))
  ##
  ## Filter empty values from the request, otherwise the update method could try to select an invalid value.
  #set($values = [])
  #foreach($value in $request.getParameterValues("${doc.fullName}_0_$fieldName"))
    #if($value != '')
      #set($discard = $values.add($value))
    #end
  #end
  #if($values.size() &gt; 0)
    #set($stringArray = $request.getParameterValues("template-$fieldName"))
    #set($discard = $xclass.fromMap({$fieldName: $values.toArray($stringArray)}, $object.getXWikiObject()))
  #end
  ##
  ## Display the field.
  #set($field = $doc.getxWikiClass().get($fieldName))
  {{html clean="false"}}#displayPropertyEditInput($field, "${doc.fullName}_0_", $object){{/html}}
#end

#**
 * Display the edit class form.
 *#
#macro(displayEditForm)
  $xwiki.jsfx.use('js/scriptaculous/dragdrop.js')##
  $xwiki.jsx.use('AppWithinMinutes.ClassEditSheet')##
  $xwiki.ssx.use('AppWithinMinutes.ClassEditSheet')##
  $xwiki.ssx.use('AppWithinMinutes.ClassSheetGenerator')##
  #if("$!request.wizard" == 'true')
    #appWizardHeader(2)

  #end
  #displayFieldPalette()
  #displayFieldCanvas()
  #displayClassOptions()
  #if("$!request.wizard" == 'true')

    #appWizardFooter(2)
  #end
  (% class="clearfloats" %)((()))
#end

#**
 * Displays either the edit class form or a new form field. The later is used when adding a new form field via AJAX.
 *#
#macro(doEdit)
  #if("$!request.field" != '')
    #displayNewField()
  #elseif("$!request.preview" == 'true')
    #previewField()
  #else
    ## Make sure that only the sheet content is rendered when the class is saved using AJAX.
    (% class="hidden" %)
    {{html}}&lt;input type="hidden" name="xpage" value="plain" /&gt;{{/html}}

    #displayEditForm()
  #end
#end

#**
 * Updates and saves the class definition based on the submitted data.
 *#
#macro(updateAndSaveClass)
  #set($class = $doc.xWikiClass)
  #set($xclass = $class.getXWikiClass().clone())
  #set($xdoc = $doc.document)
  ##
  ## Handle new fields and field type changes.
  ##
  #set($fieldNames = [])
  #foreach($paramName in $request.getParameterMap().keySet())
    #if($paramName.startsWith('type-'))
      #set($fieldName = $paramName.substring(5))
      #set($fieldType = $request.getParameter($paramName))
      #set($field = $class.get($fieldName))
      #if(!$field || $field.classType != $fieldType)
        #if($field)
          ## The field type has changed. Remove the field and add a new one with the proper type.
          #set($discard = $xclass.removeField($fieldName))
        #end
        ## Add a new class field with the specified type.
        #set($fieldTemplateRef = $request.getParameter("template-$fieldName"))
        #if("$!fieldTemplateRef" != '')
          #set($fieldTemplateDoc = $xwiki.getDocument($fieldTemplateRef))
          #set($field = $fieldTemplateDoc.getxWikiClass().getXWikiClass().properties.get(0).clone())
          #set($discard = $field.setObject($xclass))
          #set($discard = $xclass.addField($fieldName, $field))
          #set($discard = $fieldNames.add($fieldName))
          #set($discard = $xdoc.setMetaDataDirty(true))
        #end
      #else
        #set($discard = $fieldNames.add($fieldName))
      #end
    #end
  #end
  ##
  ## Handle deleted fields.
  ##
  #foreach($field in $class.properties)
    #if(!$fieldNames.contains($field.name))
      #set($discard = $xclass.removeField($field.name))
    #end
  #end
  ##
  ## Handle field updates.
  ##
  #set($fieldsToRename = {})
  #foreach($fieldName in $xclass.propertyNames)
    #set($field = $xclass.get($fieldName))
    #set($valuesFromRequest = $xcontext.context.getForm().getObject("field-$fieldName"))
    #set($discard = $field.getxWikiClass().fromMap($valuesFromRequest, $field))
    #if($field.name.matches('^[a-zA-Z_][\w:\-\.]*$'))
      #if($fieldName != $field.name)
        ## The field name has changed.
        #if($xclass.get($field.name))
          ## There is already a field with the same name.
          #set($errorMessage = $services.localization.render('platform.appwithinminutes.classEditorDuplicateFieldNameError', $field.name))
          #break
        #else
          #set($discard = $xclass.removeField($fieldName))
          #set($discard = $xclass.addField($field.name, $field))
          #set($originalField = $class.get($fieldName))
          #if($originalField)
            ## This is not a new field.
            #set($discard = $fieldsToRename.put($fieldName, $field.name))
            #set($discard = $xclass.addPropertyForRemoval($originalField.propertyClass))
          #end
        #end
      #end
    #else
      #set($errorMessage = $services.localization.render('propertynamenotcorrect'))
      #break
    #end
  #end
  ##
  ## Save
  ##
  #if(!$errorMessage)
    #set($discard = $xdoc.setXClass($xclass))
    #set($discard = $xdoc.renameProperties($doc.documentReference, $fieldsToRename))
    #set($discard = $xdoc.setHidden(true))
    #set($discard = $xdoc.setMetaDataDirty(true))
    #set($discard = $doc.save($services.localization.render('core.comment.updateClassProperty'), $minorEdit))
  #end
  ##
  ## Handle field renames.
  ##
  #if(!$errorMessage &amp;&amp; !$fieldsToRename.isEmpty())
    ## We need to load all documents that have objects of this class and rename their properties.
    #set($instancesStatement = "from doc.object($doc.fullName) as obj where doc.fullName &lt;&gt; :className")
    #set($instancesQuery = $services.query.xwql($instancesStatement).bindValue('className', $doc.fullName))
    #foreach($instanceDocName in $instancesQuery.execute())
      #set($instanceDoc = $xwiki.getDocument($instanceDocName))
      #set($discard = $instanceDoc.document.renameProperties($doc.documentReference, $fieldsToRename))
      #set($discard = $instanceDoc.save($services.localization.render('core.comment.updateClassPropertyName'), true))
    #end
  #end
  ##
  ## Clear cache.
  ##
  #if(!$errorMessage)
    #set($discard = $xwiki.getXWiki().flushCache($xcontext.context))
  #end
#end

#**
 * Updates and saves the class template based on the submitted data.
 *#
#macro(updateAndSaveTemplate)
  #if(!$errorMessage &amp;&amp; $request.updateClassTemplate)
    #set($className = $stringtool.removeEnd($doc.name, 'Class'))
    #set($templateRef = $services.model.createDocumentReference($doc.wiki, $doc.space, "${className}Template"))
    #set($templateDoc = $xwiki.getDocument($templateRef))
    #set($discard = $templateDoc.setParent($doc.name))
    #if ($request.templateTitle)
      #set($discard = $templateDoc.setTitle($request.templateTitle))
    #end
    #if ($request.templateContent)
      #set($discard = $templateDoc.setContent($request.templateContent))
    #end
    #set($discard = $templateDoc.updateObjectFromRequest($doc.fullName))
    #set($discard = $templateDoc.setHidden(true))
    #set($discard = $templateDoc.save($services.localization.render('platform.appwithinminutes.classEditorTemplateSaveComment'), $minorEdit))
  #end
#end

#**
 * Updates and saves the class sheet based on the submitted data.
 *#
#macro(updateAndSaveSheet)
  #if(!$errorMessage &amp;&amp; $request.updateClassSheet)
    #set($classSheets = $services.sheet.getClassSheets($doc))
    #if($classSheets.isEmpty())
      #set($className = $stringtool.removeEnd($doc.name, 'Class'))
      #set($sheetReference = $services.model.createDocumentReference($doc.wiki, $doc.space, "${className}Sheet"))
      #set($discard = $services.sheet.bindClassSheet($doc, $sheetReference))
      #set($discard = $doc.save($services.localization.render('platform.appwithinminutes.classEditorBindSheetSaveComment'), $minorEdit))
    #elseif($classSheets.size() == 1)
      #set($sheetReference = $classSheets.get(0))
    #end
    #if($sheetReference)
      #set($sheetDoc = $xwiki.getDocument($sheetReference))
      #set($sheetGeneratorDoc = $xwiki.getDocument('AppWithinMinutes.ClassSheetGenerator'))
      #set($discard = $sheetDoc.setParent($doc.name))
      #set($discard = $sheetDoc.setContent($doc.getRenderedContent($sheetGeneratorDoc.content, $sheetGeneratorDoc.syntax.toIdString(), 'plain/1.0')))
      #set($discard = $sheetDoc.setHidden(true))
      #set($discard = $sheetDoc.save($services.localization.render('platform.appwithinminutes.classEditorSheetSaveComment'), $minorEdit))
    #end
  #end
#end

#**
 * Updates and saves the class translation bundle based on the submitted data.
 *#
#macro(updateAndSaveTranslations)
  #if(!$errorMessage &amp;&amp; $request.updateClassTranslations)
    #set($className = $stringtool.removeEnd($doc.name, 'Class'))
    #set($translationsRef = $services.model.createDocumentReference($doc.wiki, $doc.space, "${className}Translations"))
    #set($translationsDoc = $xwiki.getDocument($translationsRef))
    #set($translationsObj = $translationsDoc.getObject('XWiki.TranslationDocumentClass', true))
    ## We use the translation bundle on demand because none of the available scopes suits our needs. Simple users can't
    ## register document translation bundles at WIKI level and the SPACE scope doesn't remove the need to create a
    ## custom live table results page in the same space as the application.
    #set($discard = $translationsObj.set('scope', 'ON_DEMAND'))
    #set($discard = $translationsDoc.setParent($doc.name))
    #set($translationsGeneratorDoc = $xwiki.getDocument('AppWithinMinutes.ClassTranslationsGenerator'))
    #set($discard = $translationsDoc.setContent($doc.getRenderedContent($translationsGeneratorDoc.content, $translationsGeneratorDoc.syntax.toIdString(), 'plain/1.0')))
    #set($discard = $translationsDoc.setHidden(true))
    #set($discard = $translationsDoc.save($services.localization.render('platform.appwithinminutes.classEditorTranslationsSaveComment'), $minorEdit))
  #end
#end

#**
 * Updates and saves the class definition, the class sheet and the class template.
 *#
#macro(doSave)
  #set($minorEdit = "$!request.minorEdit" != '')
  #updateAndSaveClass()
  #updateAndSaveTemplate()
  #updateAndSaveSheet()
  #updateAndSaveTranslations()
  #if($action == 'save')
    #if($errorMessage)
      {{error}}{{html}}$errorMessage{{/html}}{{/error}}
    #elseif("$!request.wizard" == 'true')
      ## Redirect to next wizard step.
      #set($className = $stringtool.removeEnd($doc.name, 'Class'))
      #set($homePageRef = $services.model.createDocumentReference($doc.wiki, $className, 'WebHome'))
      #set($queryString = 'wizard=true')
      #if(!$xwiki.exists($homePageRef))
        #set($homePageTitle = '$services.localization.render(''platform.appwithinminutes.appHomePageTitle'', [$doc.space])')
        #set($queryString = "$queryString&amp;editor=inline&amp;template=AppWithinMinutes.LiveTableTemplate&amp;AppWithinMinutes.LiveTableClass_0_class=$escapetool.url($doc.fullName)&amp;title=$escapetool.url($homePageTitle)&amp;parent=AppWithinMinutes.WebHome")
      #end
      $response.sendRedirect($xwiki.getURL($homePageRef, 'edit', $queryString));
    #else
      ## Redirect to view mode.
      $response.sendRedirect($doc.getURL())
    #end
  #else
    #if($errorMessage)
      $response.sendError(400, $errorMessage)
    #else
      $response.setStatus(204)
    #end
  #end
#end
{{/velocity}}

{{velocity}}
#if("$!request.wizard" == 'true')
  {{include reference="AppWithinMinutes.WizardStep" /}}
#end
{{/velocity}}

{{velocity}}
## Determine the action button that triggered the request
#set($action = 'edit')
#foreach($paramName in $request.getParameterMap().keySet())
  #if($paramName.startsWith('xaction_'))
    #set($action = $paramName.substring(8))
    #break
  #end
#end
#if($action == 'edit')
  #doEdit()
#elseif($action == 'save' || $action == 'saveandcontinue')
  #if($services.csrf.isTokenValid($request.form_token))
    #doSave()
  #else
    $response.sendRedirect($services.csrf.getResubmissionURL());
  #end
#end
{{/velocity}}</content>
</xwikidoc>
