#template('colorThemeInit.vm')
/*
  The skin sets some styles on #body so we need a more specific selector in order to overwrite them. Moreover, Chrome
  seems to ignore the !important when computing the current style of the edited element, which leads to the wrong style
  being copied to new elements (see XWIKI-10276).
*/
html, body#body[contenteditable=true] {
  background-color: $theme.pageContentBackgroundColor !important;
  background-image: none !important;
  color: $theme.textColor !important;
  height: auto !important;
  /* Selenium fails to type into the empty body if it's not visible. Set the minimum height as the line height. */
  min-height: 1.4em !important;
  min-width: 0 !important;
  overflow: visible !important;
  padding: 0 !important;
  width: auto !important;
}

body {
  /* The BODY line height must match the paragraph line height. See XWIKI-3763. */
  line-height: 1.4em !important;
  /* The BODY margin must match the paragraph margin. See XWiki-4343. */
  margin: 0.5em 0 !important;
}

/*
  Overwrite no matter what list-style-position to outside position to avoid the Firefox issues with editing lists
  with inside list style.
*/
ul, ol {
  list-style-position: outside !important;
}

/*
  Headings with overflow:hidden are painful to edit in IE because they are treated as fixed size boxes (resize
  handlers are present).
*/
h1, h2, h3, h4, h5, h6 {
  overflow: visible !important;
}

/* Fix for XWIKI-3752 by overriding path/to/firefox/res/contenteditable.css rules */
a:-moz-read-write {
  color: $theme.linkColor !important;
  text-decoration: none !important;
}
a:hover:-moz-read-write {
  text-decoration: underline !important;
}

/* Delimit table cells withouth interfering with the skin's styling */
td, th {
  box-shadow: 0 0 1px rgba(0, 0, 0, 0.15);
}

.readOnly {
  /* Use a hidden border so that the read-only container is not resized when hovered. */
  border: 1px dotted transparent;
}

.readOnly:hover {
  /* Show the boundaries of a read-only region when hovering. */
  border: 1px dotted #CCC;
}

.macro {
}

.macro-selected {
  background-color: AliceBlue;
  border: 1px dotted #CCC;
}

.macro-collapsed {
  border: 1px dotted #CCC;
  padding: 2px;
}

.macro-block.macro-collapsed {
  /* Separate two consecutive collapsed block macros. */
  margin-top: 1px;
}

.macro-collapsed .macro-placeholder {
  /* Show the macro content place-holder only when the macro is collapsed. */
  display: inline !important;
}

.macro-collapsed .macro-output {
  /* Hide the macro output when the macro is collapsed. */
  display: none !important;
}

.macro .macro-placeholder .macro-icon {
  background-image: url(../images/macro.gif);
  background-repeat: no-repeat;
  display: inline-block;
  height: 16px;
  padding-right: 2px;
  vertical-align: middle;
  width: 16px;
}

.main .macro .macro-placeholder {
  color: gray;
  /* Hide the macro content place-holder by default. Display it only when the macro is collapsed. */
  display: none;
  font-family: monospace;
  /* Keep the macro icon and the macro name on the same line. */
  white-space: nowrap;
}

/* Make sure that a double click inside the macro selects only inner text, otherwise the user can't edit the macro. */
.macro-inline > .selectionBoundary {
  /* We want to hide the selection boundary but we can't use display:none so we rely on width:0. */
  display: inline-block;
  width: 0;
}

.xEmbeddedObject {
  background-image: url(../images/embed.gif);
  background-position: center center;
  background-repeat: no-repeat;
  border: 1px solid #CCC;
  height: 20px;
  width: 40px;
}
