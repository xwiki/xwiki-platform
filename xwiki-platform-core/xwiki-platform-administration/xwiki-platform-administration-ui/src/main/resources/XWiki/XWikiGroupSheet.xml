<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>XWiki</web>
  <name>XWikiGroupSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.XWikiGroups</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1364502206000</creationDate>
  <date>1364565696000</date>
  <contentUpdateDate>1364565664000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set($groupDoc = $doc)
#if($doc.fullName == 'Main.UserDirectory')
  #set($groupDoc = $xwiki.getDocument('XWiki.XWikiAllGroup'))
#end
#macro(hasGroupRight $right $hasGroupRight)
  #set($result = $xwiki.hasAccessLevel($right, $xcontext.user, $doc.fullName) &amp;&amp; $doc.getObject('XWiki.XWikiGroups', false))
  #set($hasGroupRight = $NULL)
  #setVariable("$hasGroupRight" $result)
#end
#hasGroupRight('edit' $hasEditGroupRight)
{{/velocity}}

{{velocity}}
## Keep testing the inline action for backward compatibility with existing groups.
#if(($xcontext.action == 'edit' || $xcontext.action == 'inline') &amp;&amp; $hasEditGroupRight)
  {{html}}
  #if ($request.xpage == 'plain')
    ## AJAX request.
    #set ($wrapperTag = 'form')
    &lt;form class="xform" action="$doc.getURL('preview')"&gt;
      &lt;input type="hidden" name="form_token" value="$!services.csrf.getToken()" /&gt;
  #else
    #userPicker_import()
    #set ($discard = $xwiki.jsx.use('XWiki.XWikiGroupSheet'))
    ## The form is generated in the edit template.
    &lt;div class="xform"&gt;
    #set ($wrapperTag = 'div')
  #end
    &lt;dl&gt;
      &lt;dt&gt;&lt;label for="userInput"&gt;$services.localization.render('xe.admin.groups.addUser')&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;input id="userInput" type="text" name="name" class="suggestUsers#if (!$xcontext.isMainWiki()) withScope#end multipleSelection" /&gt;
      &lt;/dd&gt;
      &lt;dt&gt;&lt;label for="groupInput"&gt;$services.localization.render('xe.admin.groups.addGroup')&lt;/label&gt;&lt;/dt&gt;
      &lt;dd&gt;
        &lt;input id="groupInput" type="text" name="name" class="suggestGroups#if (!$xcontext.isMainWiki()) withScope#end multipleSelection" /&gt;
      &lt;/dd&gt;
    &lt;/dl&gt;
    &lt;div class="buttons"&gt;
      &lt;span class="buttonwrapper"&gt;
        &lt;button type="submit" id="addMembers" name="xpage" value="adduorg"&gt;$services.localization.render('xe.admin.groups.addUser.submit')&lt;/button&gt;
      &lt;/span&gt;
    &lt;/div&gt;
  &lt;/$wrapperTag&gt;
  {{/html}}##
#end
#set($columnOptions = {
  "member" : {'link': 'auto', 'type': 'text'},
  '_avatar' : { 'type' : 'none', 'link' : 'field', 'html' : 'true', 'sortable' : false },
  "_actions" : {
    'actions': ['delete'],
    'actionCallbacks': {'delete': 'table.deleteRow(i);'},
    'ajaxActions': {'delete': true}
   }
})
## Keep testing the inline action for backward compatibility with existing groups.
#if(($xcontext.action == 'edit' || $xcontext.action == 'inline') &amp;&amp; $hasEditGroupRight)
  #set($columns = ['_avatar', 'member', '_actions'])
#else
  #set($columns = ['_avatar', 'member'])
#end
#livetable('groupusers', $columns, $columnOptions, {
  'url' : $groupDoc.getURL('view', 'xpage=getgroupmembers'),
  'translationPrefix' : 'xe.admin.groups.',
  'javascriptName' : 'editgrouptable'
})
{{/velocity}}</content>
  <object>
    <name>XWiki.XWikiGroupSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6e43f145-6962-4b17-a268-f85890a2c00c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function() {
  var addMembers = function(event) {
    event &amp;&amp; event.stop();
    var form = event.element().form;
    if (form.select('ul.accepted-suggestions li').length == 0 &amp;&amp; $('userInput').value.strip() == ''
      &amp;&amp; $('groupInput').value.strip() == '') {
      // Nothing to add.
      return;
    }
    new Ajax.Request(form.action, {
      parameters: form.serialize(),
      onSuccess: function() {
        // Clear the list of selected users and groups.
        XWiki.widgets.UserPicker.instances.groupInput.clear();
        XWiki.widgets.UserPicker.instances.userInput.clear();
        // Reload the live table.
        var end = editgrouptable.limit;
        var start = Math.max(editgrouptable.lastOffset, 1);
        editgrouptable.clearCache();
        editgrouptable.getRows(start, end, start, end);
        // Show notification message.
        new XWiki.widgets.Notification("$services.localization.render('xe.admin.groups.addSuccess')", 'done', {timeout: 5});
      },
      onFailure: function(response) {
        new XWiki.widgets.Notification("$services.localization.render('xe.admin.groups.addFailure')" + response.statusText, 'error', {timeout: 5});
      }
    });
  }
  var init = function() {
    var addMembersButton = $('addMembers');
    if (addMembersButton &amp;&amp; !addMembersButton.__initialized) {
      addMembersButton.observe('click', addMembers);
      addMembersButton.__initialized = true;
    }
    return true;
  };
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);
  document.observe('xwiki:dom:updated', init);
})()</code>
    </property>
    <property>
      <name>Code</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
