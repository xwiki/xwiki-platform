## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
###
### Rename attachment template
###

## Update all the 

## TODO: rename everything to use "move" instead of "rename" with is move generic.

#set ($attachment = $request.attachment)
#set ($attachment = $services.model.resolveAttachment($attachment))

#if (!$services.security.authorization.hasAccess('view', $attachment.documentReference) && "$!request.renameId" == '')
  #template("accessdenied.vm")
#elseif ($xcontext.action == 'get' && "$!request.renameId" != '')
  ## AJAX request for rename status update.
  #template("attachment/renameStatus.vm")
#else
  #template("startpage.vm")
  #if ("$!step" == '')
    #set ($step = "$!request.step")
    #if ("$!step" == '')
      #set ($step = '1')
    #end
  #end
  <div class="main layoutsubsection">
  <div id="mainContentArea">
    #if ("$!request.renameId" != '')
      ## Display the rename status
      #template("attachment/renameStatus.vm")
##    #elseif ($doc.isNew())
##      $response.setStatus(404)
##      #error($services.localization.render('attachment.rename.nonExisting'))
    #elseif ($step == 1)
      ## Display the rename form
      #template("attachment/renameStep1.vm")
    #elseif (!$services.csrf.isTokenValid($request.form_token))
      ## CSRF protection
      $response.sendRedirect("$!services.csrf.resubmissionURL")
    #else
      ## Do the rename. It's the form in attachment/renameStep1.vm page that calls this page with step=2.
      #if ("$!request.newAttachmentName.trim()" == '')
        $response.setStatus(400)
        #error($services.localization.render('attachment.rename.emptyName'))
        #template("attachment/renameStep1.vm")
      #else
        #template('attachment/refactoring_macros.vm')
##        ## Determine if the new document should be terminal.
##        #getNestedDocumentReference($request.newWikiName $request.newSpaceName $request.newPageName $NULL false
##          $newDocReference)
##        #set ($newDocReferenceAsString = $services.model.serialize($newDocReference))
        ## Allow users to overwrite existing documents if they are redirect placeholders.
        #set ($sourceWikiName = $request.sourceWikiName)
        #set ($sourceSpaceName = $request.sourceSpaceName)
        #set ($sourcePageName = $request.sourcePageName)
        #set ($sourceAttachmentName = $request.sourceAttachmentName)
        #set ($targetLocation = $request.targetLocation)
        #set ($targetAttachmentName = $request.targetAttachmentName)
        
        #if (!$services.attachment.locationAvailable($targetLocation, $targetAttachmentName)) 
          $response.setStatus(409)
          ## TODO: check localization.
          #error($services.localization.render('attachment.rename.alreadyExists', 
            [${escapetool.xml($targetLocation)}, $xwiki.getURL($targetLocation)]))
          #template("attachment/renameStep1.vm")
        #elseif (!$xwiki.hasAccessLevel('edit', $xcontext.user, $targetLocation))
          $response.setStatus(403)
          #error($services.localization.render('attachment.rename.targetNotWritable',
            [${escapetool.xml($targetLocation)}]))
          #template('attachment/renameStep1.vm')
        #else
          ## TODO: replace the manual serialization with an actual serialization.
          #set ($renameRequest = $services.attachment.createMoveRequest("$sourceWikiName:$sourcePageName.$sourcePageName", 
            $sourceAttachmentName, $targetLocation, $targetAttachmentName))
          ## We can't rename the children if the new page is terminal.
          #set ($deep = $request.deep == 'true' && !$terminal)
          #set ($discard = $renameRequest.setDeep($deep))
          #set ($updateLinks = $request.updateLinks == 'true')
          #set ($discard = $renameRequest.setUpdateLinks($updateLinks))
          #set ($autoRedirect = $request.autoRedirect == 'true')
          #set ($discard = $renameRequest.setAutoRedirect($autoRedirect))
          ## Rename operation relies on copy.
          ## TODO: check what this macro does
##          #maybeUpdateTitleAfterCopy($renameRequest $doc.documentReference 'newPageTitle')
          #if ($request.async == 'true')
            ## We may be asked a question (we assume that async also imply we want it interactive)
            #set ($discard = $renameRequest.setInteractive(true))
          #end
          #set ($renameJob = $services.refactoring.rename($renameRequest))
          #if ($request.async != 'true')
            #try()
              #set ($discard = $renameJob.join())
            #end
          #end
          $attachment.class
          $response.sendRedirect($doc.getURL($xcontext.action, $escapetool.url({
            'xpage': 'rename',
            'renameId': $renameRequest.id.get($mathtool.sub($renameRequest.id.size(), 1))
          })))
        #end
      #end
    #end
    <div class="clearfloats"></div>
  </div>## mainContentArea
  </div>## main
  #template("endpage.vm")
#end
