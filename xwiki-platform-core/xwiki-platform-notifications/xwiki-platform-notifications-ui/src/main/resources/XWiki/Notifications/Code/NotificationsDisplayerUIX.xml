<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.Notifications.Code.NotificationsDisplayerUIX" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>NotificationsDisplayerUIX</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1488272751000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1488290404000</date>
  <contentUpdateDate>1488288100000</contentUpdateDate>
  <parent>XWiki.Notifications.Code.WebHome</parent>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="false"}}
#********************************************************
    Get the number of unread notifications as JSON
********************************************************#
#if ('get' == $xcontext.action &amp;&amp; 'GET' == $request.method &amp;&amp; 'getUnreadCount' == $request.action)
  $jsontool.serialize({'unread': $services.notification.sources.getEventsCount(21)})
#********************************************************
             Mark a notification as read
********************************************************#
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'read' == $request.action)
  #set ($eventIds = $request.eventIds.split(','))
  #set ($read = "$!request.read")
  #if ($eventIds.lenght == 0 || $read.isEmpty())
    #set ($discard = $response.setStatus(400))
  #else
    #foreach ($eventId in $eventIds)
      #set ($discard = $services.notification.saveEventStatus($eventId, $read.equals('true')))
    #end
  #end
#********************************************************
           Change the start date of the user
********************************************************#
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'setStartDate' == $request.action)
  #set ($startDate = $datetool.date)
  #if ("$!request.date" != '')
    #set ($startDate = $xwiki.jodatime.getDateTime($numbertool.toNumber($request.date).longValue()).toDate())
  #end
  #set ($discard = $services.notification.preferences.setStartDate($startDate))
  #set ($discard = $services.notification.filters.setStartDate($startDate))
#********************************************************
             Watch/Unwatch a location
********************************************************#
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; ('watchLocation' == $request.action || 'unwatchLocation' == $request.action))
  #if ("$!request.type" == 'space')
    #set ($location = $services.model.resolveSpace($request.location))
  #elseif ("$!request.type" == 'wiki')
    #set ($location = $services.model.createWikiReference($request.location))
  #else
    #set ($location = $services.model.resolveDocument($request.location))
  #end
  #if ('watchLocation' == $request.action)
    #set ($discard = $services.notification.watch.watchLocation($location))
  #else
    #set ($discard = $services.notification.watch.unwatchLocation($location))
  #end
  ## Display the new states
  #if ("$!request.currentDoc" != '')
    #set ($currentDoc = $services.model.resolveDocument($request.currentDoc))
    #set ($states = {
      'document': $services.notification.watch.isLocationWatched($currentDoc),
      'space': $services.notification.watch.isLocationWatched($currentDoc.lastSpaceReference),
      'wiki': $services.notification.watch.isLocationWatched($currentDoc.wikiReference)
    })
    #set ($discard = $response.setContentType('application/json'))
    $jsontool.serialize($states)
  #end
#end
{{/velocity}}
</content>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>2f3e29b0-440a-4cc8-9a4c-b98f0a647f55</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'XWikiNotificationsMacro', 'xwiki-meta'], function ($, XWikiNotificationsMacro, xm) {
  'use strict';

  /**
   * The notification batch' size
   */
  var notificationsLimit = 10;

  /**
   * Maximum number of events to count
   */
  var maxCountNumber = 20;

  /**
   * The current number of unread notifications
   */
  var notificationCount = 0;

  /**
   * URL to the service that return the notifications to display
   */
  var url = new XWiki.Document(XWiki.Model.resolve('XWiki.Notifications.Code.NotificationsDisplayerUIX',
    XWiki.EntityType.DOCUMENT)).getURL('get', 'outputSyntax=plain');

  /**
   * Will contain the Notifications Macro object.
   */
  var macro = 0;

  /**
   * Update notification counter
   */
  var updateNotificationCount = function (count) {
    // Get the counter
    var counter = $('.notifications-count');
    // Update the global variable
    notificationCount = count;
    // Remove the counter if there is no unread notifications
    if (count == 0) {
      counter.remove();
      return;
    }
    // Create the counter if it is not present
    if (counter.length == 0) {
      counter = $('&lt;span&gt;').addClass('notifications-count badge');
      $('#tmNotifications &gt; a.icon-navbar').after(counter);
    }
    // Update the counter
    counter.text(count);
    if (count &gt; maxCountNumber) {
      counter.text(maxCountNumber + '+');
    };
  };

  /**
   * Add a button to clear all the notifications (which actually only change the start date of the user).
   */
  var createCleanButton = function (startDate) {
    var notificationsHeader = $('.notifications-header-uix');
    // If the clean button is already here, don't do anything
    if (notificationsHeader.find('a.notification-event-clean').length &gt; 0) {
      return;
    }
    var markAllReadButton = $('&lt;a href="#"&gt;')
      .addClass('notification-event-clean')
      .html('$services.icon.renderHTML("trash")&amp;nbsp;$escapetool.xml($escapetool.javascript($services.localization.render('notifications.menu.clear')))')
      .click(function (event) {
        // Avoid the menu closing
        event.stopPropagation();
        // Ask confirmation
        new XWiki.widgets.ConfirmationBox({
          onYes: function(event) {
            // Avoid the menu closing
            event.stopPropagation();
            // Display a saving message
            var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.menu.clearing'))", 'inprogress');
            // Send the request to change the start date
            $.post(url, {
              action: 'setStartDate',
              date: startDate
            }).success(function (){
              // Display the success message
              notification.hide();
              new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.menu.cleared'))", 'done');
              // Remove the notifications from the UI and display the "nothing!" message instead.
              $('.notifications-area').html($('&lt;p&gt;').addClass('text-center noitems').text("$escapetool.javascript($services.localization.render('notifications.menu.nothing'))"));
              // Update the notifications counter
              updateNotificationCount(0);
            });
          },
          onNo: function(event) {
            // Avoid the menu closing
            event.stopPropagation();
          }
        });
      });
    // Append the button just before the "settings" link in the menu
    $('.notifications-header-uix').append(markAllReadButton);
  };

  /**
   * Get the number of unread notifications.
   */
  var getUnreadNotificationsCount = function () {
    $.getJSON(url, {action: 'getUnreadCount'}).done(function (data) {
      updateNotificationCount(data.unread);
      // Display the "nothing!" message if there is no notification
      if (data.unread == 0) {
         macro.displayNoNotification();
      }
    });
  };

  /**
   * Initialize the widget.
   */
  $(document).ready(function () {

    var container = $('.notifications-area');
    macro = new XWikiNotificationsMacro(container, XWiki.Model.serialize(xm.userReference), notificationsLimit, true, [], true);
    getUnreadNotificationsCount();
    container.on('eventMarkedAsRead', function (notif) {
      updateNotificationCount(notificationCount - 1);
    });

    /**
     * Prevent the dropdown menu for being closed when the user clicks on the notifications menu.
     */
    $('#tmNotifications .dropdown-menu').click(function(event) {
      event.stopPropagation();
    });

    /**
     * Load the notifications content when the user open the notification menu (lazy loading to have better scalability).
     */
    var notificationsMenusHasBeenOpened = false;
    $('#tmNotifications').on('show.bs.dropdown', function () {
      if (!notificationsMenusHasBeenOpened &amp;&amp; notificationCount &gt; 0) {
        macro.load(0).done(function (notifications) {
          createCleanButton(notifications[0].date);
        });
      }
      notificationsMenusHasBeenOpened = true;
    });
  });

});
</code>
    </property>
    <property>
      <name>Notifications Displayer</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>82a6ca49-41a5-4f5e-ac75-2a931740b7ec</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#if ($services.notification.watch.isEnabled())
## We handle the ability to disable the minification, by choosing the file extension to add to the script paths.
#set ($jsExtension = '.min.js')
#if (!$services.debug.minify)
  #set ($jsExtension = '.js')
#end
require.config({
  paths: {
    'bootstrap-switch': '$services.webjars.url('bootstrap-switch', "js/bootstrap-switch${jsExtension}")'
  },
  shim: {
    'bootstrap-switch' : ['jquery']
  }
});
require(['jquery', 'xwiki-meta', 'bootstrap', 'bootstrap-switch'], function ($, xm) {
  'use strict';
  // Most of the code comes from the deprecated Watchlist Application
  $(document).ready(function() {

    ///
    /// Get the notification inputs for future usage
    ///
    var watchWikiSwitch  = $('#notificationWiki');
    var watchSpaceSwitch = $('#notificationPageAndChildren');
    var watchPageSwitch  = $('#notificationPageOnly');
    var allWatchSwitches = $([watchWikiSwitch, watchSpaceSwitch, watchPageSwitch]);

    ///
    /// Set the icon corresponding to each switch
    ///
    watchPageSwitch.bootstrapSwitch('labelText', '$escapetool.javascript($services.icon.renderHTML('page'))');
    watchSpaceSwitch.bootstrapSwitch('labelText', '$escapetool.javascript($services.icon.renderHTML('chart-organisation'))');
    watchWikiSwitch.bootstrapSwitch('labelText', '$escapetool.javascript($services.icon.renderHTML('wiki'))');

    ///
    /// Disabled switches if there is no enabled notification preferences
    ///
    if ($('.notifications-toggles').attr('data-enabled') == 'false') {
      allWatchSwitches.bootstrapSwitch('disabled', true);

      $('.notifications-toggles').tooltip({
        title: '$escapetool.javascript($services.localization.render('notifications.toggle.disabled.hint'))',
        placement: 'bottom'
      });
    } else {
      ///
      /// Add a tooltip to each switch
      ///
      $('.bootstrap-switch-id-notificationPageOnly').tooltip({
        title: '$escapetool.javascript($services.localization.render('watchlist.notifications.icons.tooltip.page'))',
        placement: 'bottom'
      });
      var watchSpaceToolTip = '$escapetool.javascript($services.localization.render('watchlist.notifications.icons.tooltip.pageAndChildren'))';
      if (xm.documentReference.getName() != 'WebHome') {
        // Adapt the tooltip when the current document is terminal
        watchSpaceToolTip = '$escapetool.javascript($services.localization.render('watchlist.notifications.icons.tooltip.space'))';
      }
      $('.bootstrap-switch-id-notificationPageAndChildren').tooltip({
        title: watchSpaceToolTip,
        placement: 'bottom'
      });
      $('.bootstrap-switch-id-notificationWiki').tooltip({
        title: '$escapetool.javascript($services.localization.render('watchlist.notifications.icons.tooltip.wiki'))',
        placement: 'bottom'
      });
    }
    
    allWatchSwitches.bootstrapSwitch('size', 'small');

    /**
     * Change the watchlist status of a document/space/wiki.
     */
    var changeWatchListStatus = function (action, location, type) {
      // Disable the toggles so that the user cannot click on them during the request
      allWatchSwitches.bootstrapSwitch('disabled', true);
      /**
       * URL to the service that return the notifications to display
       */
      var url = new XWiki.Document(XWiki.Model.resolve('XWiki.Notifications.Code.NotificationsDisplayerUIX', XWiki.EntityType.DOCUMENT)).getURL('get', 'outputSyntax=plain');
      $.post(url, {
        'action': action,
        'location': location,
        'type': type,
        'currentDoc': XWiki.Model.serialize(xm.documentReference)
      }).done(function (data) {
        // Unfortunately, bootstrap switch does not allow to change the state if it is disabled
        allWatchSwitches.bootstrapSwitch('disabled', false);
        // Update states
        watchPageSwitch.bootstrapSwitch('state', data.document, true);
        watchSpaceSwitch.bootstrapSwitch('state', data.space, true);
        watchWikiSwitch.bootstrapSwitch('state', data.wiki, true);
      }).fail (function() {
        new XWiki.widgets.Notification('$escapetool.javascript($services.localization.render('watchlist.notifications.changeStatusError'))', 'error');
        allWatchSwitches.bootstrapSwitch('disabled', false);
      });
    };

    ///
    /// Change the watchlist status when the switched are manipulated by the user
    ///
    watchPageSwitch.bootstrapSwitch('onSwitchChange', function (event, status) {
      changeWatchListStatus(status ? 'watchLocation' : 'unwatchLocation', XWiki.Model.serialize(xm.documentReference), 'document');
    });
    watchSpaceSwitch.bootstrapSwitch('onSwitchChange', function (event, status) {
      changeWatchListStatus(status ? 'watchLocation' : 'unwatchLocation', XWiki.Model.serialize(xm.documentReference.extractReference(XWiki.EntityType.SPACE)), 'space');
    });
    watchWikiSwitch.bootstrapSwitch('onSwitchChange', function (event, status) {
      changeWatchListStatus(status ? 'watchLocation' : 'unwatchLocation', XWiki.Model.serialize(xm.documentReference.extractReference(XWiki.EntityType.WIKI)), 'wiki');
    });

    ///
    /// Avoid the dropdown menu to be closed when the user click on the bootstrap switch
    ///
    $('.notifications-toggles .bootstrap-switch').click(function(event) {
      event.stopImmediatePropagation();
    });
 });
});
#end</code>
    </property>
    <property>
      <name>Notifications Toggle</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c93bccb-231c-40ff-a50a-c1706e724afe</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
/***********************************************
 * Notifications Header
 ***********************************************/
.notifications-count {
  background-color: red;
  opacity: 0.9;
  position: absolute;
  margin-left: 1.6em;
  top: 0;
}

@media (min-width: 768px) {
  .notifications-count {
    top: 3px;
  }
}

.notifications-header-uix {
  text-align: right;
  padding-bottom: 0.8em;
}

.notifications-header-link {
  white-space: nowrap;
}

/***********************************************
 * Notification Toggles
 ***********************************************/
.notifications-toggles {
  text-align: center;
  max-width: 320px;
}

.notifications-toggles .bootstrap-switch {
  margin: 0 3px 0 3px;
}

.notifications-toggles .bootstrap-switch .bootstrap-switch-label {
  background-image: linear-gradient($theme.buttonSecondaryGradientColor, $theme.buttonSecondaryBackgroundColor 50%);
  color: $theme.buttonSecondaryTextColor;
}

/***********************************************
 * Notification Area
 ***********************************************/
.notifications-area {
  margin-top: 10px;
  max-height: 600px;
  min-height: 20px;
  overflow-x: hidden;
  overflow-y: scroll;
  /* 320px is the width of the smallest smartphones right now, so we don't use a larger width */
  width: 320px;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>7e3afaf5-5bb9-411e-b48e-bd9c6229dbc9</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}{{html clean="false"}} ## we need clean="false" because we want to display the raw content
#if ("$!xcontext.userReference" != '' &amp;&amp; $services.notification.isEnabled())
  &lt;li&gt;
    #set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.NotificationsMacro'))
    #set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.NotificationsDisplayerUIX'))
    #set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.NotificationsMacro'))
    #set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.NotificationsDisplayerUIX'))
    ## TODO: replace by $xwiki.sswx.use() or something like this when XWIKI-12788 is closed.
    #set ($discard = $xwiki.linkx.use($services.webjars.url('bootstrap-switch', 'css/bootstrap3/bootstrap-switch.min.css'), {'type': 'text/css', 'rel': 'stylesheet'}))
    &lt;div class="notifications-header"&gt;
      &lt;div class="clearfix"&gt;
        &lt;div class="col-xs-4"&gt;
          &lt;p&gt;&lt;strong&gt;$escapetool.xml($services.localization.render('notifications.menu.header'))&lt;/strong&gt;&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="col-xs-8 text-right"&gt;
          &lt;p&gt;
            &lt;span class="notifications-header-link"&gt;
              &lt;a target="_blank" href="$xwiki.getURL('XWiki.Notifications.Code.NotificationRSSService', 'get', 'outputSyntax=plain')" class="notifications-header-link"&gt;
                $services.icon.renderHTML('rss')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.rss.feedLink'))
              &lt;/a&gt;
            &lt;/span&gt;
            &lt;span class="notifications-header-link"&gt;
              &lt;a href="$xwiki.getURL($xcontext.userReference, 'view', 'category=notifications')" class="notifications-settings"&gt;
                $services.icon.renderHTML('cog')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.menu.header.settings'))
              &lt;/a&gt;
            &lt;/span&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      ##
      ## Display the 3 toggle buttons
      ##
      #if ($services.notification.watch.isEnabled())
        &lt;div class="notifications-toggles clearfix" data-enabled="$services.notification.preferences.hasAnyEnabledNotificationPreferences()"&gt;
          #macro(displayCheckedIfWatched $scope)#if($services.notification.watch.isLocationWatched($scope))checked="checked"#end#end
          &lt;pre&gt;&lt;input type="checkbox" id="notificationPageOnly" #displayCheckedIfWatched($doc.documentReference)/&gt; &lt;input type="checkbox" id="notificationPageAndChildren" #displayCheckedIfWatched($doc.documentReference.lastSpaceReference)/&gt; &lt;input type="checkbox" id="notificationWiki" #displayCheckedIfWatched($doc.documentReference.wikiReference)/&gt;&lt;/pre&gt;
        &lt;/div&gt;
      #end
      &lt;div class="notifications-header-uix col-xs-12"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="notifications-area loading clearfix"&gt;
    &lt;/div&gt;
  &lt;/li&gt;
#end
{{/html}}{{/velocity}}
</content>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.notifications</extensionPointId>
    </property>
    <property>
      <name>xwiki-platform-notifications-ui</name>
    </property>
    <property>
      <parameters>order=20000
separator=true</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
