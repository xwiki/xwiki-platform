/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.extension.security.notifications.internal;

import javax.inject.Inject;
import javax.inject.Named;

import org.junit.jupiter.api.Test;
import org.xwiki.eventstream.Event;
import org.xwiki.eventstream.RecordableEventConverter;
import org.xwiki.eventstream.RecordableEventDescriptor;
import org.xwiki.extension.security.notifications.NewExtensionSecurityVulnerabilityTargetableEvent;
import org.xwiki.extension.security.notifications.NewExtensionSecurityVulnerabilityTargetableEventDescriptor;
import org.xwiki.test.junit5.mockito.ComponentTest;
import org.xwiki.test.junit5.mockito.InjectMockComponents;

import static org.junit.jupiter.api.Assertions.assertSame;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * Test of {@link NewExtensionSecurityVulnerabilityRecordableEventConverter}.
 *
 * @version $Id$
 * @since 15.5
 */
@ComponentTest
class NewExtensionSecurityVulnerabilityRecordableEventConverterTest
{
    @InjectMockComponents
    private NewExtensionSecurityVulnerabilityRecordableEventConverter converter;

    @Inject
    private RecordableEventConverter defaultRecordableEventConverter;

    @Inject
    @Named(NewExtensionSecurityVulnerabilityTargetableEventDescriptor.TYPE)
    private RecordableEventDescriptor recordableEventDescriptor;

    @Test
    void convert() throws Exception
    {
        NewExtensionSecurityVulnerabilityTargetableEvent targetableEvent =
            mock(NewExtensionSecurityVulnerabilityTargetableEvent.class);
        String source = "source";
        String data = "15";
        Event event = mock(Event.class);
        String title = "title";
        when(this.recordableEventDescriptor.getApplicationName()).thenReturn(title);
        when(this.defaultRecordableEventConverter.convert(targetableEvent, source, data)).thenReturn(event);
        Event converted = this.converter.convert(targetableEvent, source, data);
        assertSame(event, converted);
        verify(event).setTitle(title);
    }
}
