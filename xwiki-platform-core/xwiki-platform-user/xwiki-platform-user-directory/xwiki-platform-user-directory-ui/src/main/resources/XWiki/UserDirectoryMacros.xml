<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.UserDirectoryMacros" locale="">
  <web>XWiki</web>
  <name>UserDirectoryMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.UserDirectory</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>User Directory Macros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output='false'}}
## Users class
#set ($xwikiUsersClassReference = $services.model.createDocumentReference($xcontext.database, 'XWiki', 'XWikiUsers'))
#set ($xwikiUsersClass = $xwiki.getDocument($xwikiUsersClassReference).xWikiClass)
## Configuration class
#set ($directoryPreferencesClassReference = $services.model.createDocumentReference($xcontext.database, 'XWiki', 'UserDirectoryPreferencesClass'))
#set ($directoryPreferencesClassName = $services.model.serialize($directoryPreferencesClassReference))
## Default Configuration
#set ($defaultConfigurationDocReference = $services.model.createDocumentReference($xcontext.database, 'XWiki', 'UserDirectoryConfiguration'))
#set ($defaultConfigurationDoc = $xwiki.getDocument($defaultConfigurationDocReference))
#set ($defaultConfiguration = $defaultConfigurationDoc.getObject($directoryPreferencesClassName))

## We use an ordered set to collect the live table columns because we want to avoid duplicates (they break the live
## table filtering query) and at the same time we want to preserve the column order.
#set ($columns = $collectiontool.orderedSet)
## Add the fixed columns that we want the user directory to always show.
#set ($discard = $columns.addAll(['_avatar', 'doc.name']))

## Default configuration
## The columns that the user directory will default to when no user preferences exist or when the user resets to default.
## These defaults can be configured by the wiki's admins.
#set ($isGlobalUserDirectory = $doc.fullName != 'Main.UserDirectory')
#if ($isGlobalUserDirectory)
  ## Fallback defaults.
  #set ($defaultColumnsString = 'first_name last_name')
#else
  ## Admin configured defaults.
  #set ($defaultColumnsString = "$!defaultConfiguration.getValue('columns').trim()")
#end
#set ($defaultColumns = $defaultColumnsString.split('\s+'))

## Current Configuration
#if ($isGlobalUserDirectory || $isGuest || $isSuperAdmin)
  ## Use the default configuration when editing the default configuration itself or
  ## when the current user doesn't have a profile document, so no preferences.
  #set ($configurationDoc = $defaultConfigurationDoc)
#else
  ## Use the current user's configuration
  #set ($configurationDoc = $xwiki.getDocument($xcontext.userReference))
#end
## Get or create the current configuration object, taking into account the values from the request (which is needed for
## the live preview).
#set ($configuration = $configurationDoc.updateObjectFromRequest($directoryPreferencesClassName))

## Read the configuration and initialize with defaults if necessary.
#set ($columnsString = $configuration.getValue('columns').trim())
#if ($columnsString == $NULL)
  #set ($columnsString = $defaultColumnsString)
  #set ($discard = $configuration.set('columns', $columnsString))
#end

## Check if they are the default preferences.
#set ($isCustomized = false)
#if ($columnsString != $defaultColumnsString)
  ## Mark it as a customized user directory.
  #set ($isCustomized = true)
#end

## Build the list of columns to display.
#foreach ($column in $columnsString.split('\s+'))
  ## Skip invalid columns.
  #if ($column.trim() != '' &amp;&amp; $xwikiUsersClass.get($column))
    #set ($discard = $columns.add($column))
  #end
#end

##
## Build and display the resulting livetable, nothing else.
##
#macro (displayUserDirectoryLiveTable)
  {{html clean="false"}}
  #set ($columnsProperties = {})
  #foreach ($column in $columns)
    #set ($columnProperties = {
      'type': 'text',
      'html': false,
      'sortable': true,
      'filterable': true,
      'displayName': $xwikiUsersClass.get($column).translatedPrettyName
    })
    #set ($classPropertyType = $xwikiUsersClass.get($column).classType)
    #if ($column == '_avatar')
      #set ($discard = $columnProperties.putAll({
        'html': true,
        'sortable': false,
        'filterable': false,
        'link': 'view'
      }))
    #elseif ($column == 'doc.name')
      #set ($columnProperties.link = 'view')
    #elseif ($classPropertyType.endsWith('List'))
      #set ($columnProperties.type = 'list')
    #elseif ($classPropertyType.endsWith('Number'))
      #set ($columnProperties.type = 'number')
    #elseif ($classPropertyType.endsWith('Password'))
      #set ($discard = $columnProperties.putAll({
        'sortable': false,
        'filterable': false
      }))
    #elseif ($classPropertyType.endsWith('TextArea') || $classPropertyType.endsWith('Email') || $classPropertyType.endsWith('Groups'))
      #set ($columnProperties.html = true)
    #end
    #set ($discard = $columnsProperties.put($column, $columnProperties))
  #end
  ##
  ## Allow other applications to provide a different data source for the user directory livetable. For example, some application might define a different membership relation.
  #set ($userDirectoryLivetableResultsReference = $services.model.createDocumentReference($xcontext.database, 'XWiki', 'UserDirectoryLivetableResultsOverride'))
  #if (!$xwiki.exists($userDirectoryLivetableResultsReference))
    ## If no override is present, use the default data source.
    #set ($userDirectoryLivetableResultsReference = $services.model.createDocumentReference($xcontext.database, 'XWiki', 'UserDirectoryLivetableResults'))
  #end
  ## Note that we specify the class name even though we use a custom results page (which hard-codes it) because the class
  ## name is needed by the live table filters, to have a proper drop down list for Static List fields for instance
  ## (see XWIKI-9660).
  #set ($options = {
    'className': $services.model.serialize($xwikiUsersClassReference, 'local'),
    'resultPage' : "$services.model.serialize($userDirectoryLivetableResultsReference)",
    'translationPrefix' : 'xe.userdirectory.',
    'tagCloud' : true,
    'rowCount': 10,
    'outputOnlyHtml': true
  })
  ## Add a filter for subwikis
  #if ($xcontext.database != $xcontext.mainWikiName &amp;&amp; "$!services.wiki" != '' &amp;&amp; "$!services.wiki.user" != '')
    #set ($userScope = $services.wiki.user.getUserScope($services.wiki.currentWikiId))
    #if ($userScope == 'GLOBAL_ONLY')
      #set ($discard = $options.put('extraParams', 'userScope=global'))
    #else
      #set ($discard = $options.put('extraParams', 'userScope=local'))
    #end
    #if ($userScope == 'LOCAL_AND_GLOBAL')
      &lt;form class='xform third' action=''&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label for='userScopeFilter'&gt;$services.localization.render('userdirectory.userScopeFilter')&lt;/label&gt;
            &lt;span class='xHint'&gt;$services.localization.render('userdirectory.userScopeFilter.hint')&lt;/span&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            &lt;select name='userScope' id='userScopeFilter'&gt;
              &lt;option value='local'&gt;$services.localization.render('userdirectory.userScopeFilter.local')&lt;/option&gt;
              &lt;option value='global'&gt;$services.localization.render('userdirectory.userScopeFilter.global')&lt;/option&gt;
            &lt;/select&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/form&gt;
    #end
  #end
  ## We can't filter the values of the 'disabled' user profile property directly from the 'extraParams' live table
  ## results option because we can't express 'not equal' (we need to say: include only the user profiles for which the
  ## value of the 'disabled' property is not equal to 1). An user profile that doesn't have any value set for the
  ## 'disabled' property is enabled.
  ## We don't hide the disabled user profiles when the active and disabled columns are present because the user can use
  ## the live table filters to achieve this.
  #set ($hideDisabledProfilesValue = $configuration.getValue('hideDisabledProfiles'))
  #if (!$columns.contains('active')
      &amp;&amp; ($hideDisabledProfilesValue == 1 || ("$!hideDisabledProfilesValue" == '' &amp;&amp;
      $configuration.xWikiClass.get('hideDisabledProfiles').getValue('defaultValue') == 1)))
    #set ($options.extraParams = "$!options.extraParams&amp;hideDisabledProfiles=true")
  #end
  ## We need to know which users are disabled or inactive in order to display them differently.
  #set ($discard = $columns.add('active'))
  #set ($discard = $columnsProperties.putIfAbsent('active', {'type': 'hidden'}))
  ## Display the computed livetable.
  #livetable('userdirectory' $columns $columnsProperties $options)
  {{/html}}
#end

## xredirect value used to come back to the current URL when performing actions
#set ($xredirect = $doc.getURL($xcontext.action, $request.queryString))

##
## Displays the customization form and preview. Also handles the form's actions.
##
#macro (displayUserDirectoryCustomizationForm)
  #if (!$configurationDoc.hasAccessLevel('edit'))
    {{error}}$services.localization.render('platform.userdirectory.customizeNotAllowed'){{/error}}
  #else
    #handleUserDirectoryAction()
    ##
    ## Customization form
    ##
    (% id="HUserDirectoryConfiguration" %)
    == {{translation key="userdirectory.configuration.title"/}} ==
    {{html clean="false"}}
    &lt;form class="user-directory-settings xform" action="$configurationDoc.getURL('save')" method="post"&gt;
      &lt;div class="hidden"&gt;
        &lt;input type="hidden" name="form_token" value="$escapetool.xml($services.csrf.token)" /&gt;
        &lt;input type="hidden" name="objectPolicy" value="updateOrCreate" /&gt;
        &lt;input type="hidden" name="xredirect" value="$escapetool.xml($xredirect)" /&gt;
        &lt;input type="hidden" name="comment" value="Updated user directory preferences" /&gt;
      &lt;/div&gt;
      &lt;dl&gt;
        #displayProperty('columns' $configuration 'edit')
        #displayProperty('hideDisabledProfiles' $configuration 'edit')
      &lt;/dl&gt;
      &lt;p&gt;
        &lt;input class="button" type="submit" name="action_save"
          value="$escapetool.xml($services.localization.render('xe.userdirectory.customizeSaveButtonLabel'))"/&gt;
        #set ($resetQueryString = "$!request.queryString&amp;" + $escapetool.url({
          'action': 'reset',
          'form_token': $services.csrf.token,
          'xredirect': $xredirect
        }))
        #set ($resetURL = $doc.getURL($xcontext.action, $resetQueryString))
        &lt;a href="$escapetool.xml($resetURL)" class="button secondary"&gt;
          $escapetool.xml($services.localization.render('xe.userdirectory.customizeResetButtonLabel'))
        &lt;/a&gt;
      &lt;/p&gt;
    &lt;/form&gt;
    {{/html}}
  #end
#end

#macro (handleUserDirectoryAction)
  #if ("$!request.action" != '')
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'reset')
        #if ($isGlobalUserDirectory)
          ## For the global configuration it might be best to keep the object but set default values.
          #set ($discard = $configuration.set('columns', $defaultColumnsString))
        #else
          ## For user preferences, just remove the object.
          #set ($discard = $configurationDoc.removeObject($configuration))
        #end
        #set ($discard = $configurationDoc.save('Reset user directory preferences.'))
      #end
      ## Redirect using xredirect so that the page can be safely refreshed after an action.
      #set ($discard = $response.sendRedirect($request.xredirect))
    #elseif ($request.getHeader('X-Requested-With') == 'XMLHttpRequest')
      #set ($discard = $response.sendError(401, 'CSRF token verification failed!'))
    #else
      #set ($discard = $response.sendRedirect($services.csrf.resubmissionURL))
    #end
    #stop()
  #end
#end

#macro (displayProperty $propertyName $object $action)
  #set ($propertyClass = $object.xWikiClass.get($propertyName))
  #set ($isCheckbox = $propertyClass.getValue('displayFormType') == 'checkbox')
  #set ($fieldDisplay = $stringtool.removeEnd($stringtool.removeStart($object.display($propertyName, $action),
    '{{html clean="false" wiki="false"}}'), '{{/html}}'))
  &lt;dt&gt;
    &lt;label #if ($action == 'edit' &amp;&amp; !$isCheckbox)
        for="$escapetool.xml("${object.xWikiClass.name}_${object.number}_$propertyName")"#end&gt;
      #if ($isCheckbox)
        $fieldDisplay
      #end
      $escapetool.xml($propertyClass.translatedPrettyName)
    &lt;/label&gt;
    &lt;span class="xHint"&gt;
      $!escapetool.xml($propertyClass.hint)
    &lt;/span&gt;
  &lt;/dt&gt;
  &lt;dd&gt;#if (!$isCheckbox)$fieldDisplay#end&lt;/dd&gt;
#end

##
## Displays the user directory with customization status and customization form for when it is being customized.
##
#macro (displayUserDirectoryCustomizationOptions $customize)
  ##
  ## Ability to customize the view.
  ##
  #if ($customize)
    #displayUserDirectoryCustomizationForm()
  #elseif ($isCustomized)
    {{warning}}
    $services.localization.render('xe.userdirectory.isCustomizedWarning', [
      "$doc.fullName",
      $escapetool.url({
        'customize': true,
        'action': 'reset',
        'xredirect': $xredirect
      }),
      "$doc.fullName",
      'customize=true'
    ])
    {{/warning}}
  #elseif ($isGuest)
    {{info}}
    $services.localization.render('xe.userdirectory.canCustomizeInfoGuest', ["path:$doc.getURL('login')"])
    {{/info}}
  #else
    {{info}}
    $services.localization.render('xe.userdirectory.canCustomizeInfo', ["$doc.fullName", 'customize=true'])
    {{/info}}
  #end
#end

##
## Displays the user directory.
##
#macro (displayUserDirectory $customize)
  #set ($discard = $xwiki.jsx.use('XWiki.UserDirectoryMacros'))
  #displayUserDirectoryCustomizationOptions($customize)

  #if ($customize)
    (% id="HUserDirectoryCustomizePreview" %)
    == {{translation key="xe.userdirectory.customizePreviewTitle"/}} ==

  #end
  #displayUserDirectoryLiveTable()
#end
{{/velocity}}</content>
  <object>
    <name>XWiki.UserDirectoryMacros</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4f24c82a-c30a-4551-ad18-f2411706dd55</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-events-bridge'], function($) {
  /**
   * Mark disabled and inactive user profiles.
   */
  var maybeMarkDisabled = function(row, rowData) {
    // We use the abstract comparison (!=) because the property value might come as a string.
    if (rowData &amp;&amp; rowData.active_value != 1) {
      row.find('td.doc_name').addClass('user disabled');
    }
  };
  // Update the markers when the live table rows are refreshed.
  $(document).on('xwiki:livetable:userdirectory:newrow', function(event, data) {
    maybeMarkDisabled($(data.row), data.data);
  });
  // Initialize the markers. We need this because the 'newrow' event might have been already triggered.
  var usersLiveTable = window['livetable_userdirectory'];
  if (usersLiveTable) {
    $('table#userdirectory tr[data-index]').each(function() {
      var row = $(this);
      var rowData = usersLiveTable.fetchedRows[row.data('index')];
      maybeMarkDisabled(row, rowData);
    });
  }

  /**
   * Live preview when the User Directory settings are modified.
   */
  $('form.user-directory-settings').change(function(event) {
    // Default on user-level configuration.
    var configDocument = XWiki.currentDocument;
    if (configDocument.page !== 'UserDirectory' || configDocument.space !== 'Main') {
      // Global configuration.
      configDocument = new XWiki.Document('UserDirectoryConfiguration', 'XWiki');
    }
    var url = configDocument.getURL('get', 'customize=true');
    var data = $(this).serialize();
    var oldLiveTableContainer = $('.xwiki-livetable-container').addClass('loading');
    // We can't use load() here because the live table has in-line script tags that have to be evaluated.
    $.get(url, data).done(function(html) {
      var newLiveTableContainer = $('&lt;div/&gt;').html(html).find('.xwiki-livetable-container');
      oldLiveTableContainer.replaceWith(newLiveTableContainer);
      $(document).trigger('xwiki:dom:updated', {elements: newLiveTableContainer.toArray()});
    });
  });

  /**
   * User scope filtering (for sub-wikis).
   */
  $('#userScopeFilter').change(function(event) {
    var value = $(this).val();
    // The live table is recreated when an user directory setting is changed (live preview) so we can't cache the
    // reference to the live table instance.
    var usersLiveTable = window['livetable_userdirectory'];
    var url = usersLiveTable.getUrl;
    if (url.search('userScope=') &gt;= 0) {
      // Replace the old value.
      if (value === 'local') {
        url = url.replace('userScope=global', 'userScope=local');
      } else {
        url = url.replace('userScope=local', 'userScope=global');
      }
    } else {
      url = url + '&amp;userScope=' + value;
    }
    usersLiveTable.getUrl = url;
    usersLiveTable.refresh();
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
