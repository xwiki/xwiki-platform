<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="XWiki.Notifications.Code.NotificationPreferenceService" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>NotificationPreferenceService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:XWiki.Notifications.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#if ("$!request.interval" != '')
  #set ($userDoc = $xwiki.getDocument($xcontext.userReference))
  #set ($prefObj = $userDoc.getObject('XWiki.Notifications.Code.NotificationEmailPreferenceClass', true))
  #set ($discard = $prefObj.set('interval', $request.interval))
  #set ($discard = $userDoc.save('Update Notification Email Interval'))
#elseif ("$!request.diffType" != '')
  #set ($targetDoc = 0)
  #if ("$!request.target" == 'wiki' &amp;&amp; $hasAdmin)
    #set ($targetDoc = $xwiki.getDocument($services.model.createDocumentReference('', ['XWiki', 'Notifications', 'Code'], 'NotificationAdministration')))
  #elseif ("$!request.target" == 'user')
    #set ($targetDoc = $xwiki.getDocument($xcontext.userReference))
  #end
  #if ($targetDoc == 0)
    #set ($discard = $response.sendError(401))
  #else
    #set ($prefObj = $targetDoc.getObject('XWiki.Notifications.Code.NotificationEmailPreferenceClass', true))
    #set ($discard = $prefObj.set('diffType', $request.diffType))
    #set ($discard = $targetDoc.save('Update Notification Email Diff Type'))
  #end
#elseif ("$!request.action" == 'savePreferences')
  #try()
    #if ("$!request.target" == 'wiki')
      $services.notification.preferences.saveNotificationPreferencesForCurrentWiki($request.json)
    #else
      $services.notification.preferences.saveNotificationPreferences($request.json)
    #end
  #end
  #if ("$!exception" != '')
    $response.sendError(500, "$!exceptiontool.getStackTrace($exception)")
  #end
#elseif ("$!request.action" == 'deleteFilterPreference')
  #try()
    #if ($services.csrf.isTokenValid($request.csrf))
      $services.notification.filters.deleteFilterPreference($request.filterPreferenceId)
    #else
      $response.sendError(401, 'Bad CSRF Token')
    #end
  #end
  #if ("$!exception" != '')
    $response.sendError(500, "$!exceptiontool.getStackTrace($exception)")
  #end
#elseif ("$!request.action" == 'setFilterPreferenceEnabled')
  #try()
    #if ($services.csrf.isTokenValid($request.csrf))
      $services.notification.filters.setFilterPreferenceEnabled($request.filterPreferenceId, $stringtool.equals("$!request.enabled", 'true'))
    #else
      $response.sendError(401, 'Bad CSRF Token')
    #end
  #end
  #if ("$!exception" != '')
    $response.sendError(500, "$!exceptiontool.getStackTrace($exception)")
  #end
#elseif ("$!request.action" == 'createScopeFilterPreference')
  #try()
    #if ($services.csrf.isTokenValid($request.csrf))
      #macro (saveScopeFilterPreference $reference)
        $services.notification.filters.createScopeFilterPreference($request.filterType, $request.filterFormats.split(','), $request.eventTypes.split(','), $reference)
      #end
      #if ("$!request.wiki" != "")
        #foreach ($wikiRequest in $request.getParameterValues('wiki'))
          #set ($reference = $services.model.createWikiReference($wikiRequest))
          #saveScopeFilterPreference($reference)
        #end
      #end
      #if ("$!request.space" != "")
        #foreach ($spaceRequest in $request.getParameterValues('space'))
          SPACE REQUEST: $spaceRequest
          #set ($reference = $services.model.resolveSpace($spaceRequest))
          #saveScopeFilterPreference($reference)
        #end
      #end
      #if ("$!request.page" != "")
        #foreach ($pageRequest in $request.getParameterValues('page'))
          #set ($reference = $services.model.resolveDocument($pageRequest))
          #saveScopeFilterPreference($reference)
        #end
      #end
    #else
      $response.sendError(401, 'Bad CSRF Token')
    #end
  #end
  #if ("$!exception" != '')
    $response.sendError(500, "$!exceptiontool.getStackTrace($exception)")
  #end
#elseif ("$!request.action" == 'setAutoWatchMode' || "$!request.action" == 'setDefaultAutoWatchMode')
  #try()
    #if ($services.csrf.isTokenValid($request.csrf))
      #if ($request.action == 'setAutoWatchMode')
        #set ($targetDoc = $xwiki.getDocument($xcontext.userReference))
      #elseif (!$hasAdmin)
        $response.sendError(401, 'Unauthorized')
      #else
        #set ($targetDoc = $xwiki.getDocument($services.model.createDocumentReference('', ['XWiki', 'Notifications', 'Code'], 'NotificationAdministration')))
      #end
      #set ($obj = $targetDoc.getObject('XWiki.Notifications.Code.AutomaticWatchModeClass', true))
      #set ($discard = $obj.set('automaticWatchMode', $request.mode))
      #set ($discard = $targetDoc.save('Update the automaticWatchMode.'))
    #else
      $response.sendError(401, 'Bad CSRF Token')
    #end
  #end
  #if ("$!exception" != '')
    $response.sendError(500, "$!exceptiontool.getStackTrace($exception)")
  #end
#elseif ("$!request.action" == 'watchUser' || "$!request.action" == 'unwatchUser')
  #try()
    #if ($services.csrf.isTokenValid($request.csrf))
      #if ($request.action == 'watchUser')
        #set ($discard = $services.notification.watch.watchUser($request.userId))
      #else
        #set ($discard = $services.notification.watch.unwatchUser($request.userId))
      #end
    #else
      $response.sendError(401, 'Bad CSRF Token')
    #end
  #end
  #if ("$!exception" != '')
    $response.sendError(500, "$!exceptiontool.getStackTrace($exception)")
  #end
#end
{{/velocity}}
</content>
</xwikidoc>
