<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>IRC</web>
<name>IRCBot</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>IRC.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1251635783000</creationDate>
<date>1323119538000</date>
<contentUpdateDate>1323119538000</contentUpdateDate>
<version>1.1</version>
<title>IRC Bot</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<attachment>
<filename>pircbot-1.5.0.jar</filename>
<filesize>31671</filesize>
<author>XWiki.Admin</author>
<date>1292459910000</date>
<version>1.1</version>
<comment></comment>
<content>UEsDBBQAAAAIAO2gjjsAAAAAAgAAAAAAAAAJAAQATUVUQS1JTkYv/soAAAMAUEsDBBQAAAAIAO2g
jjtM0Y1KRAAAAEQAAAAUAAAATUVUQS1JTkYvTUFOSUZFU1QuTUbzTczLTEstLtENSy0qzszPs1Iw
1DPg5XIuSk0sSU3RdaoECZjoGSloBJfmKfhmJhflF1cWl6TmFit45iXrafJy8XIBAFBLAwQUAAAA
CADqoI470l6+TioEAAA4BwAAHwAAAG9yZy9qaWJibGUvcGlyY2JvdC9Db2xvcnMuY2xhc3NtlFtM
I2UUx/8fvQ1lkLpcFBG5qCsgu6W7C7u4LFJKKZWhxaFQ8bJLW4ZS7IWUYRMTk30hMdHEF5/2CWJi
eFHjJbLoJproesm63h68rdcnE+ObJpr4YP13WmDY5WHOfL//nHO+853vtFf/e+ddWHAEWSdkeJ0Y
hs+BESc1A/xOjCJQxLGiCTpRhYeKZtwBxYEJAXsorE54FYFDylLsfMydjmWT7ik9n8omTwtU+3LZ
FT2W1Wdi6VVNQkjAOhxWRiSEBSqnQyN+VQmG/BImBRyqf8avThEeFrBFx4IRLlUuhxWvb1zCFCNG
vOr4uWFlml8iAk4DA6rfH5IwLWBR/cw8UwxRw1FqUdY3Oa1OKvR/hHJYCc5wOUt51q8o4aiERymX
MzzG4iJ+ryLhca58s15qTxQLNvY7ywonvAF/KOKVcG6nloDqnZUwx1qUYGAsUuYYNxhIZVP6IIvq
6JwppsvNawI1SiqrhVYzcS0ficXTVOS8lsmd13y5dC6/InC44+Y2dh7UWVcpbjSXz8R0nZpA442S
Nzu/k9c5lVvNJ7TRVHHPqpJ6tJhWxkmcciAuI4F5gYYbtxpeXVjQ8jI0LDiQlLGIlIwlPCkjjYyM
0xiQcQYD3D2XT7qXUnGeyr2cyifiOd29s7trL2s4vqQldAFRw6eCTwufBrbJ0tNjWI9hjxn2uGFP
GLbXsH2GPWnYU4btL1qPEesxYj1GrMeI9Rixnt59JZQOxitKa9mkvmhcUZCYWIzlvSzN2hHs9AnU
7kX4+CWW0LU8ZyC1MpJKpgw3Xyenxx5bXtaybF0T+aabKrWP9yXpuZ196zoOuFG08VclA6hDI6px
CzgspAq4yLea+BC51sRF/3oTN5BvM/Ht5EYT30FqMvGd5GYT30VuMXEruc3E7eS7TXwP+V4THybf
Z+IOcqeJu8j3m7ibfMTER8luE/eQPSY+Rj5u4hPkXhP3wUrLoabST6WNb8G3resSxOtcCDxA66QT
8Cad30JlcYxL7mKOuo1frnRtoWLgMiyzl2CdsAw2N72IV7uat2Drs9Zb7Rt4Zs0iKBZ+3xW3Yb9Y
uF6SUb9Phr3sfXlXdnVvFF4pO/fud24tOz+/P/UFypuFp9Yshc3CimEzTFOzgUrjw1x3vXULjqgB
U91bkF7bPe2zvDbgfZ7sAw7XFbbqQw7ORxyEj9mgT3iJV3lJn7LZ19i4z9iPzzGELxDAlwjjK6j4
GlF8g7P4lv8E3/Ff4HtkcB06fsDT+BEX8BPW8DOewy94Ab/iIn7DOv7AS/gTL+MvvIG/8Tb+wXv4
l90+s9NtxpW6PX5At/ea4qpZR1u91baOJkLLOur4atiAfRNO86Gv7T90OyQuJdhEJaqFE3WiCk1C
Rr9wYYg8KmpZzOBuMa3lSZG6tlG5DedeJntRF+20DxozNvQ/UEsDBBQAAAAIAOqgjjto/2U4dAUA
AM8LAAAgAAAAb3JnL2ppYmJsZS9waXJjYm90L0RjY0NoYXQuY2xhc3OdVttTG2UU/y0QNlkWKFAo
tMWmrZcQKNFWq5VeLPQG0lILLQ3VxhAWWAjZdLPpTWu9t7WtlxdnfHR81RmdkWRGZry89tknfdF/
xPF3NlfSteP0Ied8+c75ft/v3L7kwT8//Yx67MIXGkI4G8AzOCdiWsR5EVERMyIuiHhdxBsqLqqI
aejFmxqaENegYVYsCRVzKgyxzGtow4KGDVgUi6lhCcsqkho24ayIFT9Soi0RaRWX5JStIuOHo2Eb
soJ62Y8rGq7imgBdF4+3VLyt4oaChtis5SjYOm7ZC5Elc3Y2aUTSpp3gbuQ09bDlDCnwxVJmYllB
+/hS/HI8koynFiKTjm2mFmhsjCWtBTOlIBBbtDJOKr5iKFBjthGfM2wF3YUzphUZzs7PG7Yxd8a1
DInTFdt0vJ2mXYvrlLESywZJthWcUoYTmXS3aG2KxRMJI+3ESVyBMqPAH4vPzdlGJsOvY0I9bdk8
rIyS6X4zZToHFUyHHhXvw0H+n52x0b5zzOeINUcireNmyjiVXZk17KkCteHHurIqVkHXjl6VYE0r
xegaC5ErqA+JzS8Jl2sVbAz1eRXKnzFSRY/O0MMOAuJLJK2MlG/BcE65JfdzNV6obxOXJ8oVbuO3
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
OlQ/nZMdwGWPPkT0AHmVxEnULVTHGb8222UMeoxJ7w56Uz8R20FH6gdij9J7rlaX/ddscboA4CV9
aV5BxWviv6EMvUzvrH5vzkiD2+rv/JbsMF3hf3Vu2w34O7+jzu+p8wfi71Am4b6s5B9QSwECFAAU
AAAACADtoI47AAAAAAIAAAAAAAAACQAEAAAAAAAAAAAAAAAAAAAATUVUQS1JTkYv/soAAFBLAQIU
ABQAAAAIAO2gjjtM0Y1KRAAAAEQAAAAUAAAAAAAAAAAAAAAAAC0AAABNRVRBLUlORi9NQU5JRkVT
VC5NRlBLAQIUABQAAAAIAOqgjjvSXr5OKgQAADgHAAAfAAAAAAAAAAAAAAAAAKMAAABvcmcvamli
YmxlL3BpcmNib3QvQ29sb3JzLmNsYXNzUEsBAhQAFAAAAAgA6qCOO2j/ZTh0BQAAzwsAACAAAAAA
AAAAAAAAAAAACgUAAG9yZy9qaWJibGUvcGlyY2JvdC9EY2NDaGF0LmNsYXNzUEsBAhQAFAAAAAgA
6qCOOwfGecO7BQAApQsAACoAAAAAAAAAAAAAAAAAvAoAAG9yZy9qaWJibGUvcGlyY2JvdC9EY2NG
aWxlVHJhbnNmZXIkMS5jbGFzc1BLAQIUABQAAAAIAOqgjjunatVL1AcAAIoPAAAqAAAAAAAAAAAA
AAAAAL8QAABvcmcvamliYmxlL3BpcmNib3QvRGNjRmlsZVRyYW5zZmVyJDIuY2xhc3NQSwECFAAU
AAAACADqoI47/wHvHvMIAAAOFgAAKAAAAAAAAAAAAAAAAADbGAAAb3JnL2ppYmJsZS9waXJjYm90
L0RjY0ZpbGVUcmFuc2Zlci5jbGFzc1BLAQIUABQAAAAIAOqgjjsO3QgajwEAAPICAAAlAAAAAAAA
AAAAAAAAABQiAABvcmcvamliYmxlL3BpcmNib3QvRGNjTWFuYWdlciQxLmNsYXNzUEsBAhQAFAAA
AAgA6qCOO7fUbfBLBgAAxgwAACMAAAAAAAAAAAAAAAAA5iMAAG9yZy9qaWJibGUvcGlyY2JvdC9E
Y2NNYW5hZ2VyLmNsYXNzUEsBAhQAFAAAAAgA6qCOO5XYGBWtBAAAjwgAACQAAAAAAAAAAAAAAAAA
cioAAG9yZy9qaWJibGUvcGlyY2JvdC9JZGVudFNlcnZlci5jbGFzc1BLAQIUABQAAAAIAOqgjjtN
QNfMnAYAAJMLAAAkAAAAAAAAAAAAAAAAAGEvAABvcmcvamliYmxlL3BpcmNib3QvSW5wdXRUaHJl
YWQuY2xhc3NQSwECFAAUAAAACADqoI47Bm52GL4AAADzAAAAJQAAAAAAAAAAAAAAAAA/NgAAb3Jn
L2ppYmJsZS9waXJjYm90L0lyY0V4Y2VwdGlvbi5jbGFzc1BLAQIUABQAAAAIAOqgjjt3CpiF0AAA
ABkBAAAyAAAAAAAAAAAAAAAAAEA3AABvcmcvamliYmxlL3BpcmNib3QvTmlja0FscmVhZHlJblVz
ZUV4Y2VwdGlvbi5jbGFzc1BLAQIUABQAAAAIAOqgjjt5jaAlnQMAAJEGAAAlAAAAAAAAAAAAAAAA
AGA4AABvcmcvamliYmxlL3BpcmNib3QvT3V0cHV0VGhyZWFkLmNsYXNzUEsBAhQAFAAAAAgA6qCO
OwUn14/qKgAAxlwAACAAAAAAAAAAAAAAAAAAQDwAAG9yZy9qaWJibGUvcGlyY2JvdC9QaXJjQm90
LmNsYXNzUEsBAhQAFAAAAAgA6qCOO0V3eilaAwAAfAUAAB4AAAAAAAAAAAAAAAAAaGcAAG9yZy9q
aWJibGUvcGlyY2JvdC9RdWV1ZS5jbGFzc1BLAQIUABQAAAAIAOqgjjvW+YoQzwcAAMkUAAAnAAAA
AAAAAAAAAAAAAP5qAABvcmcvamliYmxlL3BpcmNib3QvUmVwbHlDb25zdGFudHMuY2xhc3NQSwEC
FAAUAAAACADqoI47x0AWya4CAAA6BQAAHQAAAAAAAAAAAAAAAAAScwAAb3JnL2ppYmJsZS9waXJj
Ym90L1VzZXIuY2xhc3NQSwUGAAAAABIAEgCmBQAA+3UAAAAA</content>
</attachment>
<class>
<name>IRC.IRCBot</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<botname>
<customDisplay></customDisplay>
<disabled>0</disabled>
<name>botname</name>
<number>1</number>
<picker>0</picker>
<prettyName>Bot Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</botname>
<channel>
<customDisplay></customDisplay>
<disabled>0</disabled>
<name>channel</name>
<number>3</number>
<picker>0</picker>
<prettyName>Channel</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</channel>
<password>
<algorithm></algorithm>
<customDisplay></customDisplay>
<disabled>0</disabled>
<name>password</name>
<number>4</number>
<picker>0</picker>
<prettyName>Password</prettyName>
<size>30</size>
<storageType>Hash</storageType>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.PasswordClass</classType>
</password>
<server>
<customDisplay></customDisplay>
<disabled>0</disabled>
<name>server</name>
<number>2</number>
<picker>0</picker>
<prettyName>Server</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</server>
</class>
<object>
<class>
<name>XWiki.XWikiRights</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<allow>
<defaultValue>1</defaultValue>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>allow</displayType>
<name>allow</name>
<number>4</number>
<prettyName>Allow/Deny</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</allow>
<groups>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>groups</name>
<number>1</number>
<prettyName>Groups</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<usesList>1</usesList>
<classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
</groups>
<levels>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>levels</name>
<number>2</number>
<prettyName>Levels</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>3</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
</levels>
<users>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>users</name>
<number>3</number>
<prettyName>Users</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<usesList>1</usesList>
<classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
</users>
</class>
<name>IRC.IRCBot</name>
<number>0</number>
<className>XWiki.XWikiRights</className>
<guid>7a86c32e-81fe-40f6-a13a-0302aea1e2a5</guid>
<property>
<allow>1</allow>
</property>
<property>
<groups>XWiki.XWikiAdminGroup</groups>
</property>
<property>
<levels>view,comment,edit,delete</levels>
</property>
</object>
<content>This page contains the code for the XWiki IRC Bot which has the following features:
* Log IRC messages in wiki pages
* Ability to register IRC Botlets to perform specific actions when a message is sent on IRC. Available Botlets:
{{velocity}}
#foreach($item in $xwiki.searchDocuments(", BaseObject as obj where obj.name=doc.fullName and obj.className='IRC.IRCBotlet' order by doc.name"))
  #set ($itemDoc = $xwiki.getDocument($item))
  $itemDoc.use('IRC.IRCBotlet')##
  * [[$item]]: $itemDoc.getValue('description')
#end
{{/velocity}}

= Status =

{{include document="IRC.IRCBotlet"/}}

{{groovy jars="attach:pircbot-1.5.0.jar"}}
import com.xpn.xwiki.web.*
import com.xpn.xwiki.doc.*
import com.xpn.xwiki.*
import org.jibble.pircbot.*
import org.xwiki.context.*

class IRCBot extends PircBot
{
    def channel
    def shouldStop = false
    def xwiki
    def context
    def errorCounter = 0

    IRCBot(botname, channel, xwiki, context)
    {
        setName(botname)
        this.channel = channel
        this.xwiki = xwiki
        this.context = context
    }

    void start()
    {
        joinChannel(channel)
    }

    void stop()
    {
        shouldStop = true
        disconnect()
    }

    void onDisconnect()
    {
        while (!shouldStop &amp;&amp; !isConnected()) {
            try {
                reconnect()
                joinChannel(channel)
            } catch (e) {
                // Wait 10 seconds before trying again
                Thread.sleep(10000)
            }
        }

        // Clean up the Execution Context Thread Local but only if we're inside an Execution Context
        // set up for the IRC Bot.
        // Note that if PircBot destroys its threads internally we have no way of doing cleanup for
        // the Execution Context for that thread and that could potentially cause some memory leak
        // since the thread local Execution Context would not have been cleaned.
        def execution = Utils.getComponent(Execution.class)
        def ec = execution.getContext()
        if (ec &amp;&amp; ec.getProperty("ircbot")) {
            execution.removeContext()
        }
    }

    void onMessage(String channel, String sender, String login, String hostname, String message)
    {
        initExecutionContext()
        def date = xwiki.formatDate(new Date(), "HH:mm", context)
        def User[] pircUsers = this.getUsers(channel)
        def userPrefix = "";
        for (User singleUser in pircUsers) {
              if (singleUser.equals(sender)) {
                     userPrefix = singleUser.getPrefix();
              }
        }
        log(channel, "${date} &lt;${userPrefix}${sender}&gt; ${message}\n")
        for (def botlet : com.xpn.xwiki.web.Utils.getComponentManager().lookupList(IRCBotlet.class)) {
            try {
                def result = botlet.handleMessage(channel, sender, login, hostname, message, xwiki, context)
                if (result &amp;&amp; result.size() &gt; 0) {
                    result.each() {
                        sendMessage(channel, it)
                    }
                    break;
                }
            } catch(e) { // Prevent any exception from executing other botlets
                if (errorCounter &lt; 5) {
                    def counter = 0
                    def exception = e
                    while (exception != null &amp;&amp; counter &lt; 3) {
                        sendMessage(channel, "Bot error: ${exception.getMessage()}")
                        exception = exception.getCause()
                        counter++
                    }
                    errorCounter++
                } else if (errorCounter == 5) {
                    sendMessage(channel, "Bot error: The error is still there but I won't display it again to not spam you... Yes I know I'm that kind!")
                    errorCounter++
                }
            }
        }  
    }

    void onJoin(String channel, String sender, String login, String hostname)
    {
        initExecutionContext()
        def date = xwiki.formatDate(new Date(), "HH:mm", context)
        log(channel, "${date} &lt;${sender}&gt; has joined ${channel}\n")
    }

    void onPart(String channel, String sender, String login, String hostname)
    {
        initExecutionContext()
        def date = xwiki.formatDate(new Date(), "HH:mm", context)
        log(channel, "${date} &lt;${sender}&gt; has left ${channel}\n")
    }

    void onQuit(String sourceNick, String sourceLogin, String sourceHostname, String reason)
    {
        initExecutionContext()
        def date = xwiki.formatDate(new Date(), "HH:mm", context)
        log(getChannels()[0], "${date} &lt;${sourceNick}&gt; has quit\n")
    }

    public void onPrivateMessage(String sender, String login, String hostname, String message)
    {
        initExecutionContext()
        sendMessage(sender, "Please don't talk to me, I'm just a robot.")
    }

    void onNickChange(String oldNick, String login, String hostname, String newNick)
    {
        initExecutionContext()
        def date = xwiki.formatDate(new Date(), "HH:mm", context)
        log(getChannels()[0], "${date} &lt;${oldNick}&gt; is now known as &lt;${newNick}&gt;\n")
    }
    
    XWikiDocument getLoggingDocument(String channelName)
    {
        def archiveClassName = "IRC.IRCArchiveClass"
        def archiveClassTemplateName = "IRC.IRCArchiveClassTemplate"
 
        def docdate = xwiki.formatDate(new Date(), "yyyyMMdd", context)
        def docname = "IRC.${channelName}Archive${docdate}"
        def doc = xwiki.getDocument(docname, context)
        if (doc.isNew()) {
            def formattedDocumentTitleDate = xwiki.formatDate(doc.getDate(),"dd MMMM yyyy", context)
            doc.setParent('IRC.WebHome')
            doc.setTitle("IRC Archive for channel ${channel} on ${formattedDocumentTitleDate}")
            def archiveClass = xwiki.getDocument(archiveClassName, context)
            if (!archiveClass.isNew()) {
                def archiveObject = doc.getObject(archiveClassName, true, context)
                archiveObject.set("channel", getChannels()[0], context)
                archiveObject.set("content", "", context)
                def archiveClassTemplate = xwiki.getDocument(archiveClassTemplateName, context)
                if (!archiveClassTemplate.isNew()) {
                    doc.setContent(archiveClassTemplate.getContent())
                } else {
                    throw new Exception("Document ${archiveClassTemplateName} doesn't exist in wiki ${context.database}")
                }
                doc.creator = "IRCBot"
                // Ensure we're using the same syntax for the new doc as the template is using.
                doc.syntaxId = archiveClassTemplate.syntax.toIdString()
            } else {
                throw new Exception("Document ${archiveClassName} doesn't exist in wiki ${context.database}")
            }
        }
        return doc;
    }

    void log(String channel, String message)
    {
        // Remove the # from the channel name
        String channelName = channel[1..-1]

        try {
            def doc = getLoggingDocument(channelName)
            def archiveObject = doc.getObject("IRC.IRCArchiveClass", false, context)
            archiveObject.set("content", archiveObject.get("content").value + message, context)
            doc.author = "IRCBot"
            xwiki.saveDocument(doc, "Logging from IRC", true, context)
        } catch (e) {
            sendMessage(channel, "Failed to log message. Reason: " + e.getMessage())
        }
    }

    /**
     * This method is called within Pircbot's input thread and is used to ensure that there's
     * an initialized XWiki Execution Context for this thread.
     *
     * Note that we have to check all the time since Pircbot doesn't offer a hook for us to
     * configure the Execution Context when it creates its threads.
     */
    void initExecutionContext()
    {
        def execution = Utils.getComponent(Execution.class)

        def ec
        // Under some conditions getting the Execution might fail
        // TODO: Find why it can fail.
        try {
            ec = execution.getContext();
        } catch (e) {
            ec = null;
        }

        if(!ec) {
            ec = new ExecutionContext()

            // Bridge with old XWiki Context, required for old code.
            ec.setProperty("xwikicontext", context)

            // Set marker to signify we're in an IRC Bot Context
            ec.setProperty("ircbot", Boolean.TRUE)

            def ecim = Utils.getComponent(ExecutionContextManager.class)
            ecim.initialize(ec)
            execution.setContext(ec)
        }
    }
}

// Register or unregister the listener depending on the parameter in the request
if (request.action == "start" || xcontext.get("botAction") == "start") {

    // Verify if the bot isn't already started
    if (xcontext.getContext().getEngineContext().getAttribute("ircbot") != null) {
        println "{{error}}IRC Bot is already started{{/error}}"
        return
    }

    // Register all Botlets
    xwiki.searchDocuments(", BaseObject as obj where obj.name=doc.fullName and obj.className='IRC.IRCBotlet' order by doc.name").each() {
        try {
            // Make sure we use the right getRenderedContent() API so that it's executed in the context of the target doc
            def itDoc = xwiki.getDocument(it)
            itDoc.getRenderedContent(itDoc.getTranslatedContent(), "xwiki/2.0", "plain/1.0")
        } catch (e) {
            // Prevent the exception from registering other botlets
            e.printStackTrace()
        }
    }

    // Initialize Bot
    def ircconfigdoc = xwiki.getDocument("IRC.IRCConfig")
    ircconfigdoc.use(doc.fullName)
    def bot = new IRCBot(ircconfigdoc.getValue("botname"), ircconfigdoc.getValue("channel"), xwiki.XWiki, xcontext.getContext())

    // Start the bot
    bot.connect(ircconfigdoc.getValue("server"))
    if (ircconfigdoc.getValue("password").trim().length() &gt; 0) {
        bot.identify(ircconfigdoc.getValue("password"))
    }
    bot.start()

    // Save the bot instance so that we can later stop it
    xcontext.getContext().getEngineContext().setAttribute("ircbot", bot)

    println "{{info}}IRC Bot is now active{{/info}}"
} else if (request.action == "stop" || xcontext.get("botAction") == "stop") {

    // Verify if the bot isn't already stopped
    if (xcontext.getContext().getEngineContext().getAttribute("ircbot") == null) {
        println "{{error}}IRC Bot is already stopped{{/error}}"
        return
    }

    // Stop all Botlets
    Utils.getComponentManager().getComponentDescriptorList(IRCBotlet.class).each() {
        Utils.getComponentManager().unregisterComponent(it.getRole(), it.getRoleHint());
    }

    // Stop the bot
    def bot =  xcontext.getContext().getEngineContext().getAttribute("ircbot")
    bot.stop()
    bot.dispose()
    xcontext.getContext().getEngineContext().setAttribute("ircbot", null)

    println "{{info}}IRC Bot is now inactive{{/info}}"
}
{{/groovy}}

{{groovy}}
import com.xpn.xwiki.web.*
import org.xwiki.observation.*

// check if the bot is started
def isBotStarted = xcontext.getContext().getEngineContext().getAttribute("ircbot") != null 
def buttonText
def action
if (isBotStarted) {
    buttonText = "Stop the IRC Bot"
    action = "stop"
    println "Status: (% style='color:green' %)Bot is started.(%%)"
} else {
    buttonText = "Start the IRC Bot"
    action = "start"
    println "Status: (% style='color:red' %)Bot is not started.(%%)"
}
def botlets = Utils.getComponentManager().lookupList(IRCBotlet.class)
if (botlets.size() &gt; 0) {
    println "The following Botlets are started:"
    botlets.each() {
        println("* ${it.getClass().getName()}")
    }
}
println ""
println "{{html}}&lt;form method='get'&gt;"
println "  &lt;input type='submit' class='button' value='${buttonText}'/&gt;"
println "  &lt;input type='hidden' name='action' value='${action}'/&gt;"
println "&lt;/form&gt;{{/html}}"
{{/groovy}}

== Bot parameters ==

{{velocity}}
#set ($ircconfigdoc = $xwiki.getDocument("IRC.IRCConfig"))
$ircconfigdoc.use($doc.fullName)
* Server: $ircconfigdoc.getValue('server')
* Channel: $ircconfigdoc.getValue('channel')
* Bot name: $ircconfigdoc.getValue('botname')
{{/velocity}}

To modify the configuration, go to the [[IRC Configuration page&gt;&gt;IRC.IRCConfig]].

= Code =

{{groovy}}
import org.xwiki.rendering.block.*

// Pretty print the first Groovy macro content.
println "{{code language=\"none\"}}${doc.getDocument().getXDOM().getChildrenByType(MacroBlock.class, true).get(2).getContent()}{{/code}}"
{{/groovy}}</content></xwikidoc>
