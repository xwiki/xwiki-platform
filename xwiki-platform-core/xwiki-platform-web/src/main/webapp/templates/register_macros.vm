## Defines what server generated error messages should look like
## The error message when a field is entered incorrectly
#set ($failureMessageParams = {'class': 'LV_validation_message LV_invalid'})
## 'LV_validation_message LV_invalid' depends on this:
$xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true)
##
## The * next to the fields to denote they are mandatory.
#set ($fieldMandatoryStar = {'class': 'xRequired'})
##
#macro (definePasswordFields, $fields, $passwordFieldName, $confirmPasswordFieldName, $passwordOptions)
  #set ($passwordRegexes = [])
  #set ($patternLength = "/.{" + $passwordOptions.passwordLength + ",}/")
  #set ($passwordRegex =
  {
    'pattern' : $patternLength,
    'failureMessage' : $services.localization.render('xe.admin.registration.passwordTooShort')
  })
  #set ($discard = $passwordRegexes.add($passwordRegex))
  #if ($passwordOptions.passwordRuleOneUpperCaseEnabled)
    #set ($passwordRegex =
    {
      'pattern' : '/[A-Z]+/',
      'failureMessage' : $services.localization.render('xe.admin.registration.passwordMustContainUppercase')
    })
    #set ($discard = $passwordRegexes.add($passwordRegex))
  #end
  #if ($passwordOptions.passwordRuleOneLowerCaseEnabled)
    #set ($passwordRegex =
    {
      'pattern' : '/[a-z]+/',
      'failureMessage' : $services.localization.render('xe.admin.registration.passwordMustContainLowercase')
    })
    #set ($discard = $passwordRegexes.add($passwordRegex))
  #end
  #if ($passwordOptions.passwordRuleOneNumberEnabled)
    #set ($passwordRegex =
    {
      'pattern' : '/[0-9]+/',
      'failureMessage' : $services.localization.render('xe.admin.registration.passwordMustContainNumber')
    })
    #set ($discard = $passwordRegexes.add($passwordRegex))
  #end
  #if ($passwordOptions.passwordRuleOneSymbolEnabled)
    #set ($passwordRegex =
    {
      'pattern' : '/\W+/',
      'failureMessage' : $services.localization.render('xe.admin.registration.passwordMustContainSymbol')
    })
    #set ($discard = $passwordRegexes.add($passwordRegex))
  #end
  #set ($discard = $fields.add({
    'name': $passwordFieldName,
    'label': $services.localization.render('core.register.password'),
    'params': {
      'type': 'password',
      'autocomplete': 'off',
      'size': '60'
    },
    'validate': {
      'mandatory': {
        'failureMessage': $services.localization.render('core.validation.required.message')
      },
      'regexes': $passwordRegexes
    }
  }))
##
## The confirm password field, mandatory, must match password field, and must also be 6+ characters long.
  #set ($discard = $fields.add({
    'name': $confirmPasswordFieldName,
    'label': $services.localization.render('core.register.passwordRepeat'),
    'params': {
      'type': 'password',
      'autocomplete': 'off',
      'size': '60'
    },
    'validate': {
      'mandatory': {
        'failureMessage': $services.localization.render('core.validation.required.message')
      },
      'mustMatch': {
        'name': $passwordFieldName,
        'failureMessage': $services.localization.render('xe.admin.registration.passwordMismatch')
      }
    }
  }))
#end
##
#*
 * Generate HTML form.
 *
 * @param $fields The array of fields to use for generating HTML code.
 * @param $request The request that is made by submitting the form.
 *#
#macro (generateHtml, $fields, $request)
  ## Put the same values back into the fields (if is there any problem with a field from the request that is made).
  #getParams($fields, $request)
  <dl>
  #foreach ($field in $fields)
    #if ($field.name)
      #set ($fieldName = $field.name)
      #if ($field.label)
        #set ($label = $field.label)
        <dt><label for="$fieldName">$label
        #if ($field.validate.mandatory)
          <span ##
          #foreach ($entry in $fieldMandatoryStar.entrySet())
            $entry.key="$entry.value" ##
          #end
          >$services.localization.render('core.validation.required')</span>
        #end
          </label>
        </dt>
      #end
      ## If no tag then default tag is <input>
      #if ($field.tag)
        #set ($tag = $field.tag)
      #else
        #set ($tag = 'input')
      #end
      <dd><$tag id="$fieldName" ##
      #set ($params = $field.params)
      ## If no name parameter is specified, then we use the field name.
      #if (!$params.name)
        #set ($discard = $params.put('name', $fieldName))
      #end
      #foreach ($entry in $params.entrySet())
        ## If a parameter is specified as '' then we don't include it.
        #if ($entry.value != '')
          $entry.key="$escapetool.xml($entry.value)" ##
        #end
      #end
      ></$tag>
      #if ($field.error)
        <span ##
        #foreach ($entry in $failureMessageParams.entrySet())
          $entry.key="$entry.value" ##
        #end
        >$field.error</span>
      #end
      </dd>
    #else
      $services.localization.render('xe.admin.registration.fieldWithNoName')
    #end
  #end
  </dl>
  #generateJavascript($fields)
#end
##
#*
 * Generate the Javascript for interacting with LiveValidation.
 *
 * @param $fields The array of fields which to validate.
 *###
#macro (generateJavascript, $fields)
  ## Load only the JS since the CSS is loaded after the declaration of 'LV_validation_message LV_invalid'.
  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/validation/livevalidation_prototype.js'))
  <script type='text/javascript'>
  /* <![CDATA[ */
  var initRegistrationFormValidation = function() {
  ##
  #foreach ($field in $fields)
    #if ($field.validate && $field.name)
      #set ($validate = $field.validate)
      #if (($validate.mandatory && !$validate.mandatory.noscript)
          || ($validate.regex && !$validate.regex.noscript)
          || ($validate.mustMatch) && !$validate.mustMatch.noscript)
        #set ($fieldName = $field.name)
        #if ($validate.fieldOkayMessage)
          #set ($okayMessage = $validate.fieldOkayMessage)
        #elseif (!$validate.hideOkayMessage)
          #set ($okayMessage = $services.localization.render('core.validation.valid.message'))
          #else
            #set ($okayMessage = '')
        #end
        var ${fieldName}Validator = new LiveValidation("$fieldName", {validMessage: "$okayMessage", wait: 500});
        ##
        #if ($validate.mandatory)
          #set ($mandatory = $validate.mandatory)
          #if ($mandatory.failureMessage && !$mandatory.noscript)
            ${fieldName}Validator.add(Validate.Presence, {failureMessage: "$!mandatory.failureMessage"});
          #end
        #end
        ##
        #if ($validate.mustMatch)
          #set ($mustMatch = $validate.mustMatch)
          #if ($mustMatch.name && $mustMatch.failureMessage && !$mustMatch.noscript)
            ${fieldName}Validator.add(Validate.Confirmation, {match: $$("input[name=$!mustMatch.name]")[0], 
              failureMessage: "$!mustMatch.failureMessage"});
          #end
        #end
        ##
        #if ($validate.regex)
          #set ($regex = $validate.regex)
          #set ($pattern = "")
          #if ($regex.jsPattern)
            #set ($pattern = $regex.jsPattern)
          #elseif ($regex.pattern)
            #set ($pattern = $regex.pattern)
          #end
          #set ($failMessage = "")
          #if ($regex.jsFailureMessage)
            #set ($failMessage = $regex.jsFailureMessage)
          #elseif ($regex.failureMessage)
            #set ($failMessage = $regex.failureMessage)
          #end
          #if ($pattern != '' && $failMessage != '' && !$regex.noscript)
            ${fieldName}Validator.add(Validate.Format, {pattern: $pattern, failureMessage: "$failMessage"});
          #end
        #end
      #end
    #end
  #end
    };
    document.observe('xwiki:dom:loaded', initRegistrationFormValidation);
    document.observe('xwiki:dom:updated', function(event) {
      var container = (event && event.memo && event.memo.elements && event.memo.elements[0]) || $('body');
      if (container.down('form#register')) {
        initRegistrationFormValidation();
      }
    });// ]]>
    </script>
#end
##
#macro (outputPasswordFields, $fields, $passwordFieldName, $confirmPasswordFieldName, $request)
  #definePasswordFields($fields, $passwordFieldName, $confirmPasswordFieldName, {})
  #generateHtml($fields, $request)
#end
#*
 * Get parameters from request so that values will be filled in if there is a mistake
 * in one of the entries. Entries will be returned to fields[n].params.value
 * Fields will not be returned if they have either noReturn or error specified.
 *
 * @param $fields The array of fields to get parameters for.
 * @param $request The request that is made, from which the params will be returned.
 *###
#macro (getParams $fields, $request)
  #foreach ($field in $fields)
    #if ($field.name && $!request.get($field.name))
      #if (!$field.noReturn && !$field.error)
        #if (!$field.params)
          #set ($params = {})
          #set ($discard = $field.put('params', $params))
        #else
          #set ($params = $field.params)
        #end
        #set ($discard = $params.put('value', $request.get($field.name)))
      #end
    #end
  #end
#end