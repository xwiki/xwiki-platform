<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Panels.DocumentInformation" locale="">
  <web>Panels</web>
  <name>DocumentInformation</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Panels.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Document Information</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro(convertDocument $targetDoc $error $oldSyntaxId $newSyntaxId)
  #if ($targetDoc.realLocale == $xwiki.localePreference)
    #if ($request.content)
      ## Use the content received from the client if the target document is the edited one (could be also a translation of the edited document).
      #set ($void = $targetDoc.setContent($request.content))
    #end
  #end
  ## Use the syntax received from the client as the user might have made some changes that are not saved yet.
  #set ($void = $targetDoc.setSyntaxId($oldSyntaxId))
  #if (!$services.csrf.isTokenValid($request.form_token) || !$targetDoc.convertSyntax($newSyntaxId))
    #set ($error = true)
  #else
    #set ($void = $targetDoc.save("Document converted from syntax $oldSyntaxId to syntax $newSyntaxId"))
  #end
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ("$!request.action" == 'convertSyntax')
  #set ($oldSyntaxId = $request.oldSyntaxId)
  #set ($newSyntaxId = $request.newSyntaxId)
  #set ($targetDoc = $xwiki.getDocument($request.documentName))
  #set ($error = false)
  ##
  ## Convert the specified document
  ##
  #convertDocument($targetDoc $error $oldSyntaxId $newSyntaxId)
  ##
  ## Convert all the translations of the specified document
  ##
  #set ($translationLocales = $targetDoc.translationLocales)
  #if (!$error)
    #foreach ($translationLocale in $translationLocales)
      #if (!$error)
        #set ($translatedDoc = $targetDoc.getTranslatedDocument($translationLocale))
        #if ($translatedDoc.locale != $targetDoc.locale)
          #convertDocument($translatedDoc $error $oldSyntaxId $newSyntaxId)
        #end
      #end
    #end
  #end
  ##
  ## Error management
  ##
  #if (!$error)
    ## Conversion successful. The "ok:" prefix is needed, since otherwise an empty content will result in a "This template does not exist" exception.
    ok:${targetDoc.content}##
  #else
    $response.setStatus(501)
    ## TODO: Find a way to put the exception in the context and send it to the client.
    failed
  #end
#end
{{/velocity}}</content>
  <object>
    <name>Panels.DocumentInformation</name>
    <number>0</number>
    <className>Panels.PanelClass</className>
    <guid>0fc28595-9c62-4ef9-b19b-a937f795efd8</guid>
    <class>
      <name>Panels.PanelClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>7</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>8</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>doc.reference=Document|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.parameters=Request parameters|request.url=Request URL|request.wiki=Request wiki|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>6</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <category>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>category</name>
        <number>1</number>
        <prettyName>Category</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>Information|Navigation|Tools|Administration|Other</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </category>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>5</number>
        <prettyName>Executed Content</prettyName>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <description>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>description</name>
        <number>2</number>
        <prettyName>Description</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </description>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>3</number>
        <prettyName>Name</prettyName>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <type>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>type</name>
        <number>4</number>
        <prettyName>Panel type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>view|edit</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </type>
    </class>
    <property>
      <async_cached>0</async_cached>
    </property>
    <property>
      <async_context/>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <category>Tools</category>
    </property>
    <property>
      <content>{{template name="display_macros.vm" /}}

{{velocity}}
#set ($discard = $xwiki.ssx.use('Panels.DocumentInformation'))
#set ($pages = $tdoc.includedPages)
#largepanelheader($services.localization.render('panels.documentInformation.title'))
#if ("$tdoc.locale" == '' &amp;&amp; $xwiki.isMultiLingual())
; {{html}}&lt;label for="xwikidoclanguageinput2"&gt;$services.localization.render('panels.documentInformation.defaultLanguage')&lt;/label&gt;{{/html}}
: {{html clean="false"}}#displayDocumentProperty_defaultLocale('edit'){{/html}}
#end
##----------------------------------
## Display the wiki syntax combo box
##----------------------------------
#set ($discard = $xwiki.jsx.use($paneldoc.fullName))
; {{html}}&lt;label for="xwikidocsyntaxinput2"&gt;$services.localization.render('panels.documentInformation.syntax')&lt;/label&gt;{{/html}}
: {{html clean="false"}}#displayDocumentProperty_syntax('edit'){{/html}}
##--------------------------------------------------------------------------
; {{html}}
&lt;label for="xhidden"&gt;&lt;input id="xhidden" type="checkbox" name="xhidden" #if($tdoc.isHidden()) checked="checked"#end value="1"/&gt;$services.localization.render('panels.documentInformation.hiddenDocument')&lt;/label&gt;
&lt;input name="xhidden" type="hidden" value="0" /&gt;
{{/html}}
: #* Keep empty for HTML validation. *#

##--------------------------------------------------------------------------
#if($pages.size() != 0)
  ; $services.localization.render('panels.documentInformation.includesCount', [$pages.size()])
  #foreach ($page in $pages)
  : [[$page&gt;&gt;$page]] [[[[image:icon:page_white_edit||alt="$services.localization.render('panels.documentInformation.editIncluded', [$page])"]]&gt;&gt;path:$xwiki.getURL($page, 'edit')]]
  #end
#end
##--------------------------------------------------------------------------
(% id="parserSyntaxes" class="hidden" %)[#foreach ($syntax in $services.rendering.availableParserSyntaxes)"$syntax.toIdString()"#if ($foreach.hasNext), #end#end](%%)
(% id="rendererSyntaxes" class="hidden" %)[#foreach ($syntax in $services.rendering.availableRendererSyntaxes)"$syntax.toIdString()"#if ($foreach.hasNext), #end#end](%%)
#panelfooter()
{{/velocity}}</content>
    </property>
    <property>
      <description>Displays and allows editing the document title and syntax, and lists the included documents.</description>
    </property>
    <property>
      <name>Document Information</name>
    </property>
    <property>
      <type>edit</type>
    </property>
  </object>
  <object>
    <name>Panels.DocumentInformation</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4c52a44e-14d5-46e0-9d60-6bd17d5e44d5</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Make sure the XWiki "namespace" is valid.
if (typeof(XWiki) == 'undefined') {
  XWiki = new Object();
}

/**
 * When the user switches to a different syntax, this component offers the ability to also convert the document content
 * to the new syntax, if a valid converter is available on the server.
 */
XWiki.SyntaxConverter = Class.create({
  /**
   * Valid syntaxes as the initial content syntax. If the originally selected syntax is not among these, then a
   * conversion is not proposed.
   *
   * Note that we get the list of parser syntaxes dynamically from the HTML generated by the panel velocity code. If we were
   * not doing this, we would only have a cached list of syntaxes and it wouldn't be possible to dynamically register new
   * syntaxes.
   */
  validSourceSyntaxes : JSON.parse($('parserSyntaxes').innerHTML),

  /**
   * Valid syntaxes as the target content syntax. If the newly selected syntax is not among these, then a conversion is
   * not proposed.
   *
   * Note that we get the list of renderer syntaxes dynamically from the HTML generated by the panel velocity code. If we were
   * not doing this, we would only have a cached list of syntaxes and it wouldn't be possible to dynamically register new
   * syntaxes.
   */
  validTargetSyntaxes : JSON.parse($('rendererSyntaxes').innerHTML),

  /**
   * Constructor. If the syntax field is present in the HTML (and it should, as the extension is pulled iff the syntax
   * field is displayed), then adds the custom behavior to that field.
   */
  initialize : function() {
    if ($("xwikidocsyntaxinput2")) {
      this.gatherMembers();
      this.addSyntaxChangeListener();
    }
  },

  /**
   * Gather/create the data needed for this component to work.
   */
  gatherMembers : function() {
    this.contentField = $('content');
    this.syntaxField = $('xwikidocsyntaxinput2');
    this.storeNewSyntax();
    var name = $$("meta[name='document']");
    if (name.length &gt; 0) {
      // The meta element holding the document name is present. Use it.
      this.name = name[0].content;
    } else {
      // The metadata is missing, probably an old or custom skin. Try to obtain the document name from the URL.
      if (document.location.pathname.indexOf('/edit/') &gt;= 0) {
        this.name = document.location.pathname.substring(document.location.pathname.indexOf('/edit/') + 6).replace("/", ".");
      } else {
        // Use the default name, as this is not a critical part.
        this.name = "Main.WebHome";
      }
    }
    this.loading = new Element("div").setStyle({backgroundColor: '#000', backgroundImage: 'url($xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif'))', backgroundPosition: 'center', backgroundRepeat: 'no-repeat', opacity: 0.6}).hide();
    document.body.appendChild(this.loading);
    this.loading.absolutize().clonePosition(this.contentField);
  },

  /** Add the event listener that triggers the custom behavior when the syntax choice is changed. */
  addSyntaxChangeListener : function() {
    Event.observe(this.syntaxField, 'change', this.syntaxChanged.bind(this));
  },

  /**
   * Callback function triggered when the user selects a new syntax. If the combination of the previously and newly
   * selected syntaxes are a valid combination for converting the content, then send an AJAX request to the server to
   * obtain the converted content from the editor. This data might be newer than what is stored on the server (the user
   * could have made changes), so always convert the current content of the editing area.
   */
  syntaxChanged : function() {
    var syntaxIndex = this.syntaxField.selectedIndex;
    var syntax = this.syntaxField.options.item(syntaxIndex).value;
    if (this.validSourceSyntaxes.indexOf(this.originalSyntax) == -1 || this.validTargetSyntaxes.indexOf(syntax) == -1) {
      // Server does not support this conversion. Simply accept the new syntax.
    } else {
      if (XWiki.editor=='wysiwyg') {
        // Conversion in WYSIWYG mode does not yet support conversion of the current content
        if (XWiki.docisnew || confirm($jsontool.serialize($services.localization.render('panels.documentInformation.confirmChangeSyntaxWysiwyg')))) {
          this.disableEditingArea();
          new Ajax.Request(
            "$doc.getURL('get')",
            {
              method: 'post',
              parameters: {
                action: 'convertSyntax',
                sheet: '$doc.fullName',
                outputSyntax: 'plain',
                form_token: $$('meta[name=form_token]')[0].content,
                documentName: this.name,
                oldSyntaxId: this.originalSyntax,
                newSyntaxId: syntax
              },
              onSuccess: this.successfulWYSIWYGConversion.bindAsEventListener(this),
              onFailure: this.failedConversion.bindAsEventListener(this),
              onComplete: this.enableEditingArea.bind(this)
            }
          );
        } else {
          this.syntaxField.value = this.originalSyntax;
        }
      } else if (!this.contentField.value.blank()) {
        if (confirm($jsontool.serialize($services.localization.render('panels.documentInformation.confirmChangeSyntax')))) {
          this.disableEditingArea();
          new Ajax.Request(
            "$doc.getURL('get')",
            {
              method: 'post',
              parameters: {
                action: 'convertSyntax',
                sheet: '$doc.fullName',
                outputSyntax: 'plain',
                form_token: $$('meta[name=form_token]')[0].content,
                documentName: this.name,
                oldSyntaxId: this.originalSyntax,
                newSyntaxId: syntax,
                content: $('content').value
              },
              onSuccess: this.successfulConversion.bindAsEventListener(this),
              onFailure: this.failedConversion.bindAsEventListener(this),
              onComplete: this.enableEditingArea.bind(this)
            }
          );
        }
      }
      return;
    }
    this.storeNewSyntax();
  },

  /**
   * Callback function triggered by a successful response from the server. The converted content should be in the
   * response text. This method re-enables the editing area and sets the new content.
   * 
   * @param response The Ajax.Response object, wrapping the HTTP response received from the server.
   */
  successfulConversion : function(response) {
    this.storeNewSyntax();
    var contentField = this.contentField;
    contentField.value = response.responseText.substring(3);
    // Trigger the 'change' event so that the editor can display changes on the content field.
    // Note: The only way apparently possible for this triggering to work in 2017 is to trigger it with jQuery.
    //       Neither PrototypeJS nor standard JavaScript events triggering works from this location (even if it works from the browser's console).
    require(['jquery', 'xwiki-meta'], function ($, xm) {
      $(contentField).trigger('change');
      xm.refreshVersion();
    })
  },

  /**
   * Callback function triggered by a successful response from the server. The converted content should be in the
   * response text. This method re-enables the editing area and reload the page.
   * 
   * @param response The Ajax.Response object, wrapping the HTTP response received from the server.
   * @todo this is a temporary methods waiting for a complete support of synamic unloading/loading of the WYSIWYG.
   */
  successfulWYSIWYGConversion : function(response) {
    this.storeNewSyntax();
    window.location.reload(true);
  },

  /**
   * Callback function triggered by a failed response from the server. This method informs the user of the error and
   * re-enables the editing area with the old content and syntax.
   * 
   * @param response The Ajax.Response object, wrapping the HTTP response received from the server.
   * @todo The cause of the error should be placed in the context and sent in this response, so that the user can know
   *     what exactly prevented the conversion.
   */
  failedConversion : function(response) {
    alert($jsontool.serialize($services.localization.render('panels.documentInformation.failedSyntaxConversion')));
    this.syntaxField.selectedIndex = this.originalSyntaxIndex;
  },

  /**
   * Disable the editing area and the syntax chooser. Also cover the editing area with a busy loading image.
   * 
   * @todo How to disable the WYSIWYG editor?
   */
  disableEditingArea : function() {
    this.syntaxField.disabled = true;
    this.contentField.disabled = true;
    this.loading.show();
  },

  /**
   * Re-enable the editing area and the syntax chooser.
   * 
   * @todo How to enable the WYSIWYG editor?
   */
  enableEditingArea : function() {
    this.syntaxField.disabled = false;
    this.loading.hide();
    this.contentField.disabled = false;
  },

  /**
   * Store the new syntax as the source syntax. This allows to change the syntax more than once in the same editing
   * session, and to perform the proper chained conversions.
   */
  storeNewSyntax : function() {
    this.originalSyntaxIndex = this.syntaxField.selectedIndex;
    this.originalSyntax = this.syntaxField.options.item(this.originalSyntaxIndex).value;
  }
});

// Create the component when the HTML tree is fully loaded.
document.observe("xwiki:dom:loaded", function() { new XWiki.SyntaxConverter(); });</code>
    </property>
    <property>
      <name>SyntaxConverter</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
