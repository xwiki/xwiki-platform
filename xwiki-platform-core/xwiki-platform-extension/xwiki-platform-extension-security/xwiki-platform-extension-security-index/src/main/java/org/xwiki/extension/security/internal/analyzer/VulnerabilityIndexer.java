/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.extension.security.internal.analyzer;

import java.io.IOException;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Singleton;

import org.apache.solr.client.solrj.SolrServerException;
import org.xwiki.component.annotation.Component;
import org.xwiki.extension.Extension;
import org.xwiki.extension.index.internal.ExtensionIndexStore;
import org.xwiki.extension.index.internal.security.ExtensionAnalysisResult;

/**
 * @version $Id$
 * @since 15.5RC1
 */
@Component(roles = VulnerabilityIndexer.class)
@Singleton
public class VulnerabilityIndexer
{
    @Inject
    private ExtensionIndexStore extensionIndexStore;

    /**
     * Update the security issues known for the given extension.
     *
     * @param extension the extension to update
     * @param analysis the security analysis to update the extension
     * @return {@code true} if some new security issues is inserted
     */
    public boolean update(Extension extension, ExtensionAnalysisResult analysis)
    {
        try {
            List<String> cveid = this.extensionIndexStore.getCVEIDs(extension.getId());

            boolean hasNew =
                analysis.getSecurityIssues().stream().anyMatch(securityIssue -> !cveid.contains(securityIssue.getId()));

            this.extensionIndexStore.update(extension.getId(), analysis);

            return hasNew;
        } catch (SolrServerException e) {
            // TODO handle
            throw new RuntimeException(e);
        } catch (IOException e) {
            // TODO handle
            throw new RuntimeException(e);
        }
    }
}
