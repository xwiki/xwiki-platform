<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.AdminThemesSheet" locale="">
  <web>XWiki</web>
  <name>AdminThemesSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
$xwiki.jsx.use('XWiki.AdminThemesSheet')
### Change the skin, color theme and icon theme, at global or space level.
#set ($params = {
  'colortheme': ['colorTheme'],
  'icontheme' : ['iconTheme'],
  'skin': ['skin']
})
###
### Use the color theme displayer.
###
### It's needed because the XWikiPreferences class might not have been configured to use it, which is the case
### when oldcore creates the class (it is not supposed to know that the Administration Application will be installed).
###
#if ($hasGlobalAdmin)
  #set ($class = $xwiki.getClass('XWiki.XWikiPreferences'))
  #foreach ($p in $class.XWikiClass.enabledProperties)
    #if ($p.name == 'colorTheme' &amp;&amp; "$!p.customDisplay" == '')
      ## Add the custom displayer (it won't be saved but it will be used for the display of the current document)
      $p.setCustomDisplay('{{include reference="XWiki.ColorThemePropertyDisplayer" /}}')
      #break
    #end
  #end
#end
{{/velocity}}

{{include reference="XWiki.AdminFieldsDisplaySheet" /}}</content>
  <object>
    <name>XWiki.AdminThemesSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>b30f3b22-b2d8-4f46-ac7f-782a4338d466</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function($) {
  'use strict';

  /**
   * Customize Button class.
   * @param button the "customize" button
   * @param input the input field corresponding to the button
   * @param action the action to use in the URL to go to the page linked by the input
   */
  var CustomizeButton = function(button, input, action) {
    var self = this;
    self.button = button;
    self.input = input;
    self.action = action;

    /**
     * Initialization
     */
    self.init = function () {
      self.update();
      // Update the button everytime the value of the input changes
      self.input.change(function () {
        self.update();
      });
      self.input.keyup(function () {
        self.update();
      });
    };

    /**
     * Update the button
     */
    self.update = function () {
      var inputValue = self.input.val();
      // We consider a color theme or a skin must be written with an absolute reference, so if there is no "dot", the
      // value is wrong.
      if (inputValue.indexOf('.') &gt; 0) {
        // TODO: verify that the page exists (?)
        var pageReference = XWiki.Model.resolve(inputValue, XWiki.EntityType.DOCUMENT);
        var url = new XWiki.Document(pageReference).getURL(self.action);
        self.button.attr('href', url);
        self.button.removeClass('hidden');
      } else {
        self.button.attr('href', '#');
        self.button.addClass('hidden');
      }
    };

    // Call initialization
    self.init();
  }

  /**
   * Handle customize color theme.
   */
  var customizeColorTheme = new CustomizeButton(
    $('label.colorTheme a'),
    $('select[name="XWiki.XWikiPreferences_0_colorTheme"]'),
    'edit'
  );

  /**
   * Handle customize skin.
   */
  var customizeSkin = new CustomizeButton(
    $('label.skin a'),
    $('select[name="XWiki.XWikiPreferences_0_skin"]'),
    'view'
  );
});
</code>
    </property>
    <property>
      <name>Handle "Customize" buttons</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
