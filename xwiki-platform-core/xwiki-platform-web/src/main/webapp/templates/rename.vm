###
### Rename document template
###

## Check if renaming is forced
#set ($session = $request.session)
#set ($sessionAttributeName = 'force_rename_' + $doc.prefixedFullName)
#set ($renameForced = $session.getAttribute($sessionAttributeName))
#if (!$renameForced && "$!request.get('force')" != '')
  #set($renameForced = true)
  #set($void = $session.setAttribute($sessionAttributeName, $renameForced))
#end

#macro (getDocumentsWithUsedClass $spaceReference $return)
  #set ($isDirectChild = 'doc.space = :space')
  #set ($isIndirectChild = "doc.space like :spacePrefix escape '/'")
  #set ($containClass = "doc.fullName = obj.className")
  #set ($queryContent = ",BaseObject as obj where $containClass and ($isDirectChild or $isIndirectChild)")
  #set ($query = $services.query.hql($queryContent))
  #set ($query = $query.setWiki($spaceReference.wikiReference.name))
  #set ($localSpaceReference = $services.model.serialize($spaceReference, 'local'))
  #set ($query = $query.bindValue('space', $localSpaceReference))
  #set ($spacePrefix = $localSpaceReference.replaceAll('([%_/])', '/$1'))
  #set ($query = $query.bindValue('spacePrefix', "${spacePrefix}.%"))
  #set ($return = $NULL)
  #setVariable("$return" $query.execute())
#end

#set ($spaceReference = $doc.documentReference.parent)
#getDocumentsWithUsedClass($spaceReference $docsWithUsedClass)

#if (!$xwiki.checkAccess($doc.fullName, 'delete') && "$!request.renameId" == '')
  #template("accessdenied.vm")
#elseif ($xcontext.action == 'get' && "$!request.renameId" != '')
  ## AJAX request for rename status update.
  #template("renameStatus.vm")
## There is no class being used or renaming is forced
#elseif ($docsWithUsedClass.isEmpty() || $renameForced)
  #template("startpage.vm")
  #if ("$!step" == '')
    #set ($step = "$!request.step")
    #if ("$!step" == '')
      #set ($step = '1')
    #end
  #end

  <div class="main layoutsubsection">
  <div id="mainContentArea">
    #if ("$!request.renameId" != '')
      ## Display the rename status
      #template("renameStatus.vm")
    #elseif ($doc.isNew())
      $response.setStatus(404)
      #error($services.localization.render('core.rename.nonexistingDocument'))
    #elseif ($step == 1)
      ## Display the rename form
      #template("renameStep1.vm")
    #elseif (!$services.csrf.isTokenValid($request.form_token))
      ## CSRF protection
      $response.sendRedirect("$!services.csrf.resubmissionURL")
    #else
      ## Do the rename. It's the form in renameStep1.vm page that calls this page with step=2.
      #if ("$!request.newPageName.trim()" == '')
        $response.setStatus(400)
        #error($services.localization.render('core.rename.emptyName'))
        #template("renameStep1.vm")
      #else
        #template('refactoring_macros.vm')
        ## Determine if the new document should be terminal.
        #isTargetDocumentTerminal($doc.name)
        #getNestedDocumentReference($request.newWikiName $request.newSpaceName $request.newPageName $NULL $terminal
          $newDocReference)
        #set ($newDocReferenceAsString = $services.model.serialize($newDocReference))
        ## Allow users to overwrite existing documents if they are redirect placeholders.
        #if ($xwiki.exists($newDocReference) && !$xwiki.getDocument($newDocReference).getObject('XWiki.RedirectClass'))
          $response.setStatus(409)
          #error($services.localization.render('core.rename.alreadyExists', [${escapetool.xml($newDocReferenceAsString)},
            $xwiki.getURL($newDocReference)]))
          #template("renameStep1.vm")
        #elseif (!$xwiki.hasAccessLevel('edit', $xcontext.user, $newDocReferenceAsString))
          $response.setStatus(403)
          #error($services.localization.render('core.rename.targetNotWritable',
            [${escapetool.xml($newDocReferenceAsString)}]))
          #template('renameStep1.vm')
        #else
          #set ($renameRequest = $services.refactoring.createRenameRequest($doc.documentReference, $newDocReference))
          ## We can't rename the children if the new page is terminal.
          #set ($deep = $request.deep == 'true' && !$terminal)
          #set ($discard = $renameRequest.setDeep($deep))
          #set ($updateLinks = $request.updateLinks == 'true')
          #set ($discard = $renameRequest.setUpdateLinks($updateLinks))
          #set ($autoRedirect = $request.autoRedirect == 'true')
          #set ($discard = $renameRequest.setAutoRedirect($autoRedirect))
          ## Rename operation relies on copy.
          #maybeUpdateTitleAfterCopy($renameRequest $doc.documentReference 'newPageTitle')
          #if ($request.async == 'true')
            ## We may be asked a question (we assume that async also imply we want it interactive)
            #set ($discard = $renameRequest.setInteractive(true))
          #end
          #set ($renameJob = $services.refactoring.rename($renameRequest))
          #if ($request.async != 'true')
            #try()
              #set ($discard = $renameJob.join())
            #end
          #end
          $response.sendRedirect($doc.getURL($xcontext.action, $escapetool.url({
            'xpage': 'rename',
            'renameId': $renameRequest.id.get($mathtool.sub($renameRequest.id.size(), 1))
          })))
        #end
      #end
    #end
    <div class="clearfloats"></div>
  </div>## mainContentArea
  </div>## main
  #template("endpage.vm")

## There is class being used and renaming not forced
#else
  #template("startpage.vm")
  <div class="main">
    <div id="mainContentArea">
    ##
      $response.setStatus(423)
      #set($newquerystring = "$!{request.getQueryString().replaceAll('&', '&amp;').replaceAll('&amp;amp;', '&amp;')}"
      + '&amp;force=1')
      #set($forceRenameURL = $tdoc.getURL($xcontext.getAction(), ${newquerystring}))

      #if ($isAdvancedUser)
        #set($boxTitle = 'notice')
        #set($boxContent = 'extension.xar.renamewarning')
      #else
        #set($boxTitle = 'error')
        #set($boxContent = 'extension.xar.renamedeny')
      #end

      #xwikimessageboxstart($services.localization.render($boxTitle) $services.localization.render($boxContent))

      #if ($isAdvancedUser)
        <ul>
          #foreach($docWithUsedClass in $docsWithUsedClass)
            <li>$docWithUsedClass</li>
          #end
        </ul>
      #end

      #if ($isAdvancedUser)
        <p><a href="$forceRenameURL">$services.localization.render('forcelock')</a><p>
      #else
        $response.setStatus(403) ## forbidden
      #end
      #xwikimessageboxend()
    ##
    </div>## mainContentArea
  </div>## main
  #template("endpage.vm")
#end
