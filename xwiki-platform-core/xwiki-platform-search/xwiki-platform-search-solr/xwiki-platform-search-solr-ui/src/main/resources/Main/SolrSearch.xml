<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>Main</web>
  <name>SolrSearch</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1384924669000</creationDate>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1384924669000</date>
  <contentUpdateDate>1384924669000</contentUpdateDate>
  <version>1.1</version>
  <title>Solr Search</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output='false'}}
#set ($defaultDateFormat = 'yyyy/MM/dd HH:mm')
#set ($iso8601DateFormat = "yyyy-MM-dd'T'HH:mm:ss'Z'")
#set ($rangePattern = $regextool.compile('^\[(.+) TO (.+)\]$'))
#set ($wildcardPattern = $regextool.compile('^\(.*\*.*\)$'))
#set ($facetPaginationStep = 5)

#macro (displaySearchForm)
  {{html}}
  &lt;form class="search-form half" action=""&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="hidden" name="sort" value="$!escapetool.xml($sort)"/&gt;
      &lt;input type="hidden" name="sortOrder" value="$!escapetool.xml($sortOrder)"/&gt;
      ## The parameter used to determine if the request has been redirected with default search filters.
      &lt;input type="hidden" name="r" value="$!escapetool.xml($request.r)"/&gt;
      #if ("$!request.debug" != '')
        &lt;input type="hidden" name="debug" value="$escapetool.xml($request.debug)"/&gt;
      #end
      ## Preserve the current facet values when submitting a new search query.
      #foreach ($entry in $request.parameterMap.entrySet())
        #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))
          #foreach ($value in $entry.value)
            &lt;input type="hidden" name="$escapetool.xml($entry.key)" value="$escapetool.xml($value)"/&gt;
          #end
        #end
      #end
    &lt;/div&gt;
    &lt;div class="search-bar"&gt;
      &lt;label class="hidden" for="searchQuery"&gt;$services.localization.render('search.page.bar.query.label')&lt;/label&gt;
      &lt;input type="text" id="searchQuery" name="text" class="search-query withTip useTitleAsTip"
        title="$services.localization.render('search.page.bar.query.title')" value="$escapetool.xml($text)"/&gt;##
      &lt;span class="buttonwrapper"&gt;##
        &lt;input type="submit" value="$services.localization.render('search.page.bar.submit')"
          class="button" title="$services.localization.render('search.page.bar.submit.title')" /&gt;
      &lt;/span&gt;
    &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}
#end

#macro (displaySearchDebugInfo)
  (% class="search-debug" %)(((
    === Debug Information ===
    #set ($debugMap = $searchResponse.debugMap)
    #if ($debugMap)

      {{html}}
      &lt;dl&gt;
        &lt;dt&gt;Query Parser&lt;/dt&gt;
        &lt;dd&gt;$!escapetool.xml($debugMap.get('QParser'))&lt;/dd&gt;
        &lt;dt&gt;Parsed Query&lt;/dt&gt;
        &lt;dd&gt;$!escapetool.xml($debugMap.get('parsedquery_toString'))&lt;/dd&gt;
        &lt;dt&gt;Filter Queries&lt;/dt&gt;
        &lt;dd&gt;
          &lt;ul&gt;
            #foreach ($filterQuery in $debugMap.get('filter_queries'))
              &lt;li&gt;$!escapetool.xml($filterQuery)&lt;/li&gt;
            #end
          &lt;/ul&gt;
        &lt;/dd&gt;
        &lt;dt&gt;Processing Time&lt;/dt&gt;
        &lt;dd&gt;
          #displayProcessingTime($debugMap.get('timing'))
        &lt;/dd&gt;
      &lt;/dl&gt;
      {{/html}}
    #end
  )))
#end

#macro (displayProcessingTime $timing)
  &lt;ul&gt;
    ## The timing is not a Map but a NamedList.
    #foreach ($entry in $timing)
      &lt;li&gt;
        $!escapetool.xml($entry.key):
        #if ($entry.value.time &amp;&amp; $entry.value.size() &gt; 1)
          #displayProcessingTime($entry.value)
        #else
          $!escapetool.xml($entry.value)
        #end
      &lt;/li&gt;
    #end
  &lt;/ul&gt;
#end

#macro (displaySearchFacets $searchResponse)
  (% class="search-facets xform" %)(((
    (% class="search-facets-header" %)(((
      **{{translation key="solr.facets.title"/}}**

      (% class="xHint" %)
      {{translation key="solr.facets.hint"/}}
    )))
    (% class="search-facets-actions" %)(((
      #set ($resetParameters = {})
      #foreach ($parameter in $request.parameterMap.entrySet())
        #if ($parameter.key.startsWith('f_') || $parameter.key.startsWith('l_'))
          #set ($discard = $resetParameters.put($parameter.key, []))
        #end
      #end
      #extendQueryString($url $resetParameters)
      [[{{translation key="solr.facets.resetAll"}}&gt;&gt;path:$url]]
    )))
    #foreach ($facetField in $searchResponse.facetFields)
      #displaySearchFacet($facetField)
    #end
  )))
#end

#macro (displaySearchFacet $facetField)
  #set ($facetValues = $facetField.values)
  ## Keep only the values that have at least one match.
  #set ($discard = $facetValues.removeAll($facetField.getLimitingFields(1).values))
  #if ($facetValues.size() &gt; 0)
    ## Show active facets (that have selected values or that have an explicit limit on the number of values, i.e.
    ## pagination) as expanded. Collapse the rest, otherwise you have to scroll to see all the available facets.
    #set ($facetRequestParameter = "f_$facetField.name")
    #set ($facetRequestValues = $request.getParameterValues($facetRequestParameter))
    #set ($facetValuesLimit = $request.getParameter("l_$facetField.name"))
    (% class="search-facet#if ($facetRequestValues || $facetValuesLimit) expanded#end" %)(((
      {{html}}
      #set ($facetPrettyNameKey = "solr.field.$facetField.name")
      #if ($services.localization.get($facetPrettyNameKey))
        #set ($facetPrettyName = $services.localization.render($facetPrettyNameKey))
      #else
        #set ($facetPrettyName = $facetField.name)
      #end
      &lt;div class="search-facet-header"&gt;$escapetool.xml($facetPrettyName)&lt;/div&gt; 
      &lt;div class="search-facet-body"&gt;
        #displaySearchFacetValues($facetValues)
      &lt;/div&gt;
      {{/html}}
    )))
  #end
#end

#set ($customSearchFacetValuesDisplayer = {
  'type': 'type',
  'wiki': 'wiki',
  'locale': 'locale',
  'author': 'user',
  'creator': 'user',
  'attauthor': 'user',
  'date': 'date',
  'creationdate': 'date',
  'attdate': 'date',
  'attsize': 'size',
  'mimetype': 'mediaType'
})

#macro (displaySearchFacetValues $facetValues)
  #set ($displayer = $customSearchFacetValuesDisplayer.get($facetField.name))
  #if (!$displayer)
    #set ($displayer = 'default')
  #end
  #evaluate("${escapetool.h}displaySearchFacetValues_${displayer}(${escapetool.d}facetValues)")
#end

#macro (displaySearchFacetValues_default $facetValues $customQueryStringParameters)
  &lt;ul&gt;
    #displaySearchFacetValuesLimited($facetValues $customQueryStringParameters)
  &lt;/ul&gt;
#end

#macro (displaySearchFacetValuesLimited $facetValues $customQueryStringParameters)
  #set ($limitRequestParameter = "l_$facetField.name")
  #set ($limit = $mathtool.toInteger($request.getParameter($limitRequestParameter)))
  #if ("$!limit" == '')
    #set ($limit = $facetPaginationStep)
  #end
  #set ($limit = $mathtool.max($mathtool.min($limit, $facetValues.size()), 0))
  #foreach ($facetValue in $facetValues)
    #if ($foreach.index &lt; $limit)
      &lt;li&gt;#displaySearchFacetValue($facetValue $customQueryStringParameters)&lt;/li&gt;
    #else
      #extendQueryString($url {$limitRequestParameter: [$mathtool.add($limit, $facetPaginationStep)]})
      &lt;li&gt;&lt;a href="$url" class="more"&gt;&amp;hellip; $escapetool.xml($services.localization.render(
        'solr.facets.moreValues', [$mathtool.sub($facetValues.size(), $limit)]))&lt;/a&gt;&lt;/li&gt;
      #break
    #end
  #end
#end

#macro (displaySearchFacetValue $facetValue $customQueryStringParameters)
  #set ($selectedValues = [])
  #if ($facetRequestValues)
    #set ($discard = $selectedValues.addAll($facetRequestValues.subList(0, $facetRequestValues.size())))
  #end
  #set ($selected = $selectedValues.remove($facetValue.name))
  #if (!$selected)
    #set ($discard = $selectedValues.add($facetValue.name))
  #end
  ## Reset the pagination because the number of results can change when a facet is applied.
  #set ($queryStringParameters = {$facetRequestParameter: $selectedValues, 'firstIndex': []})
  #if ($customQueryStringParameters)
    #set ($discard = $queryStringParameters.putAll($customQueryStringParameters))
  #end
  #extendQueryString($url $queryStringParameters)
  &lt;div class="itemCount"&gt;$facetValue.count&lt;/div&gt;
  &lt;a href="$url" class="itemName#if ($selected) selected#end#if ($facetValue.name == '') empty#end"&gt;
    #if ($facetValue.name == '')
      #set ($facetPrettyValueKey = "solr.field.${facetField.name}.emptyValue")
      #if (!$services.localization.get($facetPrettyValueKey))
        #set ($facetPrettyValueKey = "solr.facets.emptyValue")
      #end
      #set ($facetPrettyValue = $services.localization.render($facetPrettyValueKey))
    #else
      #set ($facetPrettyValue = $facetValue.name)
    #end
    #set ($displayer = $customSearchFacetValueDisplayer.get($facetField.name))
    #if (!$displayer)
      #set ($displayer = 'default')
    #end
    #evaluate("${escapetool.h}displaySearchFacetValue_${displayer}(${escapetool.d}facetPrettyValue)")
  &lt;/a&gt;
  &lt;div class="clearfloats"&gt;&lt;/div&gt;
#end

#set ($customSearchFacetValueDisplayer = {
  'type': 'type',
  'wiki': 'wiki',
  'locale': 'locale',
  'author': 'user',
  'creator': 'user',
  'attauthor': 'user',
  'date': 'date',
  'creationdate': 'date',
  'attdate': 'date',
  'class': 'class',
  'attsize': 'size',
  'mimetype': 'mediaType'
})

#macro (displaySearchFacetValue_default $facetPrettyValue)
  $escapetool.xml($facetPrettyValue)
#end

#macro (displaySearchFacetValues_type $facetValues)
  ## We have to reset the sort when the result type selection changes because the sort fields depend on the selected
  ## result type.
  #displaySearchFacetValues_default($facetValues {'sort': [], 'sortOrder': []})
#end

#macro (displaySearchFacetValue_type $type)
  $escapetool.xml($services.localization.render("solr.filterBy.type.$type.toLowerCase()"))
#end

#macro (displaySearchFacetValues_wiki $facetValues)
  #set ($actualFacetValues = $facetValues)
  ## If the list of wikis that are searchable from the main wiki is restricted then we need to hide some values.
  #if ($wikisSearchableFromMainWiki &amp;&amp; $xcontext.isMainWiki() &amp;&amp; !$facetRequestValues)
    #set ($actualFacetValues = [])
    #foreach ($facetValue in $facetValues)
      #if ($wikisSearchableFromMainWiki.contains($facetValue.name))
        #set ($discard = $actualFacetValues.add($facetValue))
      #end
    #end
  #end
  ## We need to reset the sort because the available sort fields depend on the selected result type.
  #displaySearchFacetValues_default($actualFacetValues)
#end

#macro (displaySearchFacetValue_wiki $wikiName)
  #set ($wikiPrettyName = $services.wiki.getById($wikiName).prettyName)
  #if ("$!wikiPrettyName.trim()" == '')
    #set ($wikiPrettyName = $wikiName)
  #end
  $escapetool.xml($wikiPrettyName)
#end

#macro (displaySearchFacetValues_locale $facetValues)
  #set ($currentLocale = $services.localization.currentLocale)
  #displaySearchFacetValues_default($facetValues)
#end

#macro (displaySearchFacetValue_locale $facetPrettyValue)
  #if ($facetValue.name == $facetPrettyValue)
    #set ($locale = $services.localization.toLocale($facetValue.name))
    $escapetool.xml($locale.getDisplayName($currentLocale))
  #else
    $escapetool.xml($facetPrettyValue)
    #set ($hint = $escapetool.xml($services.localization.render('solr.field.locale.emptyValue.hint')))
    &lt;img src="$xwiki.getSkinFile('/icons/silk/information.png')" alt="$hint" title="$hint" class="icon" /&gt;
  #end
#end

#macro (displaySearchFacetValues_user $facetValues)
  #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/userpicker/userPicker.css', true))
  &lt;ul class="users"&gt;
    #displaySearchFacetValuesLimited($facetValues)
  &lt;/ul&gt;
#end

#macro (displaySearchFacetValue_user $user)
  #set ($userReference = $services.model.resolveDocument($user))
  ## The string returned by XWiki#getUserName() is XML encoded.
  #set ($userName = $xwiki.getUserName($user, false))
  &lt;span class="user"&gt;
    &lt;span class="user-avatar-wrapper"&gt;
      #getUserAvatarURL($userReference $avatarURL 30)
      &lt;img src="$escapetool.xml($avatarURL.url)" class="icon" alt="$userName" /&gt;
    &lt;/span&gt;
    &lt;span class="user-name"&gt;$userName&lt;/span&gt;
    &lt;span&gt;
      &lt;span class="user-alias"&gt;$escapetool.xml($userReference.name)&lt;/span&gt;
      ## Display the wiki only for local users.
      #if ($userReference.wikiReference.name != $xcontext.getMainWikiName())
        &lt;span class="user-wiki"&gt;$escapetool.xml($userReference.wikiReference.name)&lt;/span&gt;
      #end
    &lt;/span&gt;
  &lt;/span&gt;
#end

#macro (displaySearchFacetValues_date $facetValues)
  ##
  ## Build the list of date intervals.
  ##
  ## 1. Predefined date intervals.
  #set ($now = $xwiki.jodatime.dateTime)
  ## Solr indexes the dates in UTC timezone.
  #set ($utcTimezone = $xwiki.jodatime.getTimezone(0))
  #set ($now = $now.toDateTime($utcTimezone))
  #set ($intervals = [
    {
      'label': $services.localization.render('solr.facet.date.today'),
      'start': $now.withTimeAtStartOfDay(),
      'end'  : $now,
      'name' : '[NOW/DAY TO NOW]',
      'count': 0
    }, {
      'label': $services.localization.render('solr.facet.date.last7Days'),
      'start': $now.minusDays(7),
      'end'  : $now,
      'name' : '[NOW-7DAYS TO NOW]',
      'count': 0
    }, {
      'label': $services.localization.render('solr.facet.date.last30Days'),
      'start': $now.minusDays(30),
      'end'  : $now,
      'name' : '[NOW-30DAYS TO NOW]',
      'count': 0
    }
  ])
  ## 2. Date intervals specified on the request.
  #set ($iso8601Formatter = $xwiki.jodatime.getDateTimeFormatterForPattern($iso8601DateFormat))
  #set ($iso8601Formatter = $iso8601Formatter.withZone($utcTimezone))
  #if ($facetRequestValues)
    #set ($selectedIntervals = [])
    #foreach ($selectedValue in $facetRequestValues)
      ## Determine if the value/range is custom.
      #set ($custom = true)
      #foreach ($interval in $intervals)
        #if ($interval.name == $selectedValue)
          #set ($discard = $selectedIntervals.add($interval))
          #set ($custom = false)
          #break
        #end
      #end
      #if ($custom)
        #set ($rangeMatcher = $rangePattern.matcher($selectedValue))
        #if ($rangeMatcher.matches())
          #set ($range = [$rangeMatcher.group(1), $rangeMatcher.group(2)])
          #foreach ($point in $range)
            #if ($point == '*')
              #set ($point = $NULL)
            #else
              #set ($point = $iso8601Formatter.parseDateTime($point))
            #end
            #set ($discard = $range.set($foreach.index, $point))
          #end
          #set ($discard = $selectedIntervals.add({
            'start': $range.get(0),
            'end'  : $range.get(1),
            'name' : $selectedValue,
            'count': 0
          }))
        #end
      #end
    #end
    #set ($intervals = $selectedIntervals)
  #end
  ##
  ## Count matches for each date interval.
  ##
  #foreach ($facetValue in $facetValues)
    #set ($dateValue = $iso8601Formatter.parseDateTime($facetValue.name))
    #foreach ($interval in $intervals)
      #if ((!$interval.start || $dateValue.isAfter($interval.start))
          &amp;&amp; (!$interval.end || $dateValue.isBefore($interval.end)))
        #set ($discard = $interval.put('count', $mathtool.add($interval.count, $facetValue.count)))
      #end
    #end
  #end
  ## Filter the unselected date intervals that don't have matches.
  #if (!$facetRequestValues)
    #set ($intervalsWithMatches = [])
    #foreach ($interval in $intervals)
      #if ($interval.count &gt; 0)
        #set ($discard = $intervalsWithMatches.add($interval))
      #end
    #end
    #set ($intervals = $intervalsWithMatches)
  #end
  ##
  ## Display date intervals.
  ##
  &lt;ul&gt;
    #foreach ($facetValue in $intervals)
      &lt;li&gt;#displaySearchFacetValue($facetValue)&lt;/li&gt;
    #end
    #if (!$facetRequestValues)
      ## Allow users to specify a custom interval.
      &lt;li class="customDateInterval"&gt;
        #displaySearchFacetValue_customDateInterval()
      &lt;/li&gt;
    #end
  &lt;/ul&gt;
#end

#macro (displaySearchFacetValue_customDateInterval)
  ## A simple date picker widget.
  #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/datepicker/calendarDateSelect.css', true))
  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/datepicker/calendarDateSelect.js', true))
  ## Used to parse and serialize the selected date using the specified date format.
  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/datepicker/simpleDateFormat.js', true))
  ## A wrapper over the CalendarDateSelect widget that uses the SimpleDateFormat to parse/serialize the dates.
  #set ($discard = $xwiki.ssfx.use('uicomponents/widgets/datepicker/dateTimePicker.css', true))
  #set ($discard = $xwiki.jsfx.use('uicomponents/widgets/datepicker/dateTimePicker.js'))
  #set ($dateFormat = $xwiki.getXWikiPreference('dateformat', $defaultDateFormat))
  &lt;form action="$doc.getURL('get')"&gt;
    &lt;div class="hidden"&gt;
      ## Reset the pagination because the number of results can change when a facet is applied.
      #extendQueryString($url {
        $facetRequestParameter: ['[* TO *]'],
        'firstIndex': [],
        'timezoneOffset': []
      })
      &lt;input type="hidden" name="xredirect" value="$escapetool.xml($url)" /&gt;
      &lt;input type="hidden" name="facet" value="$escapetool.xml($facetRequestParameter)" /&gt;
    &lt;/div&gt;
    &lt;div class="itemName"&gt;$escapetool.xml($services.localization.render('solr.facet.date.customInterval'))&lt;/div&gt;
    &lt;dl&gt;
      &lt;dt class="hidden"&gt;
        &lt;label for="$escapetool.xml($facetRequestParameter)_startDate"&gt;
          $escapetool.xml($services.localization.render('solr.facet.date.start'))
        &lt;/label&gt;
      &lt;/dt&gt;
      &lt;dd&gt;
        &lt;input type="text" id="$escapetool.xml($facetRequestParameter)_startDate" name="startDate"
          value="$escapetool.xml($services.localization.render('solr.facet.date.start'))"
          class="datetime withTip" title="$escapetool.xml($dateFormat)" /&gt;
      &lt;/dd&gt;
      &lt;dt class="hidden"&gt;
        &lt;label for="$escapetool.xml($facetRequestParameter)_endDate"&gt;
          $escapetool.xml($services.localization.render('solr.facet.date.end'))
        &lt;/label&gt;
      &lt;/dt&gt;
      &lt;dd&gt;
        &lt;input type="text" id="$escapetool.xml($facetRequestParameter)_endDate" name="endDate"
          value="$escapetool.xml($services.localization.render('solr.facet.date.end'))"
          class="datetime withTip" title="$escapetool.xml($dateFormat)" /&gt;
      &lt;/dt&gt;
    &lt;/dl&gt;
    &lt;div&gt;
      &lt;span class="buttonwrapper"&gt;
        &lt;input type="submit" class="button" value="$escapetool.xml($services.localization.render(
          'solr.facet.date.applyCustomInterval'))" /&gt;
      &lt;/span&gt;
    &lt;/div&gt;
  &lt;/form&gt;
#end

#macro (displaySearchFacetValue_date $facetPrettyValue)
  #if ($facetValue.label)
    $escapetool.xml($facetValue.label)
  #elseif ($facetValue.start || $facetValue.end)
    ## Compute the client timezone.
    #set ($timezoneOffsetInMinutes = $mathtool.toInteger($request.timezoneOffset))
    #set ($offsetHours = $timezoneOffsetInMinutes / 60)
    #set ($offsetMinutes = $mathtool.abs($timezoneOffsetInMinutes) % 60)
    #set ($clientTimezone = $xwiki.jodatime.getTimezone($offsetHours, $offsetMinutes))
    ## Obtain a date printer.
    #set ($configuredDateFormat = $xwiki.getXWikiPreference('dateformat', $defaultDateFormat))
    #set ($datePrinter = $xwiki.jodatime.getDateTimeFormatterForPattern($configuredDateFormat))
    #set ($datePrinter = $datePrinter.withLocale($services.localization.currentLocale).withZone($clientTimezone))
    ## Display the custom interval.
    #if (!$facetValue.start)
      $escapetool.xml($services.localization.render('solr.facet.date.before',
        [$datePrinter.print($facetValue.end)]))
    #elseif (!$facetValue.end)
      $escapetool.xml($services.localization.render('solr.facet.date.after',
        [$datePrinter.print($facetValue.start)]))
    #else
      $services.localization.render('solr.facet.date.between',
        ["$datePrinter.print($facetValue.start)&lt;br/&gt;", $datePrinter.print($facetValue.end)])
    #end
  #else
    $escapetool.xml($services.localization.render('solr.facet.date.any'))
  #end
#end

#macro (displaySearchFacetValue_class $classFullName)
  #set ($classReference = $services.model.resolveDocument($classFullName, 'default'))
  #set ($hint = $services.localization.render('solr.field.class.definedBy',
    [$classReference.lastSpaceReference.name, $classReference.name]))
  #set ($classPrettyName = $stringtool.removeEnd($classReference.name, 'Class'))
  #set ($translationKey = "solr.field.class.$classPrettyName")
  #if ($services.localization.get($translationKey))
    #set ($classPrettyName = $services.localization.render('$translationKey'))
  #else
    ## Some of the default classes have names starting with 'XWiki'.
    #set ($classPrettyName = $stringtool.removeStart($classPrettyName, 'XWiki'))
    #set ($classPrettyName = $stringtool.join($stringtool.splitByCharacterTypeCamelCase($classPrettyName), ' '))
    ## Make sure we don't have isolated upper case letters.
    #set ($classPrettyName = $classPrettyName.replaceAll('(^| )([\p{Lu}]) ', '$1$2'))
  #end
  &lt;span title="$escapetool.xml($hint)"&gt;$escapetool.xml($classPrettyName)&lt;/span&gt;
#end

#macro (displaySearchFacetValues_size $facetValues)
  ##
  ## Predefined size intervals, specified in bytes.
  ##
  #set ($intervals = [
    {
      'id': 'tiny',
      'end': 10240
    }, {
      'id': 'small',
      'start': 10240,
      'end': 512000
    }, {
      'id': 'medium',
      'start': 512000,
      'end': 5242880
    }, {
      'id': 'large',
      'start': 5242880
    }
  ])
  #foreach ($interval in $intervals)
    #set ($start = $interval.start)
    #set ($end = $interval.end)
    #if (!$start)
      #set ($start = '*')
      #set ($hint = $services.localization.render('solr.facet.size.lessThan', ["#dynamicsize($end)"]))
    #elseif (!$end)
      #set ($end = '*')
      #set ($hint = $services.localization.render('solr.facet.size.moreThan', ["#dynamicsize($start)"]))
    #else
      #set ($hint = $services.localization.render('solr.facet.size.between', ["#dynamicsize($start)", "#dynamicsize($end)"]))
    #end
    #set ($discard = $interval.putAll({
      'label': $services.localization.render("solr.facet.size.$interval.id"),
      'hint': $hint,
      'name': "[$start TO $end]",
      'count': 0
    }))
  #end
  ##
  ## Add custom size intervals specified on the request.
  ##
  #foreach ($selectedValue in $facetRequestValues)
    ## Determine if the value/range is custom.
    #set ($custom = true)
    #foreach ($interval in $intervals)
      #if ($interval.name == $selectedValue)
        #set ($custom = false)
        #break
      #end
    #end
    #if ($custom)
      #set ($rangeMatcher = $rangePattern.matcher($selectedValue))
      #if ($rangeMatcher.matches())
        #set ($discard = $intervals.add({
          'start': $mathtool.toInteger($rangeMatcher.group(1)),
          'end'  : $mathtool.toInteger($rangeMatcher.group(2)),
          'name' : $selectedValue,
          'count': 0
        }))
      #end
    #end
  #end
  ##
  ## Count matches for each date interval.
  ##
  #foreach ($facetValue in $facetValues)
    #set ($size = $mathtool.toInteger($facetValue.name))
    #foreach ($interval in $intervals)
      #if ((!$interval.start || $interval.start &lt;= $size)
          &amp;&amp; (!$interval.end || $size &lt; $interval.end))
        #set ($discard = $interval.put('count', $mathtool.add($interval.count, $facetValue.count)))
      #end
    #end
  #end
  ## Filter the size intervals that don't have matches.
  #set ($intervalsWithMatches = [])
  #foreach ($interval in $intervals)
    #if ($interval.count &gt; 0 || $facetRequestValues.contains($interval.name))
      #set ($discard = $intervalsWithMatches.add($interval))
    #end
  #end
  ## Make sure we sort the intervals based on the number of matches.
  #set ($intervals = $sorttool.sort($intervalsWithMatches, 'count:desc'))
  ##
  ## Display the size intervals.
  ##
  &lt;ul&gt;
    #foreach ($facetValue in $intervals)
      &lt;li&gt;#displaySearchFacetValue($facetValue)&lt;/li&gt;
    #end
  &lt;/ul&gt;
#end

#macro (displaySearchFacetValue_size $sizeInterval)
  #if ($facetValue.label)
    &lt;span title="$escapetool.xml($facetValue.hint)"&gt;$escapetool.xml($facetValue.label)&lt;/span&gt;
  #elseif ($facetValue.start || $facetValue.end)
    ## Display the custom interval.
    #if (!$facetValue.start)
      $escapetool.xml($services.localization.render('solr.facet.size.lessThan',
        ["#dynamicsize($facetValue.end)"]))
    #elseif (!$facetValue.end)
      $escapetool.xml($services.localization.render('solr.facet.size.moreThan',
        ["#dynamicsize($facetValue.start)"]))
    #else
      $services.localization.render('solr.facet.size.between',
        ["#dynamicsize($facetValue.start)", "#dynamicsize($facetValue.end)"])
    #end
  #else
    $escapetool.xml($services.localization.render('solr.facet.size.any'))
  #end
#end

#macro (displaySearchFacetValues_mediaType $facetValues)
  #set ($categoryMap = {
    'text': ['text/', 'application/xml', 'application/javascript', 'application/ecmascript',
      'application/json', 'application/x-sh', '+xml'],
    'image': ['image/'],
    'office': ['application/pdf', 'application/postscript', 'application/msword', 'application/vnd.ms-',
      'application/vnd.oasis.opendocument.', 'application/vnd.openxmlformats-officedocument.'],
    'archive': ['application/zip', 'application/x-gzip', 'application/x-bzip', 'application/x-tar',
      'application/x-gtar', 'application/vnd.xara', '-archive', '-compressed', '-package', '+zip'],
    'audio': ['audio/'],
    'video': ['video/'],
    'font': ['application/font-', 'application/x-font-']
  })
  #groupMediaTypes($facetValues $categoryMap true)
  ## We also need to group some technical media types inside a category.
  #set ($subcategoryMap = {
    'office': {
      'word': ['application/msword', 'application/vnd.ms-word.', 'application/vnd.oasis.opendocument.text',
        'application/vnd.openxmlformats-officedocument.word'],
      'presentation': ['application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.presentation',
        'application/vnd.openxmlformats-officedocument.presentation'],
      'spreadsheet': ['application/vnd.ms-excel', 'application/vnd.oasis.opendocument.spreadsheet',
        'application/vnd.openxmlformats-officedocument.spreadsheet']
    }
  })
  #foreach ($facetValue in $facetValues)
    #set ($subcategories = $subcategoryMap.get($facetValue.id))
    #if ($subcategories)
      #groupMediaTypes($facetValue.mediaTypesWithCounts $subcategories)
      ## Update the list of media types to be able to unselect all subcategories when a category is selected.
      #set ($discard = $facetValue.mediaTypes.clear())
      #foreach ($mediaType in $facetValue.mediaTypesWithCounts)
        #set ($discard = $facetValue.mediaTypes.add($mediaType.name))
      #end
    #end
  #end
  #displayMediaTypesWithPagination($facetValues)
#end

#macro (groupMediaTypes $mediaTypes $groups $groupRemainingMediaTypes)
  #set ($matchedGroups = [])
  #set ($groupedMediaTypes = [])
  #foreach ($entry in $groups.entrySet())
    #set ($group = {
      'id': $entry.key,
      'count': 0,
      'mediaTypes': [],
      'mediaTypesWithCounts': []
    })
    #foreach ($mediaType in $mediaTypes)
      ## See if this media type is included in this group.
      #foreach ($pattern in $entry.value)
        #if ($mediaType.name == $pattern || $mediaType.name.startsWith($pattern) || $mediaType.name.endsWith($pattern))
          #set ($group.count = $group.count + $mediaType.count)
          #set ($discard = $group.mediaTypes.add($mediaType.name))
          #set ($discard = $group.mediaTypesWithCounts.add($mediaType))
          #set ($discard = $groupedMediaTypes.add($mediaType))
          #break
        #end
      #end
    #end
    #if ($group.count &gt; 0)
      ## Compute the filter value.
      #joinMediaTypes($entry.value $escapedFilterValue)
      #set ($discard = $group.put('name', $escapedFilterValue))
      #set ($discard = $matchedGroups.add($group))
    #end
  #end
  #set ($discard = $mediaTypes.removeAll($groupedMediaTypes))
  #if ($groupRemainingMediaTypes &amp;&amp; $mediaTypes.size() &gt; 0)
    #set ($other = {
      'id': 'other',
      'count': 0,
      'mediaTypes': [],
      'mediaTypesWithCounts': []
    })
    #set ($discard = $other.mediaTypesWithCounts.addAll($mediaTypes))
    #foreach ($mediaType in $mediaTypes)
      #set ($other.count = $other.count + $mediaType.count)
      #set ($discard = $other.mediaTypes.add($mediaType.name))
    #end
    #joinMediaTypes($other.mediaTypes $escapedFilterValue)
    #set ($discard = $other.put('name', $escapedFilterValue))
    #set ($discard = $mediaTypes.clear())
    #set ($discard = $mediaTypes.add($other))
  #end
  #set ($discard = $mediaTypes.addAll($matchedGroups))
  ## Sort the media type groups based on the number of matches.
  ## Note that the sort tool doesn't change the passed list.
  #set ($sortedMediaTypes = $sorttool.sort($mediaTypes, 'count:desc'))
  #set ($discard = $mediaTypes.clear())
  #set ($discard = $mediaTypes.addAll($sortedMediaTypes))
#end

#macro (joinMediaTypes $mediaTypes $return)
  #set ($escapedMediaTypes = [])
  #foreach ($mediaType in $mediaTypes)
    ## Escape the characters that have special meaning in the filter query.
    #set ($escapedMediaType = $mediaType.replaceAll('([/.+\-])', '\\$1'))
    #if ($mediaType.indexOf('/') &gt; 0)
      ## Prefix.
      #set ($escapedMediaType = "$escapedMediaType*")
    #else
      ## Suffix.
      #set ($escapedMediaType = "*$escapedMediaType")
    #end
    #set ($discard = $escapedMediaTypes.add($escapedMediaType))
  #end
  #set ($return = $NULL)
  #setVariable("$return" "($stringtool.join($escapedMediaTypes, ' '))")
#end

#macro (displayMediaTypesWithPagination $categories)
  #set ($limitRequestParameter = "l_$facetField.name")
  #set ($categoryLimit = $mathtool.toInteger($request.getParameter($limitRequestParameter)))
  #if ("$!categoryLimit" == '')
    #set ($categoryLimit = $facetPaginationStep)
  #end
  #set ($categoryLimit = $mathtool.max($mathtool.min($categoryLimit, $categories.size()), 0))
  &lt;ul class="mediaTypes"&gt;
    #foreach ($category in $categories)
      #if ($foreach.index &lt; $categoryLimit)
        &lt;li&gt;
          ## Backup the selected values to be able to restore them afterwards.
          #set ($facetRequestValuesBackup = $facetRequestValues)
          ## When an entire category is selected we need to remove the values that were selected from that category.
          #set ($facetRequestValues = [])
          #if ($facetRequestValuesBackup)
            #set ($discard = $facetRequestValues.addAll($facetRequestValuesBackup.subList(0,
              $facetRequestValuesBackup.size())))
            #set ($discard = $facetRequestValues.removeAll($category.mediaTypes))
          #end
          &lt;div class="mediaTypeCategory"&gt;#displaySearchFacetValue($category)&lt;/div&gt;
          ## When a media type is selected, it's category should be unselected.
          #set ($facetRequestValues = [])
          #if ($facetRequestValuesBackup)
            #set ($discard = $facetRequestValues.addAll($facetRequestValuesBackup.subList(0,
              $facetRequestValuesBackup.size())))
            #set ($discard = $facetRequestValues.remove($category.name))
          #end
          &lt;ul&gt;#displaySearchFacetValuesLimited($category.mediaTypesWithCounts)&lt;/ul&gt;
          ## Restore the selected values.
          #set ($facetRequestValues = $facetRequestValuesBackup)
        &lt;/li&gt;
      #else
        #extendQueryString($url {$limitRequestParameter: [$mathtool.add($categoryLimit, $facetPaginationStep)]})
        &lt;li&gt;&lt;a href="$url" class="more"&gt;&amp;hellip; $escapetool.xml($services.localization.render(
          'solr.facets.moreValues', [$mathtool.sub($categories.size(), $categoryLimit)]))&lt;/a&gt;&lt;/li&gt;
        #break
      #end
    #end
  &lt;/ul&gt;
#end

#macro (displaySearchFacetValue_mediaType $mediaType)
  #if ($facetValue.id)
    ## A media type category.
    $services.localization.render("solr.filterBy.fileType.$facetValue.id")
  #else
    #set ($prettyName = $stringtool.substringAfter($mediaType, '/'))
    ## Fonts have a dedicated category so we can remove the 'x-font-' prefix.
    #set ($prettyName = $stringtool.removeStart($prettyName, 'x-font-'))
    ## Non-standard media type, i.e. not registered with the Internet Assigned Numbers Authority (IANA).
    #set ($prettyName = $stringtool.removeStart($prettyName, 'x-'))
    ## Vendor specific media type.
    #set ($prettyName = $stringtool.removeStart($prettyName, 'vnd.'))
    ## Many media types end with '+xml' or something similar. Let's remove this part.
    #set ($prettyName = $stringtool.substringBeforeLast($prettyName, '+'))
    ## Attempt to translate the pretty name.
    #set ($translationKey = "solr.facet.fileType.${category.id}.$prettyName")
    #if ($services.localization.get($translationKey))
      #set ($prettyName = $services.localization.render($translationKey))
    #elseif ($prettyName.length() &lt; 5)
      ## Probably a file extension (or acronym).
      #set ($prettyName = $prettyName.toUpperCase())
    #end
    &lt;span title="$mediaType"&gt;$prettyName&lt;/span&gt;
  #end
#end

#macro (displaySearchResultsSort)
  #set ($defaultSortOrderByEntityType = {
    'DOCUMENT': {
      'score': 'desc',
      'title_sort': 'asc',
      'date': 'desc',
      'author_display_sort': 'asc'
    },
    'ATTACHMENT': {
      'score': 'desc',
      'filename_sort': 'asc',
      'attsize_sort': 'asc',
      'attdate_sort': 'desc',
      'attauthor_display_sort': 'asc'
    }
  })
  #set ($defaultSortOrder = $defaultSortOrderByEntityType.get($type))
  #if (!$defaultSortOrder)
    #set ($defaultSortOrder = {'score': 'desc'})
  #end
  #set ($sortOrderSymbol = {
    'asc': "\u25B2",
    'desc': "\u25BC"
  })
  (% class="search-results-sort" %)
  * {{translation key="solr.sortBy"/}}
  #foreach ($entry in $defaultSortOrder.entrySet())
    #set ($class = 'sort-item')
    #set ($sortOrderIndicator = $NULL)
    #set ($targetSortOrder = $entry.value)
    #if ($sort == $entry.key)
      #set ($class = "$class active")
      #set ($sortOrderHint = $services.localization.render("solr.sortOrder.$sortOrder"))
      #set ($sortOrderIndicator = "(% class=""sort-item-order"" title=""$sortOrderHint"" %)$sortOrderSymbol.get($sortOrder)(%%)")
      #set ($targetSortOrder = "#if ($sortOrder == 'asc')desc#{else}asc#end")
    #end
    #extendQueryString($url {'sort': [$entry.key], 'sortOrder': [$targetSortOrder]})
    * [[{{translation key="solr.sortBy.$entry.key"/}}$!sortOrderIndicator&gt;&gt;path:$url||class="$class"]]
  #end
#end

#macro (extendQueryString $url $extraParameters)
  #set ($parameters = {})
  #set ($discard = $parameters.putAll($request.getParameterMap()))
  #set ($discard = $parameters.putAll($extraParameters))
  #set ($queryString = $escapetool.url($parameters))
  #set ($url = $NULL)
  #setVariable("$url" $doc.getURL('view', $queryString))
#end

#macro (displaySearchResults)
  #set ($results = $searchResponse.results)
  #set ($paginationParameters = {
    'url': $doc.getURL('view', "$!request.queryString.replaceAll('firstIndex=[0-9]*', '')"),
    'totalItems': $results.numFound,
    'defaultItemsPerPage': $rows,
    'position': 'top'
  })
  {{html}}#pagination($paginationParameters){{/html}}
  (% class="search-results" %)(((
    #foreach ($searchResult in $results)
      #displaySearchResult($searchResult)
    #end
  )))
  #set ($discard = $paginationParameters.put('position', 'bottom'))
  {{html}}#pagination($paginationParameters){{/html}}

  #displayRSSLink()
#end

#macro (displayRSSLink)
  {{html}}
  #set ($parameters = {})
  ## We keep most of the current request parameters so that the RSS feed matches the current search query and filters.
  #set ($discard = $parameters.putAll($request.getParameterMap()))
  ## The feed will provide the most recent results that match the search query and filters.
  #set ($discard = $parameters.put('sort', 'date'))
  #set ($discard = $parameters.put('sortOrder', 'desc'))
  ## Reset the pagination so that only the top results are included.
  #set ($discard = $parameters.remove('firstIndex'))
  ## Add the parameters required to output the RSS feed instead of the search UI.
  #set ($discard = $parameters.put('outputSyntax', 'plain'))
  #set ($discard = $parameters.put('media', 'rss'))
  &lt;a href="$doc.getURL('get', $escapetool.url($parameters))" class="hasIcon iconRSS"&gt;
    $services.localization.render('search.rss', ["[$escapetool.xml($text)]"])
  &lt;/a&gt;
  {{/html}}
#end

#macro (displaySearchResult $searchResult)
  #set ($searchResultDocumentReference = $services.model.createDocumentReference($searchResult.wiki,
    $searchResult.space, $searchResult.name))
  #set ($searchResultDocument = $xwiki.getDocument($searchResultDocumentReference))
  (% class="search-result type-$searchResult.type.toLowerCase()" %)(((
    ## We use the HTML macro here mainly because we don't have a way to escape the wiki syntax in the data provided by the user.
    {{html}}
    #evaluate("${escapetool.h}displaySearchResult_$searchResult.type.toLowerCase()(${escapetool.d}searchResult)")
    #displaySearchResultHighlighting($searchResult)
    {{/html}}
    #if ($debug)

      ## Scoring debug data.
      ## The reason we used a separate HTML block with no cleaning is because the scoring debug data may contain some
      ## characters that are considered invalid by JDOM library which is used for parsing the HTML when cleaning is on.
      ## E.g. "0x0 is not a legal XML character" (org.jdom.IllegalDataException).
      {{html clean="false"}}
      &lt;div class="search-result-debug"&gt;$!escapetool.xml($searchResponse.explainMap.get($searchResult.id))&lt;/div&gt;
      {{/html}}
    #end
  )))
#end

#macro (displaySearchResult_document $searchResult)
  #set ($searchResultTranslatedDocument = $searchResultDocument.getTranslatedDocument($searchResult.locale))
  #displaySearchResultTitle()
  #displaySearchResultLocation()
  &lt;div class="search-result-author"&gt;
    $services.localization.render('core.footer.modification', [
      $xwiki.getUserName($searchResultTranslatedDocument.author),
      $xwiki.formatDate($searchResultTranslatedDocument.date)
    ])
  &lt;/div&gt;
#end

#macro (displaySearchResult_attachment $searchResult)
  &lt;h2 class="search-result-title"&gt;
    #set ($fileName = $searchResult.filename.get(0))
    #set ($attachmentURL = $searchResultDocument.getAttachmentURL($fileName))
    #set ($downloadHint = $services.localization.render('core.viewers.attachments.download'))
    &lt;a href="$attachmentURL" title="$escapetool.xml($downloadHint)"&gt;$escapetool.xml($fileName)&lt;/a&gt;
    #set ($attachmentHistoryURL = $searchResultDocument.getAttachmentURL($fileName, 'viewattachrev'))
    #set ($historyHint = $services.localization.render('core.viewers.attachments.showHistory'))
    &lt;a href="$attachmentHistoryURL" title="$escapetool.xml($historyHint)" class="search-result-version"&gt;
      $escapetool.xml($searchResult.attversion)
    &lt;/a&gt;
  &lt;/h2&gt;
  #displaySearchResultLocation($searchResult)
  &lt;div class="search-result-uploader"&gt;
    #set ($uploader = $xwiki.getUserName($searchResult.attauthor.get(0)))
    #set ($uploadDate = $xwiki.formatDate($searchResult.attdate.get(0)))
    #set ($fileSize = "#dynamicsize($searchResult.attsize.get(0))")
    $services.localization.render('solr.result.uploadedBy', [$uploader, $uploadDate, $fileSize])
  &lt;/div&gt;
  &lt;div class="search-result-mediaType"&gt;$services.localization.render('solr.result.mediaType',
    [$escapetool.xml($searchResult.mimetype.get(0))])&lt;/div&gt;
#end

#macro (displaySearchResult_object $searchResult)
  &lt;h2 class="search-result-title"&gt;
    #displaySearchResultXClassLink($searchResult)
  &lt;/h2&gt;
  #displaySearchResultLocation($searchResult)
#end

#macro (displaySearchResult_object_property $searchResult)
  &lt;h2 class="search-result-title"&gt;
    #displaySearchResultXClassLink($searchResult)^$searchResult.propertyname
  &lt;/h2&gt;
  #displaySearchResultLocation($searchResult)
#end

#macro (displaySearchResultXClassLink $searchResult)
  #set ($classFullName = $searchResult.get('class').get(0))
  #set ($classReference = $services.model.resolveDocument($classFullName,
    $services.model.createWikiReference($searchResult.wiki)))
  &lt;a href="$xwiki.getURL($classReference)"&gt;$escapetool.xml($classFullName)&lt;/a&gt;##
#end

#macro (displaySearchResultTitle)
  #set ($showLocale = $searchResult.locale != '' &amp;&amp; $searchResult.locale != $xcontext.language)
  #set ($titleURL = $searchResultDocument.getURL())
  #if ($showLocale)
    #set ($titleURL = $searchResultDocument.getURL('view', "language=$searchResult.locale"))
  #end
  &lt;h2 class="search-result-title"&gt;
    &lt;a href="$titleURL"&gt;$escapetool.xml($searchResultTranslatedDocument.plainTitle)&lt;/a&gt;
    #if ($showLocale)
      &lt;span title="$escapetool.xml($services.localization.render('solr.result.language'))"
        class="search-result-language" &gt;($escapetool.xml($searchResult.locale))&lt;/span&gt;
    #end
  &lt;/h2&gt;
#end

#macro (displaySearchResultLocation $searchResult)
  #set ($wikiPrettyName = $services.wiki.getById($searchResult.wiki).prettyName)
  #if ("$!wikiPrettyName.trim()" == '')
    #set ($wikiPrettyName = $searchResult.wiki)
  #end
  #set ($wikiReference = $services.model.createWikiReference($searchResult.wiki))
  #set ($wikiHomeDocRef = $services.model.resolveDocument('', 'default', $wikiReference))
  #set ($wikiLink = "&lt;a href=""$xwiki.getURL($wikiHomeDocRef)""&gt;$escapetool.xml($wikiPrettyName)&lt;/a&gt;")
  ##
  #set ($spaceReference = $services.model.createSpaceReference($searchResult.space, $wikiReference))
  #set ($spaceHomeDocRef = $services.model.resolveDocument('', 'default', $spaceReference))
  #set ($spaceLink = "&lt;a href=""$xwiki.getURL($spaceHomeDocRef)""&gt;$escapetool.xml($searchResult.space)&lt;/a&gt;")
  ##
  #set ($documentLink = "&lt;a href=""$searchResultDocument.getURL()""&gt;$escapetool.xml($searchResult.name)&lt;/a&gt;")
  &lt;div class="search-result-location"&gt;$services.localization.render('solr.result.location',
    [$wikiLink, $spaceLink, $documentLink])&lt;/div&gt;
#end

#macro (displaySearchResultHighlighting $searchResult)
  #getSearchResultHighlighting($searchResult $highlighting)
  #if ($highlighting.size() &gt; 0)
    &lt;dl class="search-result-highlights"&gt;
      #foreach ($entry in $highlighting)
        &lt;dt&gt;
          #if ($services.localization.get("solr.field.$entry.field"))
            $services.localization.render("solr.field.$entry.field")
          #else
            $entry.field
          #end
        &lt;/dt&gt;
        &lt;dd&gt;#displaySearchResultMatches($entry.matches)&lt;/dd&gt;
      #end
    &lt;/dl&gt;
  #end
#end

#macro (displaySearchResultMatches $matches)
  #foreach ($match in $matches)
    #if ($foreach.count &gt; 1)
      &lt;span class="separator"&gt;&amp;hellip;&lt;/span&gt;
    #end
    &lt;blockquote class="search-result-highlight"&gt;$match&lt;/blockquote&gt;
  #end
#end

#macro (getSearchResultHighlighting $searchResult $return)
  #set ($highlighting = $searchResponse.highlighting.get($searchResult.id))
  #set ($highlightingByLanguage = {})
  #foreach ($entry in $highlighting.entrySet())
    ## Remove the language suffix (e.g. _en, _fr, _de) from the field name.
    #set ($field = $stringtool.substringBefore($entry.key, '_'))
    ## Extract the language.
    #set ($language = $stringtool.substringAfter($entry.key, '_'))
    #if ($language == $field)
      ## No language.
      #set ($language = '_')
    #end
    #set ($matchesByLanguage = $highlightingByLanguage.get($field))
    #if (!$matchesByLanguage)
      #set ($matchesByLanguage = {})
      #set ($discard = $highlightingByLanguage.put($field, $matchesByLanguage))
    #end
    #set ($discard = $matchesByLanguage.put($language, $entry.value))
  #end
  ## Keep only the matches correspoding to the search result locale.
  #set ($highlighting = [])
  ## Fields with a higher index will be displayed first. Fields that are not included will be displayed at the end.
  #set ($fieldPriority = ['filename', 'attcontent', 'objcontent', 'comment', 'propertyname', 'propertyvalue', 'title', 'doccontent'])
  #foreach ($entry in $highlightingByLanguage.entrySet())
    #if ($searchResult.locale != '')
      #set ($matches = $entry.value.get($searchResult.locale))
    #else
      ## No language.
      #set ($matches = $entry.value.get('_'))
    #end
    #if (!$matches)
      ## This should not happen but let's play safe.
      #set ($matches = $entry.value.entrySet().iterator().next().value)
    #end
    ## Sanitize the matches.
    #foreach ($match in $matches)
      #set ($match = $match.replace('&lt;span class="search-text-highlight"&gt;', "\u0011"))
      #set ($match = $match.replace('&lt;span class="search-text-highlight-stop"&gt;&lt;/span&gt;&lt;/span&gt;', "\u0013"))
      #set ($match = $escapetool.xml($match))
      #set ($match = $match.replace("\u0011", '&lt;span class="search-text-highlight"&gt;'))
      #set ($match = $match.replace("\u0013", '&lt;/span&gt;'))
      #set ($discard = $matches.set($mathtool.sub($foreach.count, 1), $match))
    #end
    #set ($discard = $highlighting.add({
      'field': $entry.key,
      'priority': $fieldPriority.indexOf($entry.key),
      'matches': $matches
    }))
  #end
  #set ($highlighting = $sorttool.sort($highlighting, 'priority:desc'))
  #set ($return = $NULL)
  #setVariable("$return" $highlighting)
#end

#macro (getSearchResults)
  #set ($queryString = "$!{text}")
  ##
  ## Create the query and set the query string.
  #set ($query = $services.query.createQuery($queryString, 'solr'))
  ##
  ## Set query parameters.
  #set ($discard = $query.setLimit($rows))
  #set ($discard = $query.setOffset($start))
  #set ($discard = $query.bindValue('sort', "${sort} ${sortOrder}"))
  #setSupportedLocales($query)
  #setQueryFields($query)
  #setFacetFields($query)
  #setFilterQuery($query)
  #if ($debug)
    #set ($discard = $query.bindValue('debugQuery', 'on'))
  #end
  ##
  ## Execute the query.
  #set ($searchResponse = $query.execute()[0])
#end

#**
 * We have to set the list of supported locales so the names of the fields that are indexed in multiple languages are
 * expanded in the search query. For instance, the query "title:text" will be expanded to "title__:text OR
 * title_en:text OR title_fr:text" if the list of supported locales is [en, fr].
 *#
#macro (setSupportedLocales $query)
  #set ($supportedLanguagesRaw = $xwiki.getXWikiPreference('languages').split('[, |]'))
  #set ($supportedLanguages = [])
  #foreach ($supportedLanguage in $supportedLanguagesRaw)
    #if ($supportedLanguage.trim() != '')
      #set ($discard = $supportedLanguages.add($supportedLanguage))
    #end
  #end
  ## Make sure the default language is included.
  #set ($defaultLanguage = $xwiki.getXWikiPreference('default_language', 'en'))
  #if (!$supportedLanguages.contains($defaultLanguage))
    #set ($discard = $supportedLanguages.add($defaultLanguage))
  #end
  #set ($discard = $query.bindValue('xwiki.supportedLocales', $stringtool.join($supportedLanguages, ',')))
#end

#macro (setQueryFields $query)
  ## Specify which index fields are matched when a free text search is performed.
  #set ($defaultBoost = {
    'DOCUMENT': 'title^10.0 name^10.0
                 doccontent^2.0
                 objcontent^0.4 filename^0.4 attcontent^0.4 doccontentraw^0.4
                 author_display^0.08 creator_display^0.08
                 comment^0.016 attauthor_display^0.016 space^0.016',
    'ATTACHMENT': 'filename^5.0 attcontent attauthor_display^0.2',
    'OBJECT': 'objcontent',
    'OBJECT_PROPERTY': 'propertyvalue'
  })
  #if ($boost == '')
    #set ($boost = $defaultBoost.get($type))
  #end
  #if ("$!boost" != '')
    #set ($discard = $query.bindValue('qf', $boost))
  #end
#end

#macro (setFacetFields $query)
  ## The facets are displayed in this order so keep the most important facets first.
  #set ($facetFields = ['type', 'wiki', 'space_exact', 'locale', 'author', 'creator', 'date',
    'creationdate', 'class', 'name_exact', 'mimetype', 'attauthor', 'attdate', 'attsize'])
  ## In order to support multi-select faceting we need to exclude the corresponding filters when faceting.
  ## See http://wiki.apache.org/solr/SimpleFacetParameters#Multi-Select_Faceting_and_LocalParams
  #set ($facetFieldsWithFilterExcludes = [])
  ## Not all facets support multiple selection:
  ## * we use different query fields for different result types so the number of matches for the type facet changes when
  ##   a result type is selected/unselected.
  ## * date facets have ranges that intersect and so multiple selection doesn't make sense
  ##   (e.g. 'Today' is included in 'Last 7 days' so it doesn't make sense to select both)
  #set ($facetFieldsWithSingleSelection = ['type', 'date', 'creationdate', 'attdate'])
  #foreach ($facet in $facetFields)
    #set ($excludeTaggedFilter = '')
    #if (!$facetFieldsWithSingleSelection.contains($facet))
      #set ($excludeTaggedFilter = "{!ex=$facet}")
    #end
    #set ($discard = $facetFieldsWithFilterExcludes.add("$excludeTaggedFilter$facet"))
  #end
  #set ($discard = $query.bindValue('facet.field', $facetFieldsWithFilterExcludes))
#end

#macro (setFilterQuery $query)
  ##
  ## Collect the query filters.
  ## Filter the search results based on the current language. The following results are kept:
  ## * the translations in the current language, for those entities that support translations (e.g. a document
  ##     translation in the current language)
  ## * the translations in the supported/available languages, for those entities whose default language is the
  ##     current language (e.g. if a document has French as default language and the list of supported languages
  ##     is ['en', 'fr', 'ro'] then English an Romanian translations are included if they exist and the current
  ##     language is French)
  ## * the entities that don't support translations (attachments, objects) but which are bound to an entity
  ##     (document) whose default language is the current language
  ## * the entities that don't have a language set (e.g. documents that are translated with translation keys)
  #set ($filters = {'locales': [$xcontext.language]})
  #if (!$xcontext.isMainWiki())
    ## Subwikis search by default in their content only.
    #set ($discard = $filters.put('wiki', [$xcontext.database]))
  #elseif ($wikisSearchableFromMainWiki)
    ## The list of wikis that are searched by default can be configured.
    #set ($discard = $filters.put('wiki', $wikisSearchableFromMainWiki))
  #end
  #if ($xwiki.getUserPreference('displayHiddenDocuments') != 1)
    #set ($discard = $filters.put('hidden', [false]))
  #end
  ## Add the facets.
  #foreach ($parameter in $request.parameterMap.entrySet())
    #if ($parameter.key.startsWith('f_'))
      #set ($escapedValues = [])
      #foreach ($value in $parameter.value)
        #set ($discard = $escapedValues.add("#escapeFilterValue($value)"))
      #end
      #set ($discard = $filters.put($parameter.key.substring(2), $escapedValues))
    #end
  #end
  ##
  ## Build the filter query.
  #set ($filterQuery = [])
  #foreach ($filter in $filters.entrySet())
    ## Use OR between different values of the same filter/facet.
    ## Tag the filter so that we can exclude it when faceting in order to support multi-select faceting.
    #set ($discard = $filterQuery.add("{!tag=$filter.key}$filter.key:($!stringtool.join($filter.value, ' OR '))"))
  #end
  #set ($discard = $query.bindValue('fq', $filterQuery))
#end

#macro (escapeFilterValue $value)
## Check if the given value is a range.
#if ($rangePattern.matcher($value).matches() || $wildcardPattern.matcher($value).matches())##
$value##
#else##
"$stringtool.replaceEach($value, ['\', '"'], ['\\', '\"'])"##
#end##
#end

#macro (processRequestParameters)
  #set ($text = "$!request.text")
  #set ($boost = "$!request.boost")
  #set ($debug = "$!request.debug" != '')
  ##
  ## Pagination
  #set ($rows = $numbertool.integer($request.rows))
  #if ("$!rows" == '')
    #set ($rows = 10)
  #end
  #set ($start = $numbertool.integer($request.firstIndex))
  #if ("$!start" == '')
    #set ($start = 0)
  #end
  ##
  ## Sort
  #set ($sort = $request.sort)
  #if ("$!sort" == '')
    #set ($sort = 'score')
  #end
  #set ($sortOrder = $request.sortOrder)
  #if ("$!sortOrder" == '')
    #set ($sortOrder = 'desc')
  #elseif ($sortOrder != 'desc')
    #set ($sortOrder = 'asc')
  #end
  ##
  ## Result type
  ## We store the selected result type because we need it to decide what search and sort fields to use.
  #set ($type = $request.getParameterValues('f_type'))
  #if ($type &amp;&amp; $type.size() == 1)
    #set ($type = $type.get(0))
  #end
#end

#macro (displaySearchUI)
  #set ($discard = $xwiki.ssx.use('Main.SolrSearch'))
  #set ($discard = $xwiki.jsx.use('Main.SolrSearch'))
  ## Disable the document extra data: comments, attachments, history...
  #set ($docextras = [])
  #processRequestParameters()
  (% class="search-form-container" %)(((
    #displaySearchForm()
  )))
  #if ($text != '')
    #getSearchResults()
    #if ($debug)
      #displaySearchDebugInfo()
    #end
    (% class="search-results-container" %)(((
      #displaySearchFacets($searchResponse)
      (% class="search-results-left" %)(((
        #displaySearchResultsSort()

        #displaySearchResults()
      )))
    )))
  #end
#end

#macro (convertDateFormat $dateString $inputFormat $dateParser $datePrinter $return)
  ## We don't use the given date parser directly because it can throw IllegalArgumentException.
  #set ($date = $datetool.toDate($inputFormat, $dateString, $services.localization.currentLocale))
  #if ($date)
    #set ($date = $datePrinter.print($dateParser.parseDateTime($dateString)))
  #else
    #set ($date = '*')
  #end
  #set ($return = $NULL)
  #setVariable("$return" $date)
#end

#macro (handleCustomDateInterval)
  ## Compute the client timezone.
  #set ($timezoneOffsetInMinutes = $mathtool.toInteger($request.timezoneOffset))
  #set ($offsetHours = $timezoneOffsetInMinutes / 60)
  #set ($offsetMinutes = $mathtool.abs($timezoneOffsetInMinutes) % 60)
  #set ($clientTimezone = $xwiki.jodatime.getTimezone($offsetHours, $offsetMinutes))
  ## Obtain a date parser.
  #set ($configuredDateFormat = $xwiki.getXWikiPreference('dateformat', $defaultDateFormat))
  #set ($dateParser = $xwiki.jodatime.getDateTimeFormatterForPattern($configuredDateFormat))
  #set ($dateParser = $dateParser.withLocale($services.localization.currentLocale).withZone($clientTimezone))
  ## Obtain a date printer (Solr indexes the dates in ISO8601 format with UTC timezone).
  #set ($datePrinter = $xwiki.jodatime.getDateTimeFormatterForPattern($iso8601DateFormat))
  #set ($utcTimezone = $xwiki.jodatime.getTimezone(0))
  #set ($datePrinter = $datePrinter.withZone($utcTimezone))
  ## Convert the given dates.
  #convertDateFormat($request.startDate $configuredDateFormat $dateParser $datePrinter $startDate)
  #convertDateFormat($request.endDate $configuredDateFormat $dateParser $datePrinter $endDate)
  #set ($interval = "[$startDate TO $endDate]")
  #set ($xredirect = $request.xredirect.replaceFirst(
    "\b$regextool.quote($escapetool.url($request.facet))=[^&amp;$escapetool.d]*",
    $escapetool.url({
      $request.facet: $interval,
      'timezoneOffset': $request.timezoneOffset
    })))
  $response.sendRedirect($xredirect)
#end

#macro (outputRSSFeed)
  ##
  ## Get the search results.
  ##
  #processRequestParameters()
  #getSearchResults()
  #set ($list = [])
  #set ($results = $searchResponse.results)
  #foreach ($searchResult in $results)
    #set ($searchResultDocumentReference = $services.model.createDocumentReference(
      $searchResult.wiki, $searchResult.space, $searchResult.name))
    #set ($discard = $list.add("$searchResultDocumentReference"))
  #end
  ##
  ## Compute the feed URI.
  ##
  #set ($parameters = {})
  #set ($discard = $parameters.putAll($request.getParameterMap()))
  #set ($discard = $parameters.remove('outputSyntax'))
  #set ($discard = $parameters.remove('media'))
  #set ($feedURI = $doc.getExternalURL('view', $escapetool.url($parameters)))
  ##
  ## Configure the feed.
  ##
  #set ($feed = $xwiki.feed.getDocumentFeed($list, {}))
  #set ($discard = $feed.setLink($feedURI))
  #set ($discard = $feed.setUri($feedURI))
  #set ($discard = $feed.setAuthor('XWiki'))
  #set ($title = $services.localization.render('search.rss', ["[$text]"]))
  #set ($discard = $feed.setTitle($title))
  #set ($discard = $feed.setDescription($title))
  #set ($discard = $feed.setLanguage($xcontext.language))
  #set ($discard = $feed.setCopyright($xwiki.getXWikiPreference('copyright')))
  ##
  ## Output the feed.
  ##
  #set ($discard = $response.setContentType('application/rss+xml'))
  $xwiki.feed.getFeedOutput($feed, 'rss_2.0')
#end
{{/velocity}}

{{velocity}}
#if ($request.media == 'rss')
  #outputRSSFeed()
#elseif ($xcontext.action == 'get' &amp;&amp; "$!request.facet" != '' &amp;&amp; ($request.startDate || $request.endDate))
  #handleCustomDateInterval()
#elseif ("$!request.r" == '1')
  #displaySearchUI()
#else
  ## Redirect using the default search filters
  #extendQueryString($url {
    'r': 1,
    'f_type': 'DOCUMENT'
  })
  $response.sendRedirect($url)
#end
{{/velocity}}</content>
  <attachment>
    <filename>dark-grey-disclosure-arrow-down.png</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1368007370000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAAJUlEQVQIW2OIjIz8jwszAAkGbBJAwACTZECXAEuCCGQFMAkQBgCrMjrDUR6EaAAAAABJRU5ErkJggg==</content>
    <filesize>94</filesize>
  </attachment>
  <attachment>
    <filename>dark-grey-disclosure-arrow-left.png</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1368432948000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAQAAACFbCRbAAAAJ0lEQVQI1y3GMQEAIAwDsGy4RCCiMDOOciU1Nsy6MHSgA33qh7RJH1DfCDMFeFsmAAAAAElFTkSuQmCC</content>
    <filesize>96</filesize>
  </attachment>
  <attachment>
    <filename>light-grey-disclosure-arrow-down.png</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1368007370000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAAcAAAAECAYAAABCxiV9AAAAJElEQVQIW2M4c+bMf1yY4f///wzYJEDiYEl0BTAxuCRMATIfAOkKWg0ssytEAAAAAElFTkSuQmCC</content>
    <filesize>93</filesize>
  </attachment>
  <attachment>
    <filename>light-grey-disclosure-arrow-left.png</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1389774699000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAAAQAAAAHCAQAAACFbCRbAAAAJUlEQVQI1zXKsQ0AIADDMLf//8ZJMFRMzpAc4HbQQQeVH5abwwPlkgTcUkPn+AAAAABJRU5ErkJggg==</content>
    <filesize>94</filesize>
  </attachment>
  <object>
    <name>Main.SolrSearch</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0e4d1f86-8a36-4c04-9cd6-4a5988f42bc1</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>(function () {
  var SearchFacetsBehavior = Class.create({
    initialize: function(container) {
      this.container = container;

      // Add the global Expand/Collapse toggle.
      this.globalToggle = new Element('a', {href: '#', style: 'float:right'});
      this.globalToggle.observe('click', this._onGlobalToggle.bindAsEventListener(this));
      var clearFloats = new Element('span', {'class': 'clearfloats'});
      this.container.down('.search-facets-actions').down('p').insert(this.globalToggle).insert(clearFloats);
      this._updateGlobalToggleState();

      // Add Expand/Collapse toggle for each facet.
      this.container.select('.search-facet-header').each(function(facetHeader) {
        facetHeader.observe('click', this._onToggle.bindAsEventListener(this));
      }.bind(this))

      // Add a check box before each facet value. We do this from JavaScript because the behaviour of a check box inside
      // a link is not consistent across different browsers (some follow the link when the check box is clicked, others
      // don't) and having the check box outside the facet value link requires JavaScript to synchronize them.
      this.container.select('.search-facet-body a.itemName').each(function(facetValueAnchor) {
        var checkBox = new Element('input', {type: 'checkbox'});
        checkBox.checked = facetValueAnchor.hasClassName('selected');
        checkBox.observe('click', facetValueAnchor.click.bind(facetValueAnchor));
        facetValueAnchor.insert({before: checkBox});
        // Remove the 'selected' class because the selected state is marked using the check box.
        facetValueAnchor.removeClassName('selected');
      });
    },

    _onToggle: function(event) {
      event.element().up('.search-facet').toggleClassName('expanded');
      this._updateGlobalToggleState();
    },

    _onGlobalToggle : function(event) {
      event.stop();
      this.container.select('.search-facet').each(function(facetContainer) {
        if (this.globalToggle._collapse) {
          facetContainer.removeClassName('expanded');
        } else {
          facetContainer.addClassName('expanded');
        }
      }.bind(this));
      this._updateGlobalToggleState();
    },

    _updateGlobalToggleState: function() {
      var facetCount = this.container.select('.search-facet').length;
      var expandedFacetCount = this.container.select('.search-facet.expanded').length;
      this.globalToggle._collapse = expandedFacetCount &gt; facetCount/2;
      if (this.globalToggle._collapse) {
        this.globalToggle.update("$escapetool.javascript($services.localization.render('solr.facets.collapseAll'))");
      } else {
        this.globalToggle.update("$escapetool.javascript($services.localization.render('solr.facets.expandAll'))");
      }
    }
  });

  var CustomDateIntervalBehavior = Class.create({
    initialize: function(container) {
      this.container = container;
      var form = this.container.down('form');

      // Note that we change the sign because Date#getTimezoneOffset() returns (UTC - local time)
      // and we need (local time - UTC) on the server.
      var timezoneOffset = new Element('input', {
        type: 'hidden',
        name: 'timezoneOffset',
        value: -new Date().getTimezoneOffset()
      });
      form.down('div.hidden').insert(timezoneOffset);

      var checkbox = new Element('input', {type: 'checkbox'});
      checkbox.observe('click', function() {
        form.toggle();
      });

      var label = new Element('label', {'class': 'itemName'});
      label.insert(checkbox);
      label.insert(form.down('.itemName').remove().innerHTML);
      form.hide().insert({before: label});
    },

    _onToggle: function(event) {
      var link = event.element();
      var startDate = this.container.down('input.datetime');
      var endDate = startDate.next('input.datetime');
      // We change the sign because Date#getTimezoneOffset() returns (UTC - local time)
      // and we need (local time - UTC) on the server.
      var timezoneOffset = -new Date().getTimezoneOffset();
      link.href = XWiki.currentDocument.getURL('get', Object.toQueryString({
        facet: startDate.name,
        startDate: startDate.value,
        endDate: endDate.value,
        timezoneOffset: timezoneOffset,
        xredirect: link.readAttribute('href')
      }));
    }
  });

  var MediaTypeFacetBehavior = Class.create({
    initialize: function(container) {
      container.select('.mediaTypeCategory').each(function(category) {
        var subtypes = category.next('ul');
        var selected = category.down('.selected') || subtypes.down('.selected');
        !selected &amp;&amp; category.addClassName('closed');
        subtypes.toggle(selected);
        category.down('.itemCount').observe('click', function(event) {
          category.toggleClassName('closed');
          subtypes.toggle();
        });
      });
    }
  });

  var SearchResultBehavior = Class.create({
    initialize: function(container) {
      this.container = container;
      var highlights = container.down('.search-result-highlights');
      if (highlights &amp;&amp; highlights.select('.search-result-highlight').size() &gt; 1) {
        highlights.addClassName('preview');
        // Workaround for IE8 which doesn't support :first-of-type CSS selector.
        highlights.down('.search-result-highlight').addClassName('first').up('dd')
          .addClassName('first').previous('dt').addClassName('first');
        var highlightAllLink = new Element('a', {
          'href': '#',
          'class': 'search-result-highlightAll'
        }).update("$escapetool.javascript($services.localization.render('solr.result.highlightAll'))".escapeHTML());
        highlights.insert({after: highlightAllLink});
        highlightAllLink.observe('click', function(event) {
          event.stop();
          highlightAllLink.remove();
          highlights.removeClassName('preview');
        });
      }
    }
  });

  var init = function() {
    $('body').select('.search-facet .mediaTypes').each(function(mediaTypeFacet) {
      new MediaTypeFacetBehavior(mediaTypeFacet);
    });

    var searchFacets = $('body').down('.search-facets');
    searchFacets &amp;&amp; new SearchFacetsBehavior(searchFacets);

    $('body').select('.customDateInterval').each(function(customDateInterval) {
      new CustomDateIntervalBehavior(customDateInterval);
    });

    $('body').select('.search-result').each(function(searchResult) {
      new SearchResultBehavior(searchResult);
    });

    return true;
  };
  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
})();</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Main.SolrSearch</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>eabef30e-f82e-4813-88e7-45db2633610e</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/* Hide the 'Created by', 'Modified by' and 'Tags' document sections. */
#document-info, #xdocFooter {
  display: none;
}

/**
 * Search form
 */

.search-form-container {
  margin: 2em 0 1em;
}

.search-form .search-query {
  background: transparent url("/xwiki/resources/icons/xwiki/search.png") left center no-repeat;
  border: 2px solid $theme.borderColor;
  padding-left: 18px;
  padding-right: 20px;
  vertical-align: middle;
  width: 78%;
}

.search-bar input[type="submit"].button {
  margin-left: .5em;
}

/**
 * Sort
 */

ul.search-results-sort {
  color: $theme.textSecondaryColor;
  font-size: .9em;
  padding: 5px 0 2px 5px;
  margin: 0;
}
.search-results-sort li {
  display: inline;
  list-style-type: none;
  padding-left: 1.5em;
}
.search-results-sort li:first-of-type {
  padding: 0;
}
a.sort-item {
  color: inherit;
  text-decoration: none;
}
a.sort-item:hover {
  color: $theme.linkColor;
  text-decoration: underline;
}
a.sort-item.active, a.sort-item.active:hover {
  font-weight: bold;
  color: $theme.textColor;
  text-decoration: none;
}
.sort-item-order {
  font-size: .6em;
  margin-left: .6em;
}

/**
 * Search Results
 */

.search-results-left {
  margin: 0.5em 20em 0.5em 0;
  padding: 0.5em 0.5em 0.5em 0;
}

.search-results {
  margin-bottom: 1.5em;
}

.search-result {
  display: block;
  font-size: .9em;
  margin-top: 1.5em;
  padding: .2em 0 .2em 25px;
}

.search-result.type-document,
.search-result.type-object,
.search-result.type-object_property,
.search-result.type-attachment {
  background: none no-repeat scroll left .4em transparent;
}
.search-result.type-document {
  background-image: url("/xwiki/resources/icons/silk/page_white_text.png");
}
.search-result.type-object {
  background-image: url("/xwiki/resources/icons/silk/page_white_gear.png");
}
.search-result.type-object_property {
  background-image: url("/xwiki/resources/icons/silk/page_white_key.png");
}
.search-result.type-attachment {
  background-image: url("/xwiki/resources/icons/silk/attach.png");
}

.search-result-title {
  border: 0;
  font-weight: bold;
  font-size: 1.33em;
  margin: 0;
}

.search-result-version {
  font-size: 70%;
  font-weight: normal;
  padding-left: 0.5em;
  vertical-align: top;
}

.search-result-language {
  font-size: 0.7em;
  font-style: italic;
  font-weight: lighter;
}

.search-result-location,
.search-result-author,
.search-result-language,
.search-result-uploader,
.search-result-mediaType {
  color: $theme.textSecondaryColor;
}

.search-result-location,
.search-result-author,
.search-result-uploader,
.search-result-mediaType,
.search-result-highlight {
  line-height: 1.4em;
}

blockquote.search-result-highlight {
  /* Remove the background color. */
  background-color: transparent;
  /* Increase the width of the left border. */
  border-left-width: 3px;
  margin-top: 0.2em;
  /* The text should be centered vertically relative to the left border. */
  padding: 0 0 0 1em;
}

.search-text-highlight {
  background-color: $theme.highlightColor;
  font-weight: bold;
}

dl.search-result-highlights &gt; dt {
  color: $theme.textSecondaryColor;
  font-weight: normal;
}

dl.search-result-highlights.preview dt,
dl.search-result-highlights.preview dd &gt; * {
  display: none;
}

dl.search-result-highlights.preview dt:first-of-type,
dl.search-result-highlights.preview dd:first-of-type blockquote:first-of-type,
/* Workaround for IE8 which doesn't support :first-of-type CSS selector. */
dl.search-result-highlights.preview dt.first,
dl.search-result-highlights.preview dd.first blockquote.first {
  display: block;
}

a.search-result-highlightAll:after {
  content: ' \bb';
}

.search-result-debug {
  white-space: pre;
}

/**
 * Facets
 */

.search-facets {
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
  float: right;
  /* Leave space for the bottom shadow. */
  margin-bottom: 2px;
  max-width: 19.5em;
  width: 19.5em;
  border-radius: 4px;
}

.search-facets-header,
.search-facets-actions,
.search-facet {
  background-color: $theme.backgroundSecondaryColor;
  border-bottom: 1px solid $theme.borderColor;
  border-top: 1px solid $theme.pageContentBackgroundColor;
  position: relative;
}

.search-facets-header,
.search-facets-actions {
  padding: 0.5em 1em;
}
.search-facet {
  padding: 0.5em .8em;
}

.search-facets-header {
  border-top: none;
}

.search-facets-actions &gt; p {
  font-size: .8em;
  margin: 0;
}

.search-facets-actions a {
  color: $theme.textSecondaryColor;
  text-decoration: none;
}

.search-facets-actions a:hover {
  color: $theme.linkColor;
  text-decoration: underline;
}

.search-facets-actions .clearfloats {
  /* Fix the horizontal scroll bar, caused by the fact that we use a SPAN element instead of a DIV. */
  display: block;
  margin: 0;
}

.search-facet:last-of-type {
  border-bottom: none;
}

.search-facet-header {
  background: url("$doc.getAttachmentURL('dark-grey-disclosure-arrow-left.png')") no-repeat scroll 100% 50% transparent;
  color: $theme.titleColor;
  cursor: pointer;
  line-height: 1.4em;
  margin: 0 .2em;
  text-transform: capitalize;
}

.search-facet-header:after {
  border-bottom: 1px dotted $theme.pageContentBackgroundColor;
  border-top: 1px dotted $theme.borderColor;
  clear: both;
  content: "";
  display: block;
  height: 0;
  margin: 2.45em 0 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
}

.search-facet:last-of-type .search-facet-header:after {
  border: medium none;
}

.search-facet.expanded:last-of-type .search-facet-header:after {
  border-bottom: 1px dotted $theme.pageContentBackgroundColor;
  border-top: 1px dotted $theme.borderColor;
}

.search-facet-body {
  overflow: hidden; /* required for effect */
  display: none;
  margin-top: .5em;
}

.search-facet-body ul {
  font-size: .9em;
}

.search-facet-body li {
  padding: .1em .2em;
}

.search-facet.expanded .search-facet-header {
  background-image: url("$doc.getAttachmentURL('dark-grey-disclosure-arrow-down.png')");
}

.search-facet.expanded .search-facet-body {
  display: block;
}

.search-facet-body ul, .search-facet-body ul.users {
  color: $theme.textSecondaryColor;
  list-style: none;
  display: block;
  padding: 0.5em 0;
  margin: 0;
}

.search-facet-body li:hover {
  background-color: $theme.highlightColor;
}

.search-facet-body input[type="checkbox"] {
  float: left;
  margin: .2em 0;
}

.search-facet-body .itemName,
.search-facet-body .more {
  display: block;
  overflow: hidden;
  padding: .1em .2em;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.search-facet-body .itemName,
.search-facet-body .more {
  /* Remove link styling */
  color: $theme.textColor;
  text-decoration: none;
}

.search-facet-body .itemName.empty,
.search-facet-body .more {
  color: $theme.textSecondaryColor;
}

/* In case the JavaScript is disabled. */
.search-facet-body .itemName.selected {
  font-weight: bolder;
}

.search-facet-body .itemCount {
  float: right;
  padding: .1em 0;
}

/**
 * Date Facet
 */
.search-facet-body .customDateInterval input {
  margin-bottom: .3em;
}
.search-facet-body .customDateInterval .itemName {
  cursor: pointer;
  padding-left: 0;
}
.search-facet-body .customDateInterval form {
  margin-top: .5em;
}

/**
 * User Facet
 */

.users .itemName .user {
  display: block;
  margin: 0;
}

.users .itemName .user-name {
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
}

/**
 * Media Type Facet
 */
.search-facet-body ul.mediaTypes ul {
  margin-left: 1em;
}

/* Don't highlight the entire media type category. */
.search-facet-body ul.mediaTypes &gt; li:hover {
  background-color: transparent;
}
.search-facet-body .mediaTypeCategory:hover {
  background-color: $theme.highlightColor;
}

.mediaTypeCategory .itemCount {
  background: url("$doc.getAttachmentURL('light-grey-disclosure-arrow-down.png')") no-repeat scroll 100% 50% transparent;
  cursor: pointer;
  padding-right: 9px;
}
.mediaTypeCategory .itemCount:hover {
  background-image: url("$doc.getAttachmentURL('dark-grey-disclosure-arrow-down.png')")
}
.mediaTypeCategory.closed .itemCount {
  background-image: url("$doc.getAttachmentURL('light-grey-disclosure-arrow-left.png')")
}
.mediaTypeCategory.closed .itemCount:hover {
  background-image: url("$doc.getAttachmentURL('dark-grey-disclosure-arrow-left.png')")
}

/**
 * Miscellaneous
 */

.paginationFilter .resultsNo,
.paginationFilter .controlPagination,
.paginationFilter .pagination {
  line-height: 22px;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
