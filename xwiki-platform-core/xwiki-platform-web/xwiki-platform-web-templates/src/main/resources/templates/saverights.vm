## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#set($fullname = $request.get("fullname"))
#set($uorg = $request.get("uorg"))
#set($right = $request.get("right")) ## right name: edit, view, comment...
#set($action = $request.get("action"))  ## can be allow, deny or clear(delete) that right
#set($clsname = $request.get("clsname"))
## found allow or deny for the user or group
#set($founda = false)
#set($foundd = false)

#if ($!{services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
## Convert the user or group identifier present in the request to a DocumentReference relative to the current wiki
## if no wiki is specified.
#set ($userOrGroupReference = $services.model.resolveDocument($fullname))
#foreach($obj in $doc.getObjects($clsname)) ## XWiki.XWikiGlobalRights or XWiki.XWikiRights
  #set ($pers = "$!obj.getValue($uorg)")
  ## Convert the user or group identifiers contained in the current access rule to an array of DocumentReferences
  ## in order to compare these references to the reference of the user or group for which the rights may need to
  ## be updated. User or groups can be separated by a comma or a pipe (but not both in the same string).
  #set ($userOrGroupIdentifiers = $stringtool.split($pers, ',|'))
  #set ($ruleUserOrGroupReferences = [])
  #foreach ($userOrGroupIdentifier in $userOrGroupIdentifiers)
    #set ($reference = $services.model.resolveDocument($userOrGroupIdentifier))
    #set ($discard = $ruleUserOrGroupReferences.add($reference))
  #end
  #if ($ruleUserOrGroupReferences.size() == 1 && $ruleUserOrGroupReferences.contains($userOrGroupReference))
    ## Found the rule containing the given user or group and this user or group only
    #set ($levels = "$obj.getValue('levels')") ## get the levels
    #if ($obj.getValue('allow') == 1) ## found allow rule
      ### if action = allow, add the right to the allow rule, if it does not exist; 
      ### if action = deny, remove the right from the allow rule, if exists;
      ### if action = clear, remove the right from the allow rule, if exists
      #set($founda = true)
      #if($action == "allow")
        #if(!$levels.matches(".*\b${right}\b.*")) ## the right is not in the allow list, add it
          #set($levels = $levels + "," + $right)
          
##1. person: $pers; rule: allow; action: allow; levels: $levels
          $doc.getObject($clsname, $obj.number).set('levels', $levels) ## set the new levels
        #end
      #else ## deny or clean action
        #set($i = $levels.indexOf($right))
        #if($i > -1) ## the right was found in the allow levels, remove it
          #if($i == 0)
            #set($levels = $levels.replaceAll("\b${right}(,|$)", ""))
          #else
            #set($levels = $levels.replaceAll(",${right}\b", ""))
          #end
        #end

##2. person: $pers; rule: allow; action: deny/clean; levels: $levels
        #if($levels != "")
          $doc.getObject($clsname, $obj.number).set('levels', $levels) ## set the new levels
        #else ## no other righs in the levels, remove the rule completely
          #set($discard = $doc.removeObject($obj))
        #end
      #end
    #else ## found deny rule
      #set($foundd = true)
      ### if action = allow, delete the right from the deny rule, if exists; 
      ### if action = deny, add the right to the deny rule, if it does not exist;
      ### if action = clear, remove the right from the deny rule, if exists
      #if($action == "deny")
        #if(!$levels.matches(".*\b${right}\b.*")) ## the right is not in the allow list, add it
          #set($levels = $levels + "," + $right)

##3. person: $pers; rule: deny; action:deny; levels: $levels
          $doc.getObject($clsname, $obj.number).set('levels', $levels) ## set the new levels
        #end
      #else ## allow or clean action
        #set($i = $levels.indexOf($right))
        #if($i > -1) ## the right was found in the allow levels, remove it
          #if($i == 0)
            #set($levels = $levels.replaceAll("\b${right}(,|$)", ""))
          #else
            #set($levels = $levels.replaceAll(",${right}\b", ""))
          #end
        #end

##4. person: $pers; rule: deny; action: allow/clean; levels: $levels
        #if($levels != "")
          $doc.getObject($clsname, $obj.number).set('levels', $levels) ## set the new levels
        #else ## no other righs in the levels, remove the rule completely
          #set($discard = $doc.removeObject($obj))
        #end
      #end
    #end ## end get property
  #elseif ($ruleUserOrGroupReferences.contains($userOrGroupReference))
    ## The given user or group is in a multiple selection rule, remove it from there.
    #set ($discard = $ruleUserOrGroupReferences.remove($userOrGroupReference))
    #set ($userOrGroupIdentifiers = [])
    #foreach ($reference in $ruleUserOrGroupReferences)
      #set ($discard = $userOrGroupIdentifiers.add($services.model.serialize($reference, 'compactwiki')))
    #end
    $doc.getObject($clsname, $obj.number).set($uorg, $stringtool.join($userOrGroupIdentifiers, ','))

##5. person: $pers
  #end
#end ## end foreach existing rule

#if(($founda == false) && ($action == "allow"))
  ## could not find the rule -> create one
  #set($obj = $doc.newObject($clsname))
  ## set the new rules
  $obj.set($uorg, $fullname)
  $obj.set('levels', $right)

##6. person: $fullname; rule: allow; action: allow; levels: $right
  $obj.set('allow', '1')
#end
#if(($foundd == false) && ($action == "deny"))
  ## could not find the rule -> create one
  #set($obj = $doc.newObject($clsname))
  ## set the new rules
  $obj.set($uorg, $fullname)
  $obj.set('levels', $right)

##7. person: $fullname; rule: deny; action: deny; levels: $right
  $obj.set('allow', '0')
#end
$doc.save($services.localization.render('platform.core.rightsManagement.saveComment', [${action}, ${right}, ${fullname}]), true)
SUCCESS
#end
