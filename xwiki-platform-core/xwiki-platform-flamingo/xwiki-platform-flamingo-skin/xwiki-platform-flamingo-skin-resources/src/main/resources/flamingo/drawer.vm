## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#template('drawer_macros.vm')
##
## Display the drawer
##
<nav class="drawer-nav" id="tmDrawer">
  <ul class="drawer-menu">
    ##
    ## Drawer header (with elements concerning the current user: profile, login, logout, register, etc...)
    ##
    <li class="drawer-brand clearfix">
      <a href="$xwiki.getURL($xcontext.user, 'view')">
        #largeUserAvatar($xcontext.user)
      </a>
      <div class="brand-links">
        #define ($logoutLink)
          <a href="$xwiki.getURL('XWiki.XWikiLogout', 'logout', "xredirect=$escapetool.url($xwiki.relativeRequestURL)")" id="tmLogout" rel="nofollow">$services.icon.renderHTML('log-out') $escapetool.xml($services.localization.render('logout'))</a>
        #end
        #if ($xcontext.user != 'XWiki.XWikiGuest')
          <a href="$xwiki.getURL($xcontext.user, 'view')" class="brand-user" id="tmUser">$!xwiki.getUserName($xcontext.user, false)</a>
          $logoutLink
        #elseif($xcontext.user == 'XWiki.XWikiGuest' && $xcontext.inactiveUserReference)
          <a href="$xwiki.getURL($xcontext.inactiveUserReference, 'view')" class="brand-user" id="tmUser">$!xwiki.getUserName($xcontext.inactiveUserReference, false)</a>
          $logoutLink
        #else
          <a href="$xwiki.getURL('XWiki.XWikiLogin', 'login', "xredirect=$escapetool.url($xwiki.relativeRequestURL)&loginLink=1")" id="tmLogin" rel="nofollow">$services.icon.renderHTML('log-in') $escapetool.xml($services.localization.render('login'))</a>
          #if ($xwiki.hasAccessLevel('register', 'XWiki.XWikiPreferences'))
            <a href="$xwiki.getURL('XWiki.XWikiRegister', 'register', "xredirect=$escapetool.url($xwiki.relativeRequestURL)")" id="tmRegister" rel="nofollow">$services.icon.renderHTML('log-in') $escapetool.xml($services.localization.render('register'))</a>
          #end
        #end
        ##
        ## UIX
        ##
        #displayDrawerUIX('org.xwiki.plaftorm.drawer.header')
      </div>
    </li>
    ##
    ## Display the content of the drawer
    ##
    #set ($drawerExtensions = $services.uix.getExtensions('org.xwiki.plaftorm.drawer', {'sortByParameter' : 'order'}))
    ## Logs to debug problems when displaying UIXes.
    #set ($discard = $services.logging.getLogger('drawer.vm').debug('Drawer UIXes: [{}]', $drawerExtensions))
    ##
    ## Local Category
    ##
    #drawerCategoryHeader($services.wiki.currentWikiDescriptor.prettyName)
    ##
    ## Display an "Administer wiki" item if the Administration App is not installed.
    ## The role of the item is to help the user importing content.
    ##
    #if ($hasGlobalAdmin)
      #set ($importaction = $!xwiki.getURL('XWiki.XWikiPreferences', 'import'))
      #if (!$isAdminAppInstalled)
        ## If the admin application is not installed, we add a link to import it.
        ## Otherwise, we let the admin application adds the correct UIX to administrate the wiki.
        #set ($importaction = $!xwiki.getURL('XWiki.XWikiPreferences', 'import'))
        #drawerItem($importaction, 'wrench', $escapetool.xml($services.localization.render('core.menu.admin')), 'tmAdminWiki')
        #drawerSeparator()
      #end
    #end
    ##
    ## UIX: Drawer items for the current wiki
    ##
    #displayTheseDrawerUIX($drawerExtensions, 'local')
    ##
    ## Global category
    ##
    #define ($globalPart)
      ##
      ## Languages
      ##
      #template('menus_language.vm')
      ##
      ## UIX: Drawer items for the global scope
      ##
      #displayTheseDrawerUIX($drawerExtensions, 'global')
    #end
    #if ($stringtool.isNotBlank($globalPart.toString()))
      #drawerCategoryHeader($services.localization.render('core.drawer.global'))
      $globalPart
    #end
  </ul>
</nav>
#**
 * Display the UI extensions.
 *
 * @param $name the name of the UI extension to display
 * @param $category the name of the category to filter on (by default, it fallbacks on "local")
 *#
#macro(displayDrawerUIX $name $category)
  #displayTheseDrawerUIX($services.uix.getExtensions($name, {'sortByParameter' : 'order'}), $category)
#end
#**
 * Display the UI extensions.
 *
 * @param $extensions a list of extensions to display
 * @param $category the name of the category to filter on (by default, it fallbacks on "local")
 *#
#macro(displayTheseDrawerUIX $extensions $category)
  #set ($canHaveMenuSeparator = false)
  #if ("$!category" == '')
    #set ($category = 'local')
  #end
  #foreach($uix in $extensions)
    #set ($uixCategory = "$!uix.parameters.category")
    #set ($hasAccessForDrawerUIX = $services.security.authorization.hasAccess('admin', $uix.authorReference, $services.wiki.currentWikiDescriptor.reference))
    ## Logs to debug problems when displaying UIXes.
    #set ($discard = $services.logging.getLogger('drawer.vm').debug('Drawer UIX [{}] - Reference: [{}]', $uix, $!uix.documentReference))
    #set ($discard = $services.logging.getLogger('drawer.vm').debug('Drawer UIX [{}] - Author: [{}]', $uix, $!uix.authorReference))
    #set ($discard = $services.logging.getLogger('drawer.vm').debug('Drawer UIX [{}] - Category: [{}] - UIX Category: [{}]', $uix, $category, $uixCategory))
    #set ($discard = $services.logging.getLogger('drawer.vm').debug('Drawer UIX [{}] - Permission: [{}]', $uix, $hasAccessForDrawerUIX))
    #if (($uixCategory == $category || $category == 'local' && $uixCategory == '') && $hasAccessForDrawerUIX)
      #if ("$!uix.getParameters().separator" == 'true' && $canHaveMenuSeparator)
        #drawerSeparator()
        #set ($canHaveMenuSeparator = false)
      #end
      #set ($content = $services.rendering.render($uix.execute(), 'html/5.0'))
      $content
      #if (!$canHaveMenuSeparator && $stringtool.isNotBlank($content))
        #set ($canHaveMenuSeparator = true)
      #end
    #end
  #end
#end
