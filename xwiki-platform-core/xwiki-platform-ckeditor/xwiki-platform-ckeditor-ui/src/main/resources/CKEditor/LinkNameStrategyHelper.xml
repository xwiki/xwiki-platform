<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="CKEditor.LinkNameStrategyHelper" locale="">
  <web>CKEditor</web>
  <name>LinkNameStrategyHelper</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>LinkNameStrategyHelper</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="hierarchy_macros.vm" /}}

{{velocity output="false"}}

#macro (computeInfoFromReference $reference $result)
  #set ($title = $reference.name)
  #set ($options = {
    'excludeSelf': false,
    'limit': 4
  })
  #getHierarchyPath($reference $path $options)
  #getHierarchyPathLabels($path $labels $options)
  #set ($location = $stringtool.join($labels, ' / '))
  #setVariable("$result" $location)
#end

#macro (handleSuggestionRequest)
  #set ($isAdvanced = $services.user.properties.type == 'ADVANCED')
  #set ($result = [])
  #if ($isAdvanced)
    #set ($requestedReference = $services.model.resolveDocument($request.input, 'default'))
    #set ($cleanRequestedReference = $services.modelvalidation.transformEntityReference($requestedReference))
    #set ($location = $NULL)
    #computeInfoFromReference($cleanRequestedReference $location)
    #set ($discard = $result.add({
      'reference':  $services.model.serialize($cleanRequestedReference, 'default'),
      'type': 'fullyResolvedInput',
      'location': $location
    }))
  #end
  #set ($parentReference = $services.model.resolveDocument($request.base))
  #set ($requestedName = $request.input)
  #set ($transformedName = $services.modelvalidation.transformName($requestedName))
  #set ($spaceReference = $services.model.createSpaceReference($transformedName, $parentReference.lastSpaceReference))
  #set ($documentReference = $services.model.createDocumentReference('WebHome', $spaceReference))
  #set ($location = $NULL)
  #computeInfoFromReference($documentReference $location)
  #set ($discard = $result.add({
    'reference':  $services.model.serialize($documentReference, 'default'),
    'type': 'resolvedInSpace',
    'location': $location
  }))
  #jsonResponse($result)
#end
{{/velocity}}
{{velocity}}
#if ($xcontext.action == 'get' &amp;&amp; $request.input != '')
#handleSuggestionRequest()
#else
Technical page to help using the name strategy when suggesting links.
#end
{{/velocity}}</content>
</xwikidoc>
