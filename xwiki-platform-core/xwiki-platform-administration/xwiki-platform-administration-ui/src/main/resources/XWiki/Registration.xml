<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.6" reference="XWiki.Registration" locale="">
  <web>XWiki</web>
  <name>Registration</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Registration</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="register_macros.vm"/}}

{{velocity}}
## The registration is enabled:
## - on the main wiki
## - on a subwiki if there is no service "$services.wiki.user"
## - on a subwiki where the user scope allows local users
#if($xcontext.isMainWiki() || "$!services.wiki.user" == '' || $services.wiki.user.getUserScope() != "GLOBAL_ONLY")
  ## These are defined in other places around XWiki, changing them here will result in undefined behavior.
  #set($redirectParam = 'xredirect')
  #set($userSpace = 'XWiki.')
  #set($loginPage = 'XWiki.XWikiLogin')
  #set($loginAction = 'loginsubmit')
  ##
  #set($documentName = 'XWiki.Registration')
  ##
  ## Security measure:
  ## If this document is changed such that it must have programming permission in order to run, change this to false.
  #set($sandbox = true)
  ##
  #set ($registrationConfig = $NULL)
  #_loadConfig($registrationConfig)
  ##
  #*
   * You may include this document in other documents using {{include reference="XWiki.Registration"/}}
   * To specify that the user is invited and should be allowed to register even if Guest does not have permission to
   * register, set $invited to true. NOTE: The including script must have programming permission to do this.
   *
   * To specify some code which should run after registration is successfully completed, set
   * $doAfterRegistration to a define block of velocity code like so:
   * #define($doAfterRegistration)
   *   some code
   * #end
   * Output from running this code will not be printed.
   *
   * The fields which will be seen on the registration page are defined here.
   * $fields is an array and each field is a Map. The names shown below are Map keys.
   *
   * Each field must have:
   *   name - this is the name of the field, it will be the value for "name" and "id"
   *
   * Each field may have:
   *   label - this String will be written above the field.
   *
   *   tag - the HTML tag which will be created, default is &lt;input&gt;, may also be a non form tag such as &lt;img&gt;
   *
   *   params - a Map, each key value pair will be in the html tag. eg: {"size" : "30"} becomes &lt;input size=30...
   *
   *   validate a Map describing how to validate the field, validation is done in javascript then redone in velocity
   *   |        for security and because not everyone has javascript.
   *   |
   *   +-mandatory (Optional) - Will fail if the field is not filled in.
   *   | +-failureMessage (Required) - The message to display if the field is not filled in.
   *   | +-noscript (Optional) - will not be checked by javascript
   *   |
   *   +-regex (Optional) - Will validate the field using a regular expression.
   *   | |                  because of character escaping, you must provide a different expression for the
   *   | |                  javascript validation and the server side validation. Both javascript and server side
   *   | |                  validation are optional, but if you provide neither, then your field will not be validated.
   *   | |
   *   | +-failureMessage (Optional) - The message to display if the regex evaluation returns false.
   *   | +-jsFailureMessage (Optional) - The message for Javascript to display if regex fails.
   *   | |                               If jsFailureMessage is not defined Javascript uses failureMessage.
   *   | |                               NOTE: Javascript injects the failure message using createTextNode so &amp;lt; will
   *   | |                                     be displayed as &amp;lt;
   *   | |
   *   | +-pattern (Optional) - The regular expression to test the input at the server side, it's important to use
   *   | |                      this if you need to validate the field for security reasons, also it is good because not
   *   | |                      all browsers use javascript or have it enabled.
   *   | |
   *   | +-jsPattern (Optional) - The regular expression to use for client side, you can use escaped characters to avoid
   *   | |                        them being parsed as HTML or javascript. To get javascript to unescape characters use:
   *   | |                        {"jsPattern" : "'+unescape('%5E%5B%24')+'"}
   *   | |                        NOTE: If no jsPattern is specified, the jsValidator will try to validate
   *   | |                              using the server pattern.
   *   | |
   *   | +-noscript (Optional) - will not be checked by javascript
   *   |
   *   +-mustMatch (Optional) - Will fail if the entry into the field is not the same as the entry in another field.
   *   | |                      Good for password confirmation.
   *   | |
   *   | +-failureMessage (Required) - The message to display if the field doesn't match the named field.
   *   | +-name (Required) - The name of the field which this field must match.
   *   | +-noscript (Optional) - will not be checked by javascript
   *   |
   *   +-programmaticValidation (Optional) - This form of validation executes a piece of code which you give it and
   *   | |                                   if the code returns the word "failed" then it gives the error message.
   *   | |                                   Remember to put the code in singel quotes ('') because you want the value
   *   | |                                   of 'code' to equal the literal code, not the output from running it.
   *   | |
   *   | +-code (Required) - The code which will be executed to test whether the field is filled in correctly.
   *   | +-failureMessage (Required) - The message which will be displayed if evaluating the code returns "false"
   *   |
   *   +-fieldOkayMessage (Optional) - The message which is displayed by LiveValidation when a field is validated as okay.
   *                                   If not specified, will be $defaultFieldOkayMessage
   *
   *   noReturn - If this is specified, the field will not be filled in if there is an error and the user has to fix their
   *              registration information. If you don't want a password to be passed back in html then set this true
   *              for the password fields. Used for the captcha because it makes no sense to pass back a captcha answer.
   *
   *   doAfterRegistration - Some Velocity code which will be executed after a successfull registration.
   *                         This is used in the favorite color example.
   *                         Remember to put the code in singel quotes ('') because you want the 'code' entry to equal the literal
   *                         code, not the output from running it.
   *
   * Each field may not have: (reserved names)
   *   error - This is used to pass back any error message from the server side code.
   *
   * NOTE: This template uses a registration method which requires:
   *        * register_first_name
   *        * register_last_name
   *        * xwikiname
   *        * register_password
   *        * register2_password
   *        * register_email
   *        * template
   *       Removing or renaming any of these fields will result in undefined behavior.
   *
   *###
  #set($mainFields = [])
  ##
  ## The user name field, mandatory and programmatically checked to make sure the username doesn't exist.
  #set($field =
    {'name' : 'xwikiname',
      'label' : $services.localization.render('core.register.username'),
      'params' : {
        'type' : 'text',
        'onfocus' : 'prepareName(document.forms.register);',
        'size' : '60',
        'autocomplete' : 'username'
      },
      'validate' : {
        'mandatory' : {
          'failureMessage' : $services.localization.render('core.validation.required.message')
        },
        'programmaticValidation' : {
          'code' : '#nameAvailable($request.get("xwikiname"))',
          'failureMessage' : $services.localization.render('core.register.userAlreadyExists')
        }
      }
    })
  #set($discard = $mainFields.add($field))
  ## Make sure the chosen user name is not already taken
  ## This macro is called by programmaticValidation for xwikiname (above)
  #macro (nameAvailable, $name)
    #if ($xwiki.exists("$userSpace$name"))
      failed
    #end
  #end
  ##
  ##The password field, mandatory and must be at least 6 characters long.
  ##The confirm password field, mandatory, must match password field, and must also be 6+ characters long.
  #definePasswordFields($mainFields, 'register_password', 'register2_password', $registrationConfig.passwordOptions)
  ##
  ## The email address field, regex checked with an email pattern. Mandatory if registration uses email verification
  #set($field =
    {'name' : 'register_email',
      'label' : $services.localization.render('core.register.email'),
      'params' : {
        'type' : 'text',
        'size' : '60',
        'autocomplete' : 'email'
      },
      'validate' : {
        'regex' : {
          'pattern' : '/^([^@\s]+)@((?:[-a-zA-Z0-9]+\.)+[a-zA-Z]{2,})$/',
          'failureMessage' : $services.localization.render('xe.admin.registration.invalidEmail')
        }
      }
    })
  #if($registrationConfig.useEmailVerification)
    #set($field.validate.mandatory = {'failureMessage' : $services.localization.render('core.validation.required.message')})
  #end
  #set($discard = $mainFields.add($field))
  ##
  #*********
  ## Uncomment this code to see an example of how you can easily add a field to the registration page
  ## NOTE: In order to save the favorite color in the "doAfterRegistration" hook, this page must be
  ## saved by an administrator and can not self sandboxing.
  #set($sandbox = false)
  #set($field =
    {'name' : 'favorite_color',
      'label' : 'What is your favorite color',
      'params' : {
        'type' : 'text',
        'size' : '60'
      },
      'validate' : {
        'mandatory' : {
          'failureMessage' : $services.localization.render('core.validation.required.message')
        },
        'regex' : {
          'pattern' : '/^green$/',
          'failureMessage' : 'You are not cool enough to register here.'
        },
        'fieldOkayMessage' : 'You are awesome.'
      },
      'doAfterRegistration' : '#saveFavoriteColor()'
    })
  #set($discard = $mainFields.add($field))
  ## Save the user's favorite color on their user page.
  #macro(saveFavoriteColor)
    #set($xwikiname = $request.get('xwikiname'))
    #set($userDoc = $xwiki.getDocument("$userSpace$xwikiname"))
    $userDoc.setContent("$userDoc.getContent() ${xwikiname}'s favorite color is $request.get('favorite_color')!")
    ## The user (who is not yet logged in) can't save documents so saveWithProgrammingRights
    ## will save the document as long as the user who last saved this registration page has programming rights.
    $userDoc.saveWithProgrammingRights("Saved favorite color from registration form.")
  #end
  *********###
  #set($aboutYouFields = [])
  ##
  ## The first name field, no checking.
  #set($field =
    {'name' : 'register_first_name',
      'label' : $services.localization.render('core.register.firstName'),
      'params' : {
        'type' : 'text',
        'size' : '60',
        'autocomplete' : 'given-name'
      }
    })
  #set($discard = $aboutYouFields.add($field))
  ##
  ## The last name field, no checking.
  #set($field =
    {'name' : 'register_last_name',
      'label' : $services.localization.render('core.register.lastName'),
      'params' : {
        'type' : 'text',
        'size' : '60',
        'autocomplete' : 'family-name'
      }
    })
  #set($discard = $aboutYouFields.add($field))
  ##
  ## To disable the CAPTCHA on this page, comment out the next entry.
  ## The CAPTCHA, not really an input field but still defined the same way.
  #if($services.captcha
      &amp;&amp; !$invited
      &amp;&amp; $xcontext.getUser() == "XWiki.XWikiGuest"
      &amp;&amp; $registrationConfig.requireCaptcha)
    ## The CAPTCHA field, programmatically checked to make sure the CAPTCHA is right.
    ## Not checked by javascript because javascript can't check the CAPTCHA and the Ok message because it passes the
    ## mandatory test is misleading.
    ## Also, not filled back in if there is an error ('noReturn').
    #set($field =
      {'name' : 'captcha_placeholder',
        'label' : $services.localization.render('core.captcha.label'),
        'skipLabelFor' : true,
        'type'  : 'html',
        'html'  : "&lt;span class='xHint'&gt;$escapetool.xml($services.localization.render('core.captcha.instruction'))
          &lt;/span&gt; $!{services.captcha.default.display()}",
        'validate' : {
          'programmaticValidation' : {
            'code' : '#if (!$services.captcha.default.isValid())failed#end',
            'failureMessage' : $services.localization.render('core.captcha.captchaAnswerIsWrong')
          }
        },
        'noReturn' : true
      })
    #set($discard = $aboutYouFields.add($field))
  #end
  ## Pass the redirect parameter on so that the login page may redirect to the right place.
  ## Not necessary in Firefox 3.0.10 or Opera 9.64, I don't know about IE or Safari.
  #set($field =
    {'name' : $redirectParam,
      'params' : {
        'type' : 'hidden'
      }
    })
  #set($discard = $aboutYouFields.add($field))
  #set($fields = [])
  #set($discard = $fields.addAll($mainFields))
  #set($discard = $fields.addAll($aboutYouFields))
  ##
  #######################################################################
  ## The Code.
  #######################################################################
  ##
  ## This application's HTML is dynamically generated and editing in WYSIWYG would not work
  #if($xcontext.getAction() == 'edit')
    $response.sendRedirect("$xwiki.getURL($doc.getFullName(), 'edit')?editor=wiki")
  #end
  ##
  ## If this document has PR and is not included from another document then it's author should be set to Guest
  ## for the duration of it's execution in order to improve security.
  ## Note we compare document ids because
  #if($sandbox
      &amp;&amp; $xcontext.hasProgrammingRights()
      &amp;&amp; $xcontext.getDoc().getDocumentReference().equals($xwiki.getDocument($documentName).getDocumentReference()))
  ##
    $xcontext.dropPermissions()##
  #end
  ##
  ## Access level to register must be explicitly checked because it is only checked in XWiki.prepareDocuments
  ## and this page is accessible through view action.
  #if(!$xcontext.hasAccessLevel('register', 'XWiki.XWikiPreferences'))
    ## Make an exception if another document with programming permission (Invitation app) has included this
    ## document and set $invited to true.
    #if(!$invited || !$xcontext.hasProgrammingRights())
      $response.sendRedirect("$xwiki.getURL($doc.getFullName(), 'login')")
    #end
  #end
  ##
  ## Display the heading
  $registrationConfig.heading
  ## If the submit button has been pressed, then we test the input and maybe create the user.
#if($request.getParameter('xwikiname'))
## Do server side validation of input fields.
## This must not be in a #set directive as it will output messages if something goes wrong.
#validateFields($fields, $request)
## If server side validation was successfull, create the user
#if($allFieldsValid)
#createUser($fields, $request, $response, $doAfterRegistration)
#end
#end
  ## If the registration was not successful or if the user hasn't submitted the info yet
  ## Then we display the registration form.
  #if(!$registrationDone)
    $registrationConfig.welcomeMessage

    {{html clean="false"}}
      &lt;form id="register" action="$xwiki.relativeRequestURL" method="post" class="xform half"&gt;
        &lt;div class="hidden"&gt;
          #if ($request.xpage == 'registerinline')
            #skinExtensionHooks
          #end
          #set ($userDirectoryReference = $services.model.createDocumentReference('', 'Main', 'UserDirectory'))
          #if ($xwiki.exists($userDirectoryReference))
            &lt;input type="hidden" name="parent" value="$!{services.model.serialize($userDirectoryReference, 'default')}" /&gt;
          #end
        &lt;/div&gt;
        ## Note that the macro inject the form_token field.
        #generateHtml($mainFields, $request, 'false')
        &lt;h2&gt;$services.localization.render('core.register.aboutYou')&lt;/h2&gt;
        #generateHtml($aboutYouFields, $request, 'false')
        &lt;input type="hidden" name="form_token" value="$services.csrf.getToken()" /&gt;
        #generateJavascript($fields)
        &lt;p class="buttons"&gt;
          &lt;span class="buttonwrapper"&gt;
            &lt;input type="submit" value="$services.localization.render('core.register.submit')" class="button"/&gt;
          &lt;/span&gt;
        &lt;/p&gt;
      &lt;/form&gt;
    {{/html}}

    ##
    ## Allow permitted users to configure this application.
    #if($xcontext.getUser() != 'XWiki.XWikiGuest' &amp;&amp; $xcontext.hasAccessLevel("edit", $documentName))
      [[{{translation key="xe.admin.registration.youCanConfigureRegistrationHere"/}}&gt;&gt;XWiki.XWikiPreferences?section=Registration&amp;editor=globaladmin#HCustomizeXWikiRegistration]]
      {{html}}&lt;a href="$xwiki.getURL($documentName, 'edit', 'editor=wiki')"&gt;$services.localization.render('xe.admin.registration.youCanConfigureRegistrationFieldsHere')&lt;/a&gt;{{/html}}
    #end
  #end
#else
  ## The registration is not allowed on the subwiki
  ## Redirecting to main wiki's registration page since local user registration is not allowed.
  #set($mainWikiRegisterPageReference = $services.model.createDocumentReference($services.wiki.mainWikiId, 'XWiki', 'Register'))
  #set($temp = $response.sendRedirect($xwiki.getURL($mainWikiRegisterPageReference, 'register', $request.queryString)))
#end
##
#*
 * Create the user.
 * Calls $xwiki.createUser to create a new user.
 *
 * @param $request An XWikiRequest object which made the register request.
 * @param $response The XWikiResponse object to send any redirects to.
 * @param $doAfterRegistration code block to run after registration completes successfully.
 *###
#macro(createUser, $fields, $request, $response, $doAfterRegistration)
  ## CSRF check
  #if(${services.csrf.isTokenValid("$!{request.getParameter('form_token')}")})
    ## See if email verification is required and register the user.
    #if($xwiki.getXWikiPreferenceAsInt('use_email_verification', 0) == 1)
      #set($reg = $xwiki.createUser(true))
    #else
      #set($reg = $xwiki.createUser(false))
    #end
  #else
    $response.sendRedirect("$!{services.csrf.getResubmissionURL()}")
  #end
  ##
  ## Handle output from the registration.
  #if($reg &amp;&amp; $reg &lt;= 0)
    {{error}}
    #if($reg == -2)
      {{translation key="core.register.passwordMismatch"/}}
    ## -3 means username taken, -8 means username is superadmin name
    #elseif($reg == -3 || $reg == -8)
      {{translation key="core.register.userAlreadyExists"/}}
    #elseif($reg == -4)
      {{translation key="core.register.invalidUsername"/}}
    #elseif ($reg == -9)
      {{translation key="core.register.invalidCaptcha"/}}
    ## Note that -10 is reserved already (see api.XWiki#createUser)
    #elseif($reg == -11)
      {{translation key="core.register.mailSenderWronglyConfigured"/}}
    #else
      {{translation key="core.register.registerFailed" parameters="$reg"/}}
    #end
    {{/error}}
  #elseif($reg)
  ## Registration was successful
    #set($registrationDone = true)
    ##
    ## If there is any thing to "doAfterRegistration" then do it.
    #foreach($field in $fields)
      #if($field.get('doAfterRegistration'))
        #evaluate($field.get('doAfterRegistration'))
      #end
    #end
    ## If there is a "global" doAfterRegistration, do that as well.
    ## Calling toString() on a #define block will execute it and we discard the result.
    #set($discard = $doAfterRegistration.toString())
    ##
    ## Define some strings which may be used by autoLogin or loginButton
    #set($userName = $!request.get('xwikiname'))
    #set($password = $!request.get('register_password'))
    #set($loginURL = $xwiki.getURL($loginPage, $loginAction))
    #if("$!request.getParameter($redirectParam)" != '')
      #set($redirect = $request.getParameter($redirectParam))
    #else
      #set($redirect = $registrationConfig.defaultRedirect)
    #end
    ## Display a "registration successful" message
    ## Define some strings which may be used by the welcome message
    #set($firstName = $!request.get('register_first_name'))
    #set($lastName = $!request.get('register_last_name'))
    #evaluate($registrationConfig.registrationSuccessMessage)

    ## Empty line prevents message from being forced into a &lt;p&gt; block.

    ## Give the user a login button which posts their username and password to loginsubmit
    #if($registrationConfig.loginButton)

      {{html clean=false wiki=false}}
        &lt;form id="loginForm" action="$loginURL" method="post"&gt;
          &lt;div class="centered"&gt;
          &lt;input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" /&gt;
          &lt;input id="j_username" name="j_username" type="hidden" value="$escapetool.xml($!userName)" /&gt;
          &lt;input id="j_password" name="j_password" type="hidden" value="$escapetool.xml($!password)" /&gt;
          &lt;input id="$redirectParam" name="$redirectParam" type="hidden" value="$escapetool.xml($redirect)" /&gt;
          &lt;span class="buttonwrapper"&gt;
            &lt;input type="submit" value="$services.localization.render('login')" class="button"/&gt;
          &lt;/span&gt;
          #set ($mainPage = $services.wiki.currentWikiDescriptor.mainPageReference)
          #if ($xwiki.checkAccess($mainPage, 'view'))
            &lt;span class="buttonwrapper"&gt;
              &lt;a href="$!xwiki.getURL($mainPage)" rel="home" class="button secondary"&gt;
                $services.localization.render('core.register.successful.backtohome')
              &lt;/a&gt;
            &lt;/span&gt;
          #end
          &lt;/div&gt;
        &lt;/form&gt;
        ## We don't want autoLogin if we are administrators adding users...
        #if ($registrationConfig.autoLogin &amp;&amp; $request.xpage != 'registerinline')
          &lt;script&gt;
            document.observe('xwiki:dom:loaded', function() {
              document.forms['loginForm'].submit();
            });
          &lt;/script&gt;
        #end
      {{/html}}

    #end
  #end
  ##
#end## createUser Macro
{{/velocity}}</content>
  <attachment>
    <filename>registration_success_hero.svg</filename>
    <mimetype>image/svg+xml</mimetype>
    <charset>UTF-8</charset>
    <author>xwiki:XWiki.Admin</author>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>8462</filesize>
  </attachment>
  <class>
    <name>XWiki.Registration</name>
    <customClass/>
    <customMapping/>
    <defaultViewSheet/>
    <defaultEditSheet/>
    <defaultWeb/>
    <nameField/>
    <validationScript/>
    <defaultRedirect>
      <customDisplay/>
      <disabled>0</disabled>
      <hint/>
      <name>defaultRedirect</name>
      <number>7</number>
      <picker>0</picker>
      <prettyName>Redirect here after registration</prettyName>
      <size>30</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
    </defaultRedirect>
    <heading>
      <customDisplay/>
      <disabled>0</disabled>
      <hint/>
      <name>heading</name>
      <number>1</number>
      <picker>0</picker>
      <prettyName>Registration page heading</prettyName>
      <size>30</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
    </heading>
    <loginButton_autoLogin_enabled>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>loginButton_autoLogin_enabled</name>
      <number>6</number>
      <prettyName>Enable automatic login</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </loginButton_autoLogin_enabled>
    <loginButton_enabled>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>loginButton_enabled</name>
      <number>5</number>
      <prettyName>Enable login button</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </loginButton_enabled>
    <passwordLength>
      <customDisplay/>
      <disabled>0</disabled>
      <hint/>
      <name>passwordLength</name>
      <number>10</number>
      <numberType>integer</numberType>
      <prettyName>Require a password with the given length</prettyName>
      <size>10</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>
    </passwordLength>
    <passwordRuleOneLowerCaseEnabled>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>passwordRuleOneLowerCaseEnabled</name>
      <number>11</number>
      <prettyName>Require at least one lower case character in the password</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </passwordRuleOneLowerCaseEnabled>
    <passwordRuleOneNumberEnabled>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>passwordRuleOneNumberEnabled</name>
      <number>13</number>
      <prettyName>Require at least one number in the password</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </passwordRuleOneNumberEnabled>
    <passwordRuleOneSymbolEnabled>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>passwordRuleOneSymbolEnabled</name>
      <number>14</number>
      <prettyName>Require at least one symbol character in the password</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </passwordRuleOneSymbolEnabled>
    <passwordRuleOneUpperCaseEnabled>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>passwordRuleOneUpperCaseEnabled</name>
      <number>12</number>
      <prettyName>Require at least one upper case character in the password</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </passwordRuleOneUpperCaseEnabled>
    <registrationSuccessMessage>
      <contenttype>---</contenttype>
      <customDisplay/>
      <disabled>0</disabled>
      <editor>PureText</editor>
      <hint/>
      <name>registrationSuccessMessage</name>
      <number>9</number>
      <picker>0</picker>
      <prettyName>Registration Successful Message</prettyName>
      <restricted>0</restricted>
      <rows>12</rows>
      <size>40</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
    </registrationSuccessMessage>
    <requireCaptcha>
      <customDisplay/>
      <defaultValue/>
      <disabled>0</disabled>
      <displayFormType>checkbox</displayFormType>
      <displayType/>
      <hint/>
      <name>requireCaptcha</name>
      <number>8</number>
      <prettyName>Require CAPTCHA to register</prettyName>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
    </requireCaptcha>
    <welcomeMessage>
      <contenttype>---</contenttype>
      <customDisplay/>
      <disabled>0</disabled>
      <editor>PureText</editor>
      <hint/>
      <name>welcomeMessage</name>
      <number>2</number>
      <picker>0</picker>
      <prettyName>Welcome message</prettyName>
      <restricted>0</restricted>
      <rows>12</rows>
      <size>40</size>
      <unmodifiable>0</unmodifiable>
      <validationMessage/>
      <validationRegExp/>
      <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
    </welcomeMessage>
  </class>
  <object>
    <name>XWiki.Registration</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>23d370d6-8619-45f5-b8b9-80ebbe2e303c</guid>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup,xwiki:XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>view</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
</xwikidoc>
