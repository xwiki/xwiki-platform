## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------

#**
 This page starts the password reset procedure. It works according to the next algorithm:
 1. Display a form requesting the username
 2. When receiving the username via form submission, generate a random verification string which is stored (as a hash) inside a ResetPasswordRequestClass object attached to the user's profile page. If no such object exists, it is created, but an existing object will be reused, meaning that at most one password reset request can be active at a moment.
 3. Send an email to the address configured in the user's profile, containing a link to the second step of the password reset procedure.

 URL parameters:

 u = user account sent in the form
 *###
##
##

#template("register_macros.vm")
#macro(resetPasswordBoxStart $panelClass)
#if ("$!panelClass" == "")
  #set ($panelClass = "default")
#end
<div class="centered panel panel-$panelClass xwikimessage panel-body">
  <div class="panel-heading">
    <div class="panel-title">$services.localization.render('xe.admin.passwordReset.title')</div>
  </div>
  <div class="panel-body">
#end

## The name of the class used for storing password reset verification data.
#set ($verifClass = 'XWiki.ResetPasswordRequestClass')
#set ($userName = "$!request.get('u')")
#set ($verifCode = "$!request.get('v')")
#if ($userName == '' && $verifCode == '')## First step, display the form requesting the username
#resetPasswordBoxStart("default")
$services.localization.render('xe.admin.passwordReset.instructions')

<form method="post" action="$services.security.authentication.getAuthenticationURL('reset', $NULL)" class="xformInline">
    <div>
        <input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
        <label for="u">$services.localization.render('xe.admin.passwordReset.username.label')</label>
        <input type="text" id="u" name="u"/>
        <span class="buttonwrapper">
            <input type="submit" value="$services.localization.render('xe.admin.passwordReset.submit')" class="button"/>
        </span>
    </div>
</form>
#elseif ($userName != '' && $verifCode == '')
    ## Second step, generate the verification string, store it, and send the email
    ## TODO: Once the usernames are not bound to the XWiki space, revisit this code
    #if ($userName.indexOf('.') != -1)
        #set ($userDoc = $xwiki.getDocumentAsAuthor(${userName}))
    #else
        #set ($userDoc = $xwiki.getDocumentAsAuthor("XWiki.${userName}"))
    #end
    #set ($userExists = $services.user.exists($userName))
    #if (!$userExists)
        #resetPasswordBoxStart("warning")
        $services.localization.render('xe.admin.passwordReset.error.noUser', ["<strong>${escapetool.xml($userName)}</strong>"])
    #elseif ($userDoc.getObject('XWiki.LDAPProfileClass'))
        #resetPasswordBoxStart("warning")
        $services.localization.render('xe.admin.passwordReset.error.ldapUser', ["<strong>${escapetool.xml($userName)}</strong>"])
    #else
        #set ($userProperties = $services.user.getProperties($userName))
        #set ($userEmail = $userProperties.email)
        #if ("$!userEmail" == '')
            #resetPasswordBoxStart("error")
            $services.localization.render('xe.admin.passwordReset.error.noEmail')</div>
        #else
            ## Find the object that will hold the verification string
            #set ($verifObj = '')
            #set ($verifObj = $userDoc.getObject($verifClass, true))
            ## Generate a random string
            #set ($verifStr = $util.generateRandomString(30))
            ## If the class is correctly configured, the string should automatically be stored as a hash
            #set ($discard = $verifObj.set('verification', $verifStr))
            #set ($discard = $userDoc.saveAsAuthor($services.localization.render('xe.admin.passwordReset.versionComment'), true))
            ## Compose the verification URL
            #set ($userDocRef = $services.model.serialize($userDoc.documentReference, 'default'))
            #set ($parameters = {
                'u': $userDocRef,
                'v': $verifStr
            })
            #set ($passwordResetURL = $services.security.authentication.getAuthenticationExternalURL('reset', $parameters))
            ## Send the email
            #set ($from = $services.mail.sender.configuration.fromAddress)
            #if ("$!from" == '')
                #set ($from = "no-reply@${request.serverName}")
            #end
            #set ($mailTemplateReference = $services.model.createDocumentReference('', 'XWiki', 'ResetPasswordMailContent'))
            #set ($mailParameters = {'from' : $from, 'to' : $userEmail, 'language' : $xcontext.locale})
            #set ($message = $services.mail.sender.createMessage('template', $mailTemplateReference, $mailParameters))
            #set ($discard = $message.setType('Reset Password'))
            #macro (displayError $text)
                #resetPasswordBoxStart("error")
                <div class="xwikirenderingerror" title="Click to get more details about the error" style="cursor: pointer;">
                    $services.localization.render('xe.admin.passwordReset.error.emailFailed')
                </div>
                <div class="xwikirenderingerrordescription hidden">
                    <pre>${text}</pre>
                </div>
            #end
            ## Check for an error constructing the message!
            #if ($services.mail.sender.lastError)
                #displayError($exceptiontool.getStackTrace($services.mail.sender.lastError))
            #else
                ## Send the message and wait for it to be sent or for any error to be raised.
                #set ($mailResult = $services.mail.sender.send([$message], 'database'))
                ## Check for errors during the send
                #if ($services.mail.sender.lastError)
                    #displayError($exceptiontool.getStackTrace($services.mail.sender.lastError))
                #else
                    #set ($failedMailStatuses = $mailResult.statusResult.getAllErrors())
                    #if ($failedMailStatuses.hasNext())
                        #set ($mailStatus = $failedMailStatuses.next())
                        #displayError($mailStatus.errorDescription)
                    #else
                        #resetPasswordBoxStart("default")
                        $services.localization.render('xe.admin.passwordReset.emailSent', ["$userProperties.email"])
                    #end
                #end
            #end
        #end
    #end
  <div>
      <a href="$services.security.authentication.getAuthenticationURL('reset', $NULL)">$services.localization.render('xe.admin.passwordReset.error.retry')</a> |
      <a href="$xwiki.getURL('XWiki.ForgotUsername')">$services.localization.render('xe.admin.passwordReset.error.recoverUsername')</a> |
      <a href="$xwiki.getURL('XWiki.XWikiLogin', 'login')">$services.localization.render('xe.admin.passwordReset.login')</a>
  </div>
#else ## Handle verification code
    #**
     This page completes the password reset procedure. It works according to the next algorithm:
     1. Verify that the correct verification URL is entered, by checking the 'u' and 'v' request parameters against the existing ResetPasswordRequest objects
     2. Display a form requesting the new password
     3. When receiving the new password via form submission, update the user object with the new password, and remove the ResetPasswordRequest object

     URL parameters:

     u = user account in the verification URL
     v = random verification string
     p = the new password
     p2 = the new password (for misspelling check)

     !!!!! IMPORTANT !!!!!

     This document requires programming rights, so always make sure
     it is saved by a user with programming rights, and that
     it is secured against unprivileged editing.

     *###
    ##
    ##
    ## The name of the class used for storing password reset verification data.
    #set ($verifClass = 'XWiki.ResetPasswordRequestClass')
    ##
    ## START MACROS
    ##
    #**
     * Encrypt a string to get the value that would be stored inside a PasswordProperty field.
     * It is used to check if the unencrypted parameter from the URL is the value stored in the
     * ResetPasswordRequest object.
     * @param value The plaintext value to encrypt.
     * @param storedValue The current value stored in the ResetPasswordRequest object.
     * @param result The encrypted output.
     *#
    #macro(encrypt $value $storedValue $result)
        #set ($encryptedValue = $xwiki.getClass($verifClass).getXWikiClass().get('verification').getEquivalentPassword($storedValue, $value))
        #setVariable("$result", $encryptedValue)
    #end
    ##
    ##
    #**
     * Verify that the request parameters are valid.
     * @param userName The user name (full document name) received in the URL.
     * @param validationString The unencrypted key that is stored in the ResetPasswordRequestClass object.
     * @param result A boolean where the validation result is returned. True if the request is valid, false otherwise.
     *#
    #macro(verifyRequest $userName $validationString $isValid)
        #set ($isValid = false)
        #if ($validationString != '' && $userName != '')
            #set ($storedValidationString = $!xwiki.getDocumentAsAuthor($userName).getObject($verifClass).getValue('verification'))
            #encrypt($validationString, $storedValidationString, $encryptedValidationString)
            #if ($storedValidationString == $encryptedValidationString)
                #set ($isValid = true)
            #end
        #end
    #end
    ##
    ##
    #**
     * Displays the password reset form.
     * @param message An optional message to display, for example if the sent password is empty.
     * @param u The user account (full document name), which needs to be preserved.
     * @param v The validation string, which will be checked again upon receiving the form.
     *###
    #macro(displayForm $message $userName $validationString)
        #if ($message != '')
            #resetPasswordBoxStart('warning')
            $message
        #else
            #resetPasswordBoxStart('default')
        #end
        ## Load the configuration from a seperate document.
        #loadConfig('XWiki.RegistrationConfig')
        #set ($passwordFields = [])
        #definePasswordFields($passwordFields, 'p', 'p2', $passwordOptions)

        <form action="$services.security.authentication.getAuthenticationURL('reset', $NULL)" method="post" class="xform third">
            <div class="hidden">
                <input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
                <input type="hidden" name="u" value="$!escapetool.xml($userName)"/>
                <input type="hidden" name="v" value="$!escapetool.xml($validationString)"/>
            </div>
            ## A null $request is passed as parameter, since we won't display inserted passwords after a request with error.
            #generateHtml($passwordFields, $NULL)
            <div class="buttons">
                <span class="buttonwrapper"><input type="submit" value="$services.localization.render('xe.admin.passwordReset.step2.submit')" class="button"/></span>
            </div>
        </form>
    #end
    ##
    ## END MACROS
    ##
    ##
    #set ($userName = "$!request.u")
    #set ($validationString = "$!request.v")
    #set ($password = "$!request.p")
    #set ($password2 = "$!request.p2")
    #verifyRequest($userName $validationString $isValid)
    ##
    ##
    ## First, check if the page has programming rights, as nothing works otherwise
    #if ($xwiki.hasProgrammingRights())
        #if ($isValid)
            #set ($vuserDoc = $xwiki.getDocumentAsAuthor($userName))
            #if ($request.getParameterMap().containsKey('p'))## Second step, set the user password
                #validateFields($passwordFields, $request)
                #if(!$allFieldsValid)
                    #displayForm($stringtool.join($allFieldsErrors, "<br/>") $userName $validationString)
                #else
                    $vuserDoc.getObject('XWiki.XWikiUsers').set('password', $password)
                    #set($discard = $vuserDoc.removeObjects($verifClass))
                    #set ($discard = $vuserDoc.saveAsAuthor($services.localization.render('xe.admin.passwordReset.step2.versionComment.passwordReset'), true))
                    #resetPasswordBoxStart('success')
                    $services.localization.render('xe.admin.passwordReset.step2.success')
                    <a href="$xwiki.getURL('XWiki.XWikiLogin', 'login')">$services.localization.render('xe.admin.passwordReset.step2.login')</a>
                #end
            #else## First step, request the user password
                ## The user might not complete this step, and leave the URL in the (public) browser's
                ## history. Prevent reusing the URL by invalidating the initial verification URL and only
                ## post the new string in the hidden form data.
                #set ($validationString = $util.generateRandomString(30))
                #set ($discard = $vuserDoc.getObject($verifClass).set('verification', $validationString))
                #set ($discard = $vuserDoc.saveAsAuthor($services.localization.render('xe.admin.passwordReset.step2.versionComment.changeValidationKey'), true))
                #displayForm('' $userName $validationString)
            #end
        #else
            #resetPasswordBoxStart('danger')
            $services.localization.render('xe.admin.passwordReset.step2.error.wrongParameters')
            <a href="$services.security.authentication.getAuthenticationURL('reset', $NULL)">$services.localization.render('xe.admin.passwordReset.step2.backToStep1')</a>
        #end
        ##
        ## Clear private variables, so that they cannot be accessed from the rest of the page (comments, panels...)
        #set ($validationString = '')
        #set ($password = '')
        #set ($password2 = '')
        ##
        ##
    #else## No programming rights, warn and exit
        #resetPasswordBoxStart('danger')
        $services.localization.render('xe.admin.passwordReset.step2.error.noProgrammingRights')
    #end
#end
#xwikimessageboxend()
## Clear private variables, so that they cannot be accessed from the rest of the page (comments, panels...)
#set ($verifStr = '')
#set ($passwordResetURL = '')