<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.RequestStatus" locale="">
  <web>XWiki</web>
  <name>RequestsStatus</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1364502211000</creationDate>
  <parent>XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1364571947000</date>
  <contentUpdateDate>1364571947000</contentUpdateDate>
  <version>1.1</version>
  <title>$services.localization.render('xe.monitor')</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#set($monitor = $xwiki.getXWiki().getPluginManager().getPlugin("monitor"))
#if($monitor &amp;&amp; $monitor.isActive())
  #set($threadname = $request.thread)
  #if($threadname)
    #set($activeTimers = $monitor.getActiveTimerData())
    #foreach($thread in $activeTimers.keySet())
      #set($req = $activeTimers.get($thread))
      #if($req.threadName.equals($threadname))
        * {{translation key="xe.monitor.url"/}} $req.getURL() Page: $req.getWikiPage()
        * {{translation key="xe.monitor.startdate"/}} $req.startTime
        * {{translation key="xe.monitor.state"/}} $thread.getState() {{translation key="xe.monitor.alive"/}} $thread.isAlive() [[${threadname}&gt;&gt;${doc.fullName}?thread=${threadname}&amp;kill=1]]
        #if($request.kill)
          {{translation key="xe.monitor.interrupt"/}} $thread.stop()
        #end
      #end
    #end
  #else
    == {{translation key="xe.monitor.consolidateddata"/}} ==

    #set($dur = $mathtool.toInteger("${monitor.duration}"))
    #set($nbreq = $mathtool.toInteger("${monitor.requests}"))
    #set($avg = ($dur/$nbreq))

    * {{translation key="xe.monitor.duration"/}} ${monitor.getDuration()} ms
    * {{translation key="xe.monitor.requests"/}} $monitor.getRequests()
    * {{translation key="xe.monitor.average"/}} ${avg} ms

    #foreach($timer in $monitor.getTimerSummaries())
      #set($dur = $mathtool.toInteger("${timer.duration}"))
      #set($nbreq = $mathtool.toInteger("${timer.requests}"))
      #set($avg = ($dur/$nbreq))
      * $timer.name {{translation key="xe.monitor.duration.small"/}} ${timer.duration} {{translation key="xe.monitor.ms"/}} {{translation key="xe.monitor.calls"/}} $timer.nbCalls {{translation key="xe.monitor.requests"/}} $timer.requests {{translation key="xe.monitor.average"/}} ${avg} {{translation key="xe.monitor.ms"/}}
    #end

    == {{translation key="xe.monitor.requests.active"/}} ==

    {{translation key="xe.monitor.requests.currentlyrunning"/}}

    #set($timerdata = $monitor.getActiveTimerData())
    {{translation key="xe.monitor.requests.size"/}} $timerdata.size()

    #foreach($req in $timerdata)
      * {{translation key="xe.monitor.requests.page"/}} $req.getWikiPage()
      * {{translation key="xe.monitor.url"/}} $req.getURL()
      * {{translation key="xe.monitor.thread"/}} [[$req.threadName&gt;&gt;${doc.fullName}?thread=${req.threadName}]]
      * {{translation key="xe.monitor.startdate"/}} $req.startTime
    #end

    == {{translation key="xe.monitor.requests.unfinished"/}} ==

    {{translation key="xe.monitor.requests.unfinished.description"/}}

    #set($timerdata = $monitor.getLastUnfinishedTimerData())
    {{translation key="xe.monitor.requests.active.size"/}} $timerdata.size()

    #foreach($req in $timerdata)
      * {{translation key="xe.monitor.requests.page"/}} $req.getWikiPage()
      * {{translation key="xe.monitor.url"/}} $req.getURL()
      * {{translation key="xe.monitor.thread"/}} [[$req.threadName&gt;&gt;${doc.fullName}?thread=${req.threadName}]]
      * {{translation key="xe.monitor.startdate"/}} $req.startTime
    #end

    == {{translation key="xe.monitor.requests.latest"/}} ==

    {{translation key="xe.monitor.requests.latest.description" parameters="$timerdata.maxSize()"/}}

    #set($timerdata = $monitor.getLastTimerData())
    {{translation key="xe.monitor.requests.number"/}} $timerdata.size() 
    #foreach($req in $timerdata)
      * {{translation key="xe.monitor.url"/}} $req.getURL()
      * {{translation key="xe.monitor.requests.page"/}} $req.getWikiPage()
      * {{translation key="xe.monitor.thread"/}} $req.threadName
      * {{translation key="xe.monitor.duration"/}} $req.duration
      * {{translation key="xe.monitor.startdate"/}} $req.startTime
      * {{translation key="xe.monitor.enddate"/}} $req.endTime
      #foreach($timer in $req.timerList)
        ** $timer
      #end
      \\
    #end
  #end
#else
  {{warning}}{{translation key="xe.monitor.disabled"/}}{{/warning}}
#end
{{/velocity}}</content>
  <attachment>
    <filename>icon.png</filename>
    <mimetype>image/png</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <date>1213985425000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>8645</filesize>
  </attachment>
</xwikidoc>
