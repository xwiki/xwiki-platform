<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>XWiki</web>
  <name>XWikiGroupSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.XWikiGroups</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1242173909000</creationDate>
  <date>1299827657000</date>
  <contentUpdateDate>1299827657000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set($mainwk = $xcontext.isMainWiki())
$xwiki.jsfx.use('js/xwiki/usersandgroups/usersandgroups.js', true)
$xwiki.ssfx.use('js/xwiki/usersandgroups/usersandgroups.css')
$xwiki.jsfx.use('js/xwiki/table/livetable.js', true)
$xwiki.ssfx.use('js/xwiki/table/livetable.css', true)
#set($groupDoc = $doc)
#if($doc.fullName == 'Main.UserDirectory')
  #set($groupDoc = $xwiki.getDocument('XWiki.XWikiAllGroup'))
#end
#macro(hasGroupRight $right $hasGroupRight)
  #set($result = false)
  #if($!xwiki.hasAccessLevel("$!right", $xcontext.user, $doc.fullName) &amp;&amp; $doc.getObject('XWiki.XWikiGroups', false))
    #set($result = true)
  #end
  #set($hasGroupRight = $NULL)
  #setVariable("$hasGroupRight" $result)
#end
#hasGroupRight('edit' $hasEditGroupRight)
#hasGroupRight('delete' $hasDeleteGroupRight)
##
##
{{/velocity}}

{{velocity}}
## Keep testing the inline action for backward compatibility with existing groups.
#if(($xcontext.action == 'edit' || $xcontext.action == 'inline') &amp;&amp; $hasEditGroupRight)
{{html}}
  &lt;div id="addNewMember"&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td class="addlabel"&gt;$msg.get('xe.admin.groups.addUser')
          #if(!$mainwk)
            &lt;/td&gt;
            &lt;td&gt;&lt;select name="wiki" id="addUserScope"&gt;
                &lt;option value="local" selected="selected"&gt;$msg.get('xe.admin.local')&lt;/option&gt;
                &lt;option value="global"&gt;$msg.get('xe.admin.global')&lt;/option&gt;
              &lt;/select&gt;
            &lt;/td&gt;
          #else
            &lt;input type="hidden" name="wiki" value="local" /&gt;&lt;/td&gt;
          #end
        &lt;td&gt;
          &lt;input id="userSuggest" type="text" size="30" name="newMember" autocomplete="off" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;input type="button" id="addNewUser" class="button" value="$msg.get('xe.admin.groups.addUser.submit')" /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td class="addlabel"&gt;$msg.get('xe.admin.groups.addGroup')
          #if(!$mainwk)
            &lt;/td&gt;
            &lt;td&gt;&lt;select name="wiki" id="addGroupScope"&gt;
                &lt;option value="local" selected="selected"&gt;$msg.get('xe.admin.local')&lt;/option&gt;
                &lt;option value="global"&gt;$msg.get('xe.admin.global')&lt;/option&gt;
              &lt;/select&gt;
            &lt;/td&gt;
          #else
            &lt;input type="hidden" name="wiki" value="local" /&gt;&lt;/td&gt;
          #end
        &lt;td&gt;
          &lt;input id="groupSuggest" type="text" size="30" name="newMember" autocomplete="off" /&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;input type="button" id="addNewGroup" class="button" value="$msg.get('xe.admin.groups.addGroup.submit')" /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;&lt;td colspan="3" id="errMsg"&gt;&lt;/td&gt;&lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  ##
  ##
  &lt;script type="text/javascript"&gt;
    // &lt;![CDATA[
      if (typeof XWiki == "undefined") {
        var XWiki = {}; 
      }
      Object.extend(XWiki, {
        groupmanager : {
          /*
          ** Initialize Group Manager javascript widgets (called on document load).
          */
          userSuggest: null,

          groupSuggest: null,

          init: function() {
            if (XWiki.contextaction != 'view') {
              this.initSuggestWidget();
              this.initAddNewMemberWidget();
            }
          },
          initSuggestWidget: function() {
            if ($('userSuggest')) {
              $('userSuggest').observe('focus', this.createSuggest.bind(this, $('userSuggest'), 'user', true));
            }
            if ($('groupSuggest')) {
              $('groupSuggest').observe('focus', this.createSuggest.bind(this, $('groupSuggest'), 'group', false));
            }
          },
          initAddNewMemberWidget: function() {
            if ($('addNewUser')) {
              $('addNewUser').observe('click', this.addNewMember.bind(this, 'user', $('userSuggest')));
            }
            if ($('addNewGroup')) {
              $('addNewGroup').observe('click', this.addNewMember.bind(this, 'group', $('groupSuggest')));
            }
          },
          createSuggest: function(input, uorg, suggestObj) {
            // Clear the errors
            $('errMsg').innerHTML = "";
            suggesturl = "${doc.getURL('view', 'xpage=uorgsuggest&amp;classname=XWiki.XWikiUsers')}";

            if (uorg == "user") {
              suggesturl += "&amp;uorg=user&amp;wiki=" + ($('addUserScope') ? $('addUserScope').value : "local") + "&amp;";
              icon = "$xwiki.getSkinFile('icons/silk/user.png')";
            } else {
              suggesturl += "&amp;uorg=group&amp;wiki=" + ($('addGroupScope') ? $('addGroupScope').value  : "local") + "&amp;";
              icon = "$xwiki.getSkinFile('icons/silk/group.png')";
            }
            return new XWiki.widgets.Suggest(input, { script: suggesturl, varname:'input', icon:icon });
          },
          addNewMember: function(uorg, input) {
            if (input &amp;&amp; input.value.strip() != '') {
              var url = "${doc.getURL()}?xpage=adduorg&amp;uorg=" + encodeURIComponent(uorg) + "&amp;name=" + encodeURIComponent(input.value) + "&amp;form_token=$!{escapetool.url($services.csrf.getToken())}";
              new Ajax.Request(url, {
                method: 'get',
                onSuccess: function(transport) {
                  $('userSuggest').value = "";
                  $('groupSuggest').value = "";
                  var nr = parseInt(transport.responseText);
                  if (nr == 0) {
                    if (uorg == "user") {
                      $('errMsg').innerHTML = "$msg.get('xe.admin.groups.addUser.duplicate')";
                    } else {
                      $('errMsg').innerHTML = "$msg.get('xe.admin.groups.addGroup.duplicate')";
                    }
                  } else {
                    var end = editgrouptable.limit;
                    var start = editgrouptable.lastOffset;
                    editgrouptable.clearCache();
                    if (start &lt; 1) {
                      start = 1;
                    }
                    editgrouptable.getRows(start, end, start, end);
                  }
                }
              });
            }
          }
        }
      });
      XWiki.groupmanager.init();
    // ]]&gt;
  &lt;/script&gt;
{{/html}}#end
#set($columnOptions = {
  "member" : {'link': 'auto', 'type': 'text'},
  '_avatar' : { 'type' : 'none', 'link' : 'field', 'html' : 'true', 'sortable' : false },
  "_actions" : {
    'actions': ['delete'],
    'actionCallbacks': {'delete': 'table.deleteRow(i);'},
    'ajaxActions': {'delete': true}
   }
})
## Keep testing the inline action for backward compatibility with existing groups.
#if(($xcontext.action == 'edit' || $xcontext.action == 'inline') &amp;&amp; $hasDeleteGroupRight)
  #set($columns = ['_avatar', 'member', '_actions'])
#else
  #set($columns = ['_avatar', 'member'])
#end
#livetable('groupusers', $columns, $columnOptions, {'url' : "${groupDoc.getURL('view', 'xpage=getgroupmembers')}", 'translationPrefix' : 'xe.admin.groups.', 'javascriptName' : 'editgrouptable'})
{{/velocity}}</content>
</xwikidoc>
