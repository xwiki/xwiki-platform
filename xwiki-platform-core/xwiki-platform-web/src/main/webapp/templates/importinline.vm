##---------------------------------------------------------------------------
## If the Document to which XARs will be attached to doesn't exist, then
## create it.
## Note that the upload action could automatically create it but we want to
## control the creation so that we can set the parent and thus not make it
## orphaned + we set a save comment and make it a minor edit.
##---------------------------------------------------------------------------
#set($importDoc = $xwiki.getDocument('XWiki.XWikiPreferences'))
#if($importDoc.isNew())
  $importDoc.setParent('XWiki.WebHome')
  $importDoc.save("Creating document to which to attach XAR files to import", true)
#end
##---------------------------------------------------------------------------
#if($request.xredirect)
  #set($redirect = $request.xredirect)
#else
  #set($redirect = $xwiki.relativeRequestURL)
#end
#if(!$redirect)
  #set($redirect = $importDoc.getURL('import', 'section=Import'))
#end
##---------------------------------------------------------------------------
## Import the documents from the selected XAR.
##---------------------------------------------------------------------------
#if("$!{request.action}" == 'import')
<p class="legend">$msg.get('import') #if("$!{request.withversions}" == '1')$msg.get('export_addhistory')#end</p>
#template("imported.vm")
##---------------------------------------------------------------------------
## Browse the XARs and let the user select a XAR and the list of documents
## to import from that XAR.
##---------------------------------------------------------------------------
#else
  #set($baseQueryString = "editor=$!{request.editor}&amp;section=$!{request.section}")
  $xwiki.jsfx.use('js/xwiki/importer/import.js', true)##
  $xwiki.ssfx.use('js/xwiki/importer/import.css', true)##
  $xwiki.jsfx.use('uicomponents/widgets/upload.js', {'forceSkinAction': true, 'language': ${xcontext.language}})##
  $xwiki.ssfx.use('uicomponents/widgets/upload.css', true)##
  <div id="import">
    <div id="packagelist">
      <div class="legend">$msg.get('core.importer.uploadPackage')</div>
      ## Let the user upload XAR files.
      <form action="$doc.getURL('upload')" enctype="multipart/form-data" method="post" id="AddAttachment">
        <div>
          ## CSRF prevention
          <input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
          <input type="hidden" name="xredirect" value="$!{escapetool.xml($redirect)}" />
          <fieldset id="attachform">
            ## Temporarily disabled, until we fix attachment name handling
            ## <div><label id="xwikiuploadnamelabel" for="xwikiuploadname">$msg.get('core.viewers.attachments.upload.filename')</label></div>
            <div><input id="xwikiuploadname" type="hidden" name="filename" value="" size="30"/></div>
            <div class="package-upload">
               <label for="xwikiuploadfile" class="hidden">$msg.get('core.viewers.attachments.upload.file')</label>
               <input id="xwikiuploadfile" type="file" name="filepath" value="" size="30" class="uploadFileInput"/>
               <span class="buttonwrapper">
                 <input type="submit" value="Upload" class="button" />
               </span>
            </div>
          </fieldset>
        </div>
      </form>
    <div class="legend">$msg.get('core.importer.availablePackages')</div>
    <div id="packagelistcontainer">
      #template('packagelist.vm')
    </div> ## packagelistcontainer
    </div> ##Â packagelist
    <div id="packagecontainer">
      #if("$!request.file" != '')
        ##
        ## If we get here, it means javascript is not activated on the user's browser (otherwise the attachment link
        ## click would have been intercepted). We display a basic UI (list of checkboxes) to chose which documents in the archive to import.
        ##
        #set($attach = $doc.getAttachment($request.file))
        #if($attach)
          #set($packager = $xwiki.package)
          #set($ok = $packager.importPackageFromByteArray($attach.content))
          #set($json = $packager.toJSON())
          #if(!$ok)
            #error("There was an error reading the file ${escapetool.xml(${request.file})}. $!xcontext.import_error")
          #else
          <div class="legend">$msg.get('core.importer.availableDocuments')</div>
          <div id="packageDescription">
            <div class="packageinfos">
              <div>
                <span class="label">$msg.get('core.importer.package')</span>
                <span class="filename">$attach.filename</span>
              </div>
              #if("$!packager.name" != '')
              <div>
                <span class="label">$msg.get('core.importer.package.description')</span>
                <span class="name">$packager.name</span>
              </div>
              #end
              #if("$!packager.version" != '')
              <div>
                <span class="label">$msg.get('core.importer.package.version')</span>
                <span class="version">$packager.version</span>
              </div>
              #end
              #if("$!packager.authorName" != '')
              <div>
                <span class="label">$msg.get('core.importer.package.author')</span>
                <span class="author">$packager.getAuthorName()</span>
              </div>
              #end
              #if("$!packager.licence" != '')
              <div>
                <span class="label">$msg.get('core.importer.package.licence')</span>
                <span class="licence">$packager.licence</span>
              </div>
              #end
            </div>
            <form action="$!{importaction}" method="post" class="static-importer">
              <div>
                ## CSRF prevention
                <input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
                <input type="hidden" name="action" value="import" />
                <input type="hidden" name="name" value="$!{escapetool.xml($request.file)}" />
                <div id="package">
                  <ul class="xlist package">
                    #foreach($space in $sorttool.sort($json.get('files').keySet()))
                    <li class="xitem xunderline">
                      <div class="xitemcontainer">
                      <div class="spacename">$space</div>
                      <div class="clearfloats"></div>
                      <div class="pages">
                      <ul class="xlist pages">
                       #foreach($document in $sorttool.sort($json.get('files').get($space).keySet()))
                        #foreach($version in $json.get('files').get($space).get($document))
                        <li class="xitem xhighlight">
                          <div class="xitemcontainer xpagecontainer">
                            <span class="checkbox">
                            <input type="checkbox" name="pages"
                                   value="${version.fullName}#if("$!version.language" != ''):${version.language}#end" checked />
                            </span>
                            <span class="documentName">
                            <input type="hidden" name="$!{escapetool.xml($version.fullName)}:$!{escapetool.xml($version.language)}" value="$!{escapetool.xml($version.language)}" />
                            $document #if("$!version.language" != '') - $version.language #end
                            </span>
                            <div class="clearfloats"></div>
                          </div>
                        </li>
                        #end
                       #end
                      </ul>
                      </div>
                      </div>
                    </li>
                    #end
                </ul>
                <div class="importOption">
                  <em>$msg.get('core.importer.whenDocumentAlreadyExists')</em>
                  <div class="historyStrategyOption">
                     <input type="radio" name="historyStrategy" value="add" checked="checked" />
                     $msg.get('core.importer.addNewVersion')
                  </div>
                  <div class="historyStrategyOption">
                     <input type="radio" name="historyStrategy" value="replace" />
                     $msg.get('core.importer.replaceDocumentHistory')
                  </div>
                  <div class="historyStrategyOption">
                     <input type="radio" name="historyStrategy" value="reset" />
                     $msg.get('core.importer.resetHistory')
                  </div>
                </div>
                #if($packager.hasBackupPackImportRights())
                <div class="importOption">
                  <input type="checkbox" name="importAsBackup" value="true" #if($packager.isBackupPack())checked="checked"#end/>
                  $msg.get('core.importer.importAsBackup')
                </div>
                #end
                <span class="buttonwrapper">
                  <input class="button" type="submit" value="$msg.get('core.importer.import')" />
                </span>
              </div>
              </div>
            </form>
          </div>
          #end ## package is valid
        #end ## attachment exists
      #end
    </div> ## package
    <div class="clearfloats"></div>
  </div>
#end
