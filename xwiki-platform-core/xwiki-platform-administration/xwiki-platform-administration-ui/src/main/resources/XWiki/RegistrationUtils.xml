<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.2" reference="XWiki.RegistrationUtils" locale="">
  <web>XWiki</web>
  <name>RegistrationUtils</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>RegistrationMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
## Still need to add a JSX object to this page for live validation the password fields.
#set ($useLiveValidation = true)
#if($useLiveValidation)
    $xwiki.get('jsfx').use('uicomponents/widgets/validation/livevalidation_prototype.js')
    $xwiki.get('ssfx').use('uicomponents/widgets/validation/livevalidation.css', true)
#end
#macro (generatePasswordFields, $fields, $passwordFieldName, $confirmPasswordFieldName)
 ##The password field, mandatory and must be at least 6 characters long.
  #set($field =
    {'name': $passwordFieldName,
      'label': $services.localization.render('core.register.password'),
      'params': {
        'type': 'password',
        'autocomplete': 'off',
        'size': '60'
      },
      'validate': {
        'mandatory': {
          'failureMessage': $services.localization.render('core.validation.required.message')
        },
        'regex': {
          'pattern': '/.{6,}/',
          'failureMessage': $services.localization.render('xe.admin.registration.passwordTooShort')
        }
      }
    })
  #set($discard = $fields.add($field))
  ##
  ##The confirm password field, mandatory, must match password field, and must also be 6+ characters long.
  #set($field =
    {'name': $confirmPasswordFieldName,
      'label': $services.localization.render('core.register.passwordRepeat'),
      'params': {
        'type': 'password',
        'autocomplete': 'off',
        'size': '60'
      },
      'validate': {
        'mandatory': {
          'failureMessage': $services.localization.render('core.validation.required.message')
        },
        'mustMatch': {
          'name': $passwordFieldName,
          'failureMessage': $services.localization.render('xe.admin.registration.passwordMismatch')
        },
        'regex': {
          'pattern': '/.{6,}/',
          'failureMessage': $services.localization.render('xe.admin.registration.passwordTooShort')
        }
      }
    })
  #set($discard = $fields.add($field))
#end
#*
 * Generate HTML form, this is the only place where HTML is written.
 *
 * @param $fields The array of fields to use for generating html code.
 * @param $fieldMandatoryStar The tag parameters for a * indicating a mandatory field.
 * @param $failureMessageParams The tag parameters for a failure message.
 *###
#macro(generateHtml, $fields, $fieldMandatoryStar, $failureMessageParams)
  ## Put the same values back into the fields.
  ##
  &lt;dl&gt;
  #foreach($field in $fields)
    #if($field.get('name'))
      #set($fieldName = $field.get('name'))
      #if($field.get('label'))
        #set($label = $field.get('label'))
        &lt;dt&gt;&lt;label for="$fieldName"&gt;$label
        #if($field.get('validate').get('mandatory'))
          &lt;span ##
          #foreach($entry in $fieldMandatoryStar.entrySet())
            $entry.getKey()="$entry.getValue()" ##
          #end
          &gt;$services.localization.render('core.validation.required')&lt;/span&gt;
        #end
          &lt;/label&gt;
        &lt;/dt&gt;
      #end
      ## If no tag then default tag is &lt;input&gt;
      #if($field.get('tag'))
        #set($tag = $field.get('tag'))
      #else
        #set($tag = 'input')
      #end
      &lt;dd&gt;&lt;$tag id="$fieldName" ##
      #set($params = $field.get('params'))
      ## If no name parameter is spacified, then we use the field name
      #if(!$params.get('name'))
        #set($discard = $params.put('name', $fieldName))
      #end
      #foreach($entry in $params.entrySet())
        ## If a parameter is specified as '' then we don't include it.
        #if($entry.getValue() != '')
          $entry.getKey()="$escapetool.xml($entry.getValue())" ##
        #end
      #end
      &gt;&lt;/$tag&gt;
      #if($field.get('error'))
        &lt;span ##
        #foreach($entry in $failureMessageParams.entrySet())
          $entry.getKey()="$entry.getValue()" ##
        #end
        &gt;$field.get('error')&lt;/span&gt;
      #end
      &lt;/dd&gt;
    #else
      ERROR: Field with no name.
    #end##if fieldName exists
  #end
  &lt;/dl&gt;
#end
##
#macro(generateJavascript, $fields)
  &lt;script type='text/javascript'&gt;
  /* &lt;![CDATA[ */
  document.observe('xwiki:dom:loaded', function() {
  ##
  #foreach($field in $fields)
    #if($field.get('validate') &amp;&amp; $field.get('name'))
      #set($validate = $field.get('validate'))
      #if(($validate.get('mandatory') &amp;&amp; !$validate.get('mandatory').get('noscript'))
          || ($validate.get('regex') &amp;&amp; !$validate.get('regex').get('noscript'))
          || ($validate.get('mustMatch') &amp;&amp; !$validate.get('mustMatch').get('noscript')))
        #set($fieldName = $field.get('name'))
        #if($validate.get('fieldOkayMessage'))
          #set($okayMessage = $validate.get('fieldOkayMessage'))
        #else
          #set($okayMessage = $services.localization.render('core.validation.valid.message'))
        #end
        var ${fieldName}Validator = new LiveValidation("$fieldName", { validMessage: "$okayMessage", wait: 500} );
        ##
        #if($validate.get('mandatory'))
          #set($mandatory = $validate.get('mandatory'))
          #if($mandatory.get('failureMessage') &amp;&amp; !$mandatory.get('noscript'))
            ${fieldName}Validator.add( Validate.Presence, { failureMessage: "$!mandatory.get('failureMessage')"} );
          #end
        #end
        ##
        #if($validate.get('mustMatch'))
          #set($mustMatch = $validate.get('mustMatch'))
          #if($mustMatch.get('name') &amp;&amp; $mustMatch.get('failureMessage')  &amp;&amp; !$mustMatch.get('noscript'))
            ${fieldName}Validator.add( Validate.Confirmation, { match: $$("input[name=$!mustMatch.get('name')]")[0], failureMessage: "$!mustMatch.get('failureMessage')"} );
          #end
        #end
        ##
        #if($validate.get('regex'))
          #set($regex = $validate.get('regex'))
          #set($pattern = "")
          #if($regex.get('jsPattern'))
            #set($pattern = $regex.get('jsPattern'))
          #elseif($regex.get('pattern'))
            #set($pattern = $regex.get('pattern'))
          #end
          #set($failMessage = "")
          #if($regex.get('jsFailureMessage'))
            #set($failMessage = $regex.get('jsFailureMessage'))
          #elseif($regex.get('failureMessage'))
            #set($failMessage = $regex.get('failureMessage'))
          #end
          #if($pattern != '' &amp;&amp; $failMessage != '' &amp;&amp; !$regex.get('noscript'))
            ${fieldName}Validator.add( Validate.Format, { pattern: $pattern, failureMessage: "$failMessage"} );
          #end
        #end##if regex
      #end##if contains js validateable fields.
    #end##if validate
  #end##loop
    });// ]]&gt;
    &lt;/script&gt;
#end
{{/velocity}}</content>
</xwikidoc>
