## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#set ($discard = $xwiki.ssfx.use('uicomponents/job/job.css', true))

$services.template.execute('logging_macros.vm')

#macro (displayJobProgressBar $jobStatus $hideLog)
  <div class="ui-progress">
    <div class="box info hidden" id="state-none-hint">
      $services.localization.render("job.state.NONE.hint")
    </div>
    <div class="ui-progress-background">
      #set ($percent = $jobStatus.progress.offset)
      ## There is no progress information if the job was scheduled but hasn't started yet.
      #if (!$percent)
        #set ($percent = 0)
      #end
      #set ($percent = $numbertool.toNumber($mathtool.mul($percent, 100)).intValue())
      <div class="ui-progress-bar green" style="width:${percent}%"></div>
    </div>
    #if (!$hideLog && $jobStatus && $jobStatus.logTail.size() > 0)
      <p class="ui-progress-message">
        #printLogMessage($jobStatus.logTail.lastLogEvent)
      </p>
    #end
  </div>
#end

#macro (displayJobStatusLog $status $collapsed)
  <dl class="xform">
    ## Collapse the job log if the job is waiting for user input (leave more space for the job question).
    <dt>
      <label class="collapse-toggle#if ($collapsed || $status.state == 'WAITING') collapsed#end"
          data-target-xpath="parent::*/following-sibling::*">
        <span class="icon-closed">$services.icon.renderHTML('caret-right')</span>
        <span class="icon-opened">$services.icon.renderHTML('caret-down')</span>
        #set ($jobType = $status.jobType)
        $services.localization.render(["job.log.label.$jobType", 'job.log.label'])
      </label>
    </dt>
    <dd>#printStatusLog($status)</dd>
  </dl>
#end

#macro (printStatusLog $status)
  #if ($status.state != 'FINISHED')
    #set($loading = true)
  #end
  #printLogs($status.logTail $loading)
#end

#macro (displayJobQuestion $jobStatus)
  <div class="ui-question"></div>
#end

#macro (getJobStatusJSON $status $json $translationPrefix)
  #set ($logOffset = $numbertool.toNumber($request.logOffset).intValue())
  #if (!$logOffset)
    #set ($logOffset = 0)
  #else
    #set ($logOffset = $mathtool.max($logOffset, 0))
  #end
  #set ($log = [])
  #foreach ($logEvent in $status.logTail.getLogEvents($logOffset, -1))
    #set ($discard = $log.add({
      'level': $logEvent.level.toString().toLowerCase(),
      'renderedMessage': "#printLog($logEvent)"
    }))
  #end
  #set ($json = $NULL)
  #setVariable("$json" {
    'id': $status.request.id,
    'state': $status.state,
    'progress': {
      'offset': $status.progress.offset
    },
    'log': {
      'offset': $logOffset,
      'items': $log
    },
    'message' : "#displayJobStatusMessage($status, $NULL, $NULL, $NULL, $translationPrefix)",
    'questionTimeLeft' : $status.getQuestionTimeLeft('NANOSECONDS')
  })
#end

#macro(displayJobStatusMessage $status $successKey $errorKey $canceledKey $translationPrefix)
  #set ($state = $status.state)
  #set ($finished = $state == 'FINISHED')
  #if (!$finished)
    ## No message.
  #else
    #displayJobFinishedMessage($status, $successKey, $errorKey, $canceledKey, $translationPrefix)
  #end
#end

#macro (jobFinishedMessage $status $translationPrefix $successKey $errorKey $canceledKey $warningKey)
  #if ($status.error)
    #set($messageKeys = [$errorKey, "${translationPrefix}.finish.error", "job.status.${status.jobType}.error", 'job.status.error'])
    #set($messageClass = 'errormessage')
  #elseif ($status.canceled)
    #set($messageKeys = [$canceledKey, "${translationPrefix}.finish.canceled", "job.status.${status.jobType}.canceled", 'job.status.canceled'])
    #set($messageClass = 'warningmessage')
  #elseif ($jobStatus.logTail.hasLogLevel('error'))
    #set($messageKeys = [$warningKey, "${translationPrefix}.finish.warning", "job.status.${status.jobType}.warning", 'job.status.warning'])
    #set($messageClass = 'warningmessage')
  #else
    #set($messageKeys = [$successKey, "${translationPrefix}.finish.success", "job.status.${status.jobType}.success", 'job.status.success'])
    #set($messageClass = 'successmessage')
  #end
  <div class="box $messageClass">
    $services.localization.render($messageKeys)
  </div>
#end

#macro (displayJobFinishedMessage $status $successKey $errorKey $canceledKey $translationPrefix)
  #set ($state = $status.state)
  #set ($finished = $state == 'FINISHED')
  #if (!$finished)
    ## No message.
  #else
    #jobFinishedMessage($status, $translationPrefix, $successKey, $errorKey, $canceledKey)
    #if ($status.error)
      <h4>$services.localization.render('detailedinformation')</h4>
      #printStatusLog($status)
    #end
  #end
#end

#macro (outputJobStatusJSON $jobStatus $translationPrefix)
  #getJobStatusJSON($jobStatus, $json, $translationPrefix)
  #set ($json.message = "#displayJobFinishedMessage($jobStatus, $NULL, $NULL, $NULL, $translationPrefix)")
  $response.setContentType('application/json')
  $jsontool.serialize($json)
#end

#macro (displayJobStatus $jobStatus $translationPrefix $jobStatusURL $showLogs)
  #set ($discard = $xwiki.jsfx.use('uicomponents/job/job.js'))
  #set ($jobState = $jobStatus.state)
  #set ($finished = $jobState == 'FINISHED')
  #set ($jobRequest = $jobStatus.request)
  #if (!$jobStatusURL)
    #set ($jobStatusURL = $doc.getURL('get', $escapetool.url({
      'xpage': 'job_status_json',
      'outputSyntax': 'plain',
      'jobId': $jobRequest.id,
      'translationPrefix': $translationPrefix
    })))
  #end
  <div class="xcontent job-status" data-url="$escapetool.xml($jobStatusURL)">
    #set($titleKey = "${translationPrefix}.label")
    #if ($services.localization.get($titleKey))
      <h2>$services.localization.render($titleKey)</h2>
      #set($titleHintKey = "${translationPrefix}.hint")
      #if ($services.localization.get($titleHintKey))
        <p class="text-muted small">$services.localization.render($titleHintKey)</p>
      #end
    #end
    #if (!$finished)
      #displayJobProgressBar($jobStatus)
    #else
      #jobFinishedMessage($status, $translationPrefix)
    #end
    #if ($showLogs || $isAdvancedUser || $isSuperAdmin)
      #displayJobStatusLog($jobStatus true)
    #end
  </div>
#end