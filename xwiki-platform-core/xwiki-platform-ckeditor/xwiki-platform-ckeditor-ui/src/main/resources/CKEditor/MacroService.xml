<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.6" reference="CKEditor.MacroService" locale="">
  <web>CKEditor</web>
  <name>MacroService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>CKEditor.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="CKEditor.VelocityMacros" /}}

{{velocity output="false"}}
## ================================================================
## Returned JSON format:
##
## {
##   'options': {
##     'allMacrosExcludedCategories': [
##       (translated category name), ...
##     ]
##   },
##   'list': [
##     {
##       'id': (macro id),
##       'name': (translated macro name),
##       'description': (translated macro description),
##       'defaultCategory': (translated macro category)
##     },
##     ...
##   ],
##   'notinstalled': [
##     {
##       'id': (macro id),
##       'name': (translated macro name),
##       'description': (translated macro description),
##       'defaultCategory': '_notinstalled',
##       'extensionId':	(extension id)
##       'extensionVersion': (extension version)
##       'extensionType': (extension type)
##       'extensionRecommended': (is extension recommended)
##       'extensionName': (extension name)
##       'extensionSummary': (extension summary)
##       ]
##     },
##     ...
##   ]
## }
## ================================================================
#macro (getMacroList $syntaxId)

  ## Loads the css resources to display the macros list
  ## TODO: Refactor once we add support for loading css files from javascript without velocity.
  #if ($xcontext.action == 'get')
    #template('display_macros.vm')
    #initRequiredSkinExtensions()
  #end

  #set ($discard = $xwiki.linkx.use($services.webjars.url('selectize.js', 'css/selectize.bootstrap3.css'),
    {'type': 'text/css', 'rel': 'stylesheet'}))
  #set ($discard = $xwiki.ssfx.use('uicomponents/suggest/xwiki.selectize.css', true))

  #if ($xcontext.action == 'get')
    #getRequiredSkinExtensions($requiredSkinExtensions)
    #set ($discard = $response.setHeader('X-XWIKI-HTML-HEAD', $requiredSkinExtensions))
  #end

  #set ($syntax = $services.rendering.resolveSyntax($syntaxId))
  #set ($macroDescriptors = $services.rendering.getMacroDescriptors($syntax))
  #set ($data = {})
  #set ($allMacrosExcludedCategories = [])
  #set ($discard = $allMacrosExcludedCategories.add("#maybeTranslate('rendering.macroCategory.Internal' 'Internal')"))
  #set ($discard = $allMacrosExcludedCategories.add("#maybeTranslate('rendering.macroCategory.Deprecated' 'Deprecated')"))
  #set ($discard = $data.put('options', { 'allMacrosExcludedCategories' : $allMacrosExcludedCategories }))
  ## If the current user do not want to display hidden documents, we initialize the set of hidden default
  ## categories.
  ## TODO: Make the list of hidden by default categories configurable from the administration (XWIKI-19993).
  #if(!$services.user.getProperties().displayHiddenDocuments())
    #set ($hiddenCategories = $services.rendering.getHiddenMacroCategories())
  #else
    #set ($hiddenCategories = [])
  #end
  #set ($macroList = [])
  #set ($installedMacros = [])
  #foreach ($macroDescriptor in $macroDescriptors)
    #set ($discard = $installedMacros.add($macroDescriptor.id.id))

    #set ($macroTranslationKey = "rendering.macro.$macroDescriptor.id")
    #set ($categories = [])
    #set ($hidden = false)
    #foreach ($category in $services.rendering.getMacroCategories($macroDescriptor.id))
      #set ($macroCategoryTranslationKey = "rendering.macroCategory.$category")
      #set ($hidden = $hidden || $hiddenCategories.contains($category))
      #set ($discard = $categories.add({
        'id': $category,
        'label': "#maybeTranslate($macroCategoryTranslationKey $category)"
      }))
    #end

    #if (!$hidden)
      #set ($defaultCategoryTranslation = "rendering.macroCategory.${macroDescriptor.defaultCategory}")
      #set ($discard = $macroList.add({
        'id': $macroDescriptor.id,
        'name': "#maybeTranslate(""${macroTranslationKey}.name"" $macroDescriptor.name)",
        'description': "#maybeTranslate(""${macroTranslationKey}.description"" $macroDescriptor.description)",
        'defaultCategory': "#maybeTranslate($defaultCategoryTranslation $macroDescriptor.defaultCategory)",
        'categories': $categories
      }))
    #end
  #end
  #set ($macroList = $collectiontool.sort($macroList, 'name'))
  #set ($discard = $data.put('list', $macroList))
  ## Get macros provided by compatible available extensions
  #set ($macroExtensionsList = [])
  #set($extensionQuery = $services.extension.index.newQuery("$!request.search"))
  #set ($discard = $extensionQuery.addFilter('components__org.xwiki.rendering.macro.Macro', '', 'MATCH'))
  #if ($xcontext.isMainWiki())
    #set ($discard = $extensionQuery.setCompatible(true, '', "wiki:$xcontext.database"))
  #else
    #set ($discard = $extensionQuery.setCompatible(true, "wiki:$xcontext.database"))
  #end
  #set ($discard = $extensionQuery.setInstalled(false, '', "wiki:$xcontext.database"))
  #set ($extensions = $services.extension.index.repository.search($extensionQuery))
  #if ($extensions.size &gt; 0)
    #set ($macroExtensionsMap = {})
    #foreach ($extension in $extensions)
      ## TODO: move to a proper generic API to check if an extension can be installed by a given user
      #set ($extensionInstallAllowed = $services.security.authorization.hasAccess('programming', $xcontext.userReference, $NULL)
        || (($extension.type == 'xar' || $extension.type == 'webjar')
            &amp;&amp; $services.security.authorization.hasAccess('admin', $xcontext.userReference, "wiki:$xcontext.database") &amp;&amp; $services.extension.isAllowed($extension, "wiki:$xcontext.database")))
      #foreach ($extensionComponent in $extension.getComponents())
        #if ($extensionComponent.roleType == 'org.xwiki.rendering.macro.Macro')
          ## Skip macros identifiers for which a macro is already installed
          #if (!$installedMacros.contains($extensionComponent.roleHint))
            #set ($discard = $macroExtensionsList.add({
                'id' : {
                    'id' : $extensionComponent.roleHint
                  },
                'name': $extensionComponent.roleHint,
                'description': $extension.summary,
                'defaultCategory': '_notinstalled',
                'categories': [{
                  'id' :'_notinstalled',
                  'label': $services.localization.render('macroSelector.filter.category.notinstalled')
                }],
                'extensionId' : $extension.id.id,
                'extensionVersion' : $extension.id.version.value,
                'extensionType' : $extension.type,
                'extensionRecommended': $extension.recommended,
                'extensionName': $extension.name,
                'extensionSummary': $extension.summary,
                'extensionInstallAllowed': $extensionInstallAllowed
              }))
          #end
        #end
      #end
    #end
    #set ($discard = $data.put('notinstalled', $macroExtensionsList))
  #end
#end

#macro (maybeGetMacroDescriptor $macroIdAsString)
  #ckeditor_initRequiredSkinExtensions()
  #set ($macroDescriptor = $services.rendering.getMacroDescriptorUI($macroIdAsString))
  #if ($macroDescriptor)
    #set ($data = {
      'descriptor': $macroDescriptor,
      'requiredSkinExtensions': "#ckeditor_getRequiredSkinExtensions()"
    })
  #end
#end

#macro (maybeTranslate $key $defaultValue)
  #if ($services.localization.get($key))
    $services.localization.render($key)##
  #else
    $!defaultValue##
  #end
#end

#macro (installMacroExtension $extensionId, $extensionVersion)
  #set ($extension = $services.extension.index.repository.resolve("$extensionId/$extensionVersion"))
  #if ($extension)
    ## Find where to install it
    ## 1) Check if a diffferent version is already installed
    ## 2) Check if it's allowed to install it at current wiki level
    #set ($rootNamespace = $NULL)
    #set ($currentWikiNamespace = "wiki:$xcontext.database")
    #if ($services.extension.installed.getInstalledExtension($extensionId, $rootNamespace))
      #set ($extensionNamespace = $rootNamespace)
    #elseif ($services.extension.installed.getInstalledExtension($extensionId, $currentWikiNamespace))
      #set ($extensionNamespace = $currentWikiNamespace)
    #else
      #if ($services.extension.isAllowed($extension, "wiki:$xcontext.database"))
        #set ($extensionNamespace = $currentWikiNamespace)
      #else
        #set ($extensionNamespace = $NULL)
      #end
    #end
    ## Make the install non interractive
    #set ($installRequest = $services.extension.createInstallRequest($extensionId, $extensionVersion, $extensionNamespace))
    #set ($discard = $installRequest.setInteractive(false))
    ## Start the install
    #set ($job = $services.extension.install($installRequest))
    ## Wait for the job to finish
    #set ($discard = $job.join())
    #if ($job.status.error)
      ## The install failed
      $response.sendError(500, $exceptiontool.getRootCauseMessage($job.status.error))
    #else
      ## The install succeeded
      #set ($data = {
        'extensionId': $extensionId,
        'extensionVersion': $extensionVersion,
        'extensionNamespace': $extensionNamespace
      })
    #end
  #else
    $response.sendError(404, $exceptiontool.getRootCauseMessage($job.status.error))
  #end
#end

#macro (getMacroParameters $macroId $html)
  #set ($data = $services.rendering.getMacroParametersFromHTML($macroId, $html))
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ("$!request.action" == 'install')
  #if ($services.csrf.isTokenValid($request.form_token))
    #installMacroExtension($request.extensionId, $request.extensionVersion)
  #else
    $response.sendError(403)
  #end
#elseif ("$!request.data" != '')
  #set ($data = $NULL)
  #if ($request.data == 'list')
    #getMacroList($request.syntaxId)
  #elseif ($request.data == 'descriptor')
    #maybeGetMacroDescriptor($request.macroId)
  #elseif ($request.data == 'macroParameters')
    #getMacroParameters($request.macroId, $request.macroHtml)
  #end
  #if ($data)
    #set ($discard = $response.setContentType('application/json'))
    $jsontool.serialize($data)
  #else
    $response.sendError(404)
  #end
#end
{{/velocity}}</content>
</xwikidoc>
