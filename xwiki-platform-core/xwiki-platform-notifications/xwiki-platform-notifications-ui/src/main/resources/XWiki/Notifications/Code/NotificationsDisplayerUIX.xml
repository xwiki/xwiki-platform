<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.Notifications.Code.NotificationsDisplayerUIX" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>NotificationsDisplayerUIX</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1488272751000</creationDate>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1488290404000</date>
  <contentUpdateDate>1488288100000</contentUpdateDate>
  <parent>XWiki.Notifications.Code.WebHome</parent>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity}}
#********************************************************
    List the notifications of the current user as JSON
********************************************************#
#if ('get' == $xcontext.action &amp;&amp; 'GET' == $request.method)
  #set ($batchSize = 5)
  #set ($notifications = [])
  #if ("$!request.untilDate" != '' &amp;&amp; "$!request.blackList" != '')
    #set ($untilDate = $xwiki.jodatime.getDateTime($numbertool.toNumber($request.untilDate).longValue()).toDate())
    #set ($blackList = $request.blackList.split(','))
    #set ($events = $services.notification.getEvents(false, $batchSize, $untilDate, $blackList))
  #else
    #set ($events = $services.notification.getEvents(false, $batchSize))
  #end
  #foreach ($status in $services.notification.getCompositeEventStatuses($events))
    #set ($event = $status.compositeEvent)
    #set ($notification = {
      'ids'         : $event.eventIds,
      'type'        : $event.type,
      'read'        : $status.status,
      'dates'       : $event.dates
    })
    #if ($event.document)
      #set ($discard = $notification.put('document', $services.model.serialize($event.document, 'default')))
    #end
    #try("notificationException")
      #set ($discard = $notification.put('html', $services.rendering.render($services.notification.render($event), 'html/5.0')))
    #end
    #if ("$!notificationException" != '')
      #set ($discard = $notification.put('exception', $notificationException.toString()))
    #end
    #set ($discard = $notifications.add($notification))
  #end
  #set ($discard = $response.setContentType('application/json'))
  $jsontool.serialize({'notifications': $notifications, 'unread': $services.notification.getEventsCount(true, 21)})
#********************************************************
             Mark a notification as read
********************************************************#
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'read' == $request.action)
  #set ($eventIds = $request.eventIds.split(','))
  #set ($read = "$!request.read")
  #if ($eventIds.lenght == 0 || $read.isEmpty())
    #set ($discard = $response.setStatus(400))
  #else
    #foreach ($eventId in $eventIds)
      #set ($discard = $services.notification.saveEventStatus($eventId, $read.equals('true')))
    #end
  #end
#********************************************************
           Change the start date of the user
********************************************************#
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'setStartDate' == $request.action)
  #set ($startDate = $datetool.date)
  #if ("$!request.date" != '')
    #set ($startDate = $xwiki.jodatime.getDateTime($numbertool.toNumber($request.date).longValue()).toDate())
  #end
  #set ($discard = $services.notification.setStartDate($datetool.date))
#end
{{/velocity}}
</content>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>2f3e29b0-440a-4cc8-9a4c-b98f0a647f55</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery'], function ($) {
  'use strict';

  /**
   * The notification batch' size
   */
  var notificationsLimit = 5;

  /**
   * Maximum number of events to count
   */
  var maxCountNumber = 20;

  /**
   * The current number of unread notifications
   */
  var notificationCount = 0;

  /**
   * The list of the ids of events that have already been displayed and that we don't want to get again in next batches.
   */
  var blackList = [];

  /**
   * URL to the service that return the notifications to display
   */
  var url = new XWiki.Document(XWiki.Model.resolve('XWiki.Notifications.Code.NotificationsDisplayerUIX',
    XWiki.EntityType.DOCUMENT)).getURL('get', 'outputSyntax=plain');

  /**
   * Update notification counter
   */
  var updateNotificationCount = function (count) {
    // Get the counter
    var counter = $('.notifications-count');
    // Update the global variable
    notificationCount = count;
    // Remove the counter if there is no unread notifications
    if (count == 0) {
      counter.remove();
      return;
    }
    // Create the counter if it is not present
    if (counter.length == 0) {
      counter = $('&lt;span&gt;').addClass('notifications-count badge');
      $('#tmNotifications &gt; a.icon-navbar').after(counter);
    }
    // Update the counter
    counter.text(count);
    if (count &gt; maxCountNumber) {
      counter.text(maxCountNumber + '+');
    };
  };

  /**
   * Add a button to clear all the notifications (which actually only change the start date of the user).
   */
  var createCleanButton = function (startDate) {
    var markAllReadButton = $('&lt;a href="#"&gt;')
      .addClass('notification-event-clean')
      .html('$services.icon.renderHTML("trash")&amp;nbsp;$escapetool.xml($escapetool.javascript($services.localization.render('notifications.menu.clear')))')
      .click(function (event) {
        // Avoid the menu closing
        event.stopPropagation();
        // Ask confirmation
        new XWiki.widgets.ConfirmationBox({
          onYes: function(event) {
            // Avoid the menu closing
            event.stopPropagation();
            // Display a saving message
            var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.menu.clearing'))", 'inprogress');
            // Send the request to change the start date
            $.post(url, {
              action: 'setStartDate',
              date: startDate
            }).success(function (){
              // Display the success message
              notification.hide();
              new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.menu.cleared'))", 'done');
              // Remove the notifications from the UI and display the "nothing!" message instead.
              $('.notifications-area').html($('&lt;p&gt;').addClass('text-center noitems').text("$escapetool.javascript($services.localization.render('notifications.menu.nothing'))"));
              // Update the notifications counter
              updateNotificationCount(0);
            });
          },
          onNo: function(event) {
            // Avoid the menu closing
            event.stopPropagation();
          }
        });
      });
    // Append the button just before the "settings" link in the menu
    $('.notifications-header-uix').append(markAllReadButton);
  };

  /**
   * Display a notification entry
   */
  var displayEntry = function (entry) {
    // Add the id of the entry to the blacklist
    for (var i = 0; i &lt; entry.ids.length; ++i) {
      blackList.push(entry.ids[i].id);
    }
    // Create the container
    var notif = $('&lt;div&gt;').addClass('notification-event');
    var readButton = $('&lt;button&gt;');
    if (!entry.read) {
      notif.addClass('notification-event-unread');
      // Add the "mark as read" button
      notif.append(readButton);
    }
    // Put the content
    notif.append(entry.html);
    if (entry.exception) {
      var exceptionBox = $('&lt;div&gt;').addClass('box errormessage');
      exceptionBox.text(entry.exception);
      notif.append(exceptionBox);
    }
    // Store the data in the DOM element so that any javascript code can retrieve it
    notif.data('notif', entry);
    // Add the notification entry
    $('.notifications-area').append(notif);
    // Add the "mark as read" button if the notif is not already read
    if (!entry.read) {
      // Style the read button
      readButton.addClass('notification-event-read-button').addClass('btn btn-default btn-xs');
      // Insert the cross icon
      readButton.html('$services.icon.renderHTML("check")');
      // On click
      readButton.click(function() {
        var notif = $(this).parent();
        notif.removeClass('notification-event-unread');
        $.post(url, {
          action: 'read',
          eventIds: notif.data('notif').ids.join(','),
          read: true
        });
        $(this).remove();
        if (notificationCount &lt;= maxCountNumber) {
          updateNotificationCount(notificationCount - 1);
        }
      });
    }
    // Details
    var details = notif.find('.notification-event-details');
    details.hide();
    var arrow = notif.find('.notification-event-arrow');
    notif.find('.toggle-notification-event-details').click(function() {
      details.toggle();
      arrow.text(arrow.text() == '▸' ? '▾' : '▸');
    });
  };

  /**
   * Load the notifications.
   *
   * The parameter `untilDate` is used as an "offset" to get events in a paginate mode.
   * We cannot rely on an integer offset because new events could have been stored recently and we want to display older
   * ones only.
   */
  var loadNotifications = function (untilDate) {
    var params = {};
    if (untilDate) {
      params.untilDate = untilDate;
      params.blackList = blackList.join(',');
    }
    $.getJSON(url, params).done(function (data) {
      updateNotificationCount(data.unread);
      // Display notifications
      var area = $('.notifications-area');
      // Remove loading items
      area.removeClass('loading');
      $('.notifications-load-more').remove();
      // Display the "nothing!" message if there is no notification
      if (data.notifications.length == 0 &amp;&amp; !untilDate) {
        area.html($('&lt;p&gt;').addClass('text-center noitems').text("$escapetool.javascript($services.localization.render('notifications.menu.nothing'))"));
      } else if (untilDate == 0) {
        // Display the clean button if there is some notification, but only the first time (not when clicking on
        // "load more notification") otherwise we would have several clean buttons which would be useless and painful.
        // Note: we use the date of the more recent notification that we have displayed to avoid cleaning
        // notifications that may have been created in the meantime.
        createCleanButton(data.notifications[0].date);
      }
      // Display each entry
      for (var i = 0; i &lt; data.notifications.length; ++i) {
        displayEntry(data.notifications[i]);
      }
      // If there is other notifications to load
      if (data.notifications.length == notificationsLimit) {
        var loadMore = $('&lt;div&gt;').addClass('text-center').addClass('notifications-load-more');
        loadMore.append($('&lt;p&gt;').text("$escapetool.javascript($services.localization.render('notifications.menu.more'))"))
        area.append(loadMore);
        loadMore.click(function(event) {
          loadMore.text('').addClass('loading');
          // We use the date of the last displayed event as an offset to display those that come next
          var lastCompositeEvent = data.notifications[data.notifications.length - 1];
          var lastEventDate = lastCompositeEvent.dates[lastCompositeEvent.dates.length - 1];
          loadNotifications(lastEventDate);
        });
      }
    });
  };

  /**
   * Initialize the widget.
   */
  $(document).ready(function () {
    loadNotifications(0);

    /**
     * Prevent the dropdown menu for being closed when the user clicks on the notifications area.
     */
    $('.notifications-area').click(function(event) {
      event.stopPropagation();
    });

  });

});
</code>
    </property>
    <property>
      <name>Notifications Displayer</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c93bccb-231c-40ff-a50a-c1706e724afe</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

.notifications-area {
  margin-top: 10px;
  min-height: 20px;
  /* 320px is the width of the smallest smartphones right now, so we don't use a larger width */
  min-width: 320px;
  overflow: hidden;
}

.notification-icon {
  font-size: 2em;
  text-align: center;
}

.notification-event {
  border: 1px dashed $theme.borderColor;
}

.notification-event-unread {
  background-color: $theme.panelBackgroundColor;
}

.notifications-load-more {
  min-height: 2em;
  cursor: pointer;
}

.notifications-load-more:hover {
  background-color: $theme.highlightColor;
}

.notifications-load-more p {
  margin: 0;
  padding: 0.7em;
}

.notification-event-read-button {
  position: absolute;
  right: 5px;
  z-index: 1;
}

.notifications-count {
  background-color: red;
  opacity: 0.9;
  position: absolute;
  margin-left: 1.6em;
  top: 0;
}

@media (min-width: 768px) {
  .notifications-count {
    top: 3px;
  }
}

.notifications-header-uix {
  text-align: right;
}

.notification-event-details {
  font-size: 0.8em;
}

.notification-event-details td {
  text-overflow: ellipsis;
  width: 33%;
  max-width: 47px;
  overflow: hidden;
}

.notification-event-user &gt; img {
  max-height: 15px;
  max-width: 15px;
}
</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>7e3afaf5-5bb9-411e-b48e-bd9c6229dbc9</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}{{html clean="false"}} ## we need clean="false" because we want to display the raw content
#if ("$!xcontext.userReference" != '' &amp;&amp; $services.notification.isEnabled())
  &lt;li&gt;
    #set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.NotificationsDisplayerUIX'))
    #set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.NotificationsDisplayerUIX'))
    &lt;div class="notifications-header clearfix"&gt;
    &lt;div class="col-xs-4"&gt;
    &lt;p&gt;&lt;strong&gt;$escapetool.xml($services.localization.render('notifications.menu.header'))&lt;/strong&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="col-xs-8 text-right"&gt;
    &lt;p&gt;
    &lt;a target="_blank" href="$xwiki.getURL('XWiki.Notifications.Code.NotificationRSSService', 'get', 'outputSyntax=plain')"&gt;
    $services.icon.renderHTML('rss')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.rss.feedLink'))&lt;/a&gt;
    &amp;nbsp;
    &lt;a href="$xwiki.getURL($xcontext.userReference, 'view', 'category=notifications')" class="notifications-settings"&gt;
    $services.icon.renderHTML('cog')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.menu.header.settings'))&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="notifications-header-uix col-xs-12"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="notifications-area loading clearfix"&gt;
    &lt;/div&gt;
  &lt;/li&gt;
#end
{{/html}}{{/velocity}}
</content>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.notifications</extensionPointId>
    </property>
    <property>
      <name>xwiki-platform-notifications-ui</name>
    </property>
    <property>
      <parameters>order=20000
separator=true</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
