<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="XWiki.SearchSuggestCode" locale="">
  <web>XWiki</web>
  <name>SearchSuggestCode</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>SearchSuggestCode</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#if ($xcontext.action == 'get')
## Iterate over the sources defined in the configuration document, and create a source array to be passed to the
## search suggest contructor.
#set ($sources = [])
#set ($searchSuggestConfig = $xwiki.getDocument('XWiki.SearchSuggestConfig'))
#if ($request.getHeader('If-None-Match') == $searchSuggestConfig.version)
  #set ($discard = $response.setStatus(304))
  #rawResponse('')
#else
  #set ($discard = $response.setHeader('Cache-Control', 'must-revalidate'))
  #set ($discard = $response.setHeader('ETag', $searchSuggestConfig.version))
  #foreach ($source in $searchSuggestConfig.getObjects('XWiki.SearchSuggestSourceClass'))
  #if ($source.getProperty('activated').value == 1)
    #set ($engine = $source.getProperty('engine').value)
    #if ("$!engine" == '')
      ## For backward compatibility we consider the search engine to be Lucene when it's no specified.
      #set ($engine = 'lucene')
    #end
    #set ($discard = $xwiki.getDocument('XWiki.SearchCode').getRenderedContent())
    #if ($engine == $searchEngine)
      #try("evaluateException")
        #set ($evaluatedSource = $source.evaluate())
      #end
      #if ("$!evaluateException" != '')
        #set ($discard = $logtool.error(
          "Error when trying to evaluate XWiki.SearchSuggestSourceClass: $evaluateException"))
        #set ($discard = $logtool.debug($exceptiontool.getStackTrace($evaluateException)))
      #end
      #set ($name = $source.getProperty('name').value)
      #if ($services.localization.get($name))
        #set ($name = $services.localization.render($name))
      #elseif ("$!evaluatedSource" != '')
        ## Evaluate the Velocity code for backward compatibility.
        #set ($name =  $evaluatedSource.name)
      #end
      #set ($icon = $source.getProperty('icon').value)
      #if ($icon.startsWith('icon:'))
        #set ($icon = $xwiki.getSkinFile("icons/silk/${icon.substring(5)}.png"))
      #elseif ("$!evaluatedSource" != '')
        ## Evaluate the Velocity code for backward compatibility.
        #set ($icon = $evaluatedSource.icon)
      #end
      #set ($service = $source.getProperty('url').value)
      #set ($parameters = {
        'query': $source.getProperty('query').value,
        'nb': $source.getProperty('resultsNumber').value
      })
      #if ($xwiki.exists($service))
        #set ($discard = $parameters.put('outputSyntax', 'plain'))
        #set ($service = $xwiki.getURL($service, 'get', $escapetool.url($parameters)))
      #else
        ## Evaluate the Velocity code for backward compatibility.
        #set ($service = "#evaluate($service)")
        #set ($service = "$service#if ($service.contains('?'))&amp;#else?#end$escapetool.url($parameters)")
      #end
      #set ($highlight = $source.getProperty('highlight').value == 1)
      #set ($discard = $sources.add({
        'name': $name,
        'varname': 'input',
        'script': $service,
        'icon': $icon,
        'highlight': $highlight
      }))
    #end
  #end
#end
  #jsonResponse($sources)
#end
#end
{{/velocity}}</content>
</xwikidoc>
