###############################################################
## Contains various standard Velocity macros automatically
## loaded and usable everywhere (in Velocity).
## 
## It actually extends the macros.vm defined in the templates
## directory by redefining or adding new macros.
## 
## Note that if you modify that file you will need to restart.
###############################################################

###
###    Message box
###
#macro(xwikimessageboxstart $title $message)
    <div class="centered panel panel-default xwikimessage">
     <div class="panel-heading">
      <h3 class="panel-title">$title</h3>
     </div>
     <div class="panel-body">
      <p class="xwikimessage">$message</p>
#end
#macro(xwikimessageboxend)
      </div>
    </div>
#end

#macro(xwikimessagebox $title $message $urlyes $urlno $msgyes $msgno)
#xwikimessageboxstart($title $message)
      <div class="buttons"><a href="$urlyes" class="buttonwrapper"><input type="button" class="button" value="$msgyes" onclick="location='$urlyes'; return false;"/></a> <a href="$urlno" class="buttonwrapper"><input type="button" class="button secondary" value="$msgno" onclick="location='$urlno'; return false;"/></a></div>
#xwikimessageboxend()
#end

#**
 * Displays a submit button, i.e. an <tt>input</tt> element with <tt>type=submit</tt>.
 * For styling purposes, the button is wrapped in a span element.
 * @param name The value of the <tt>name</tt> attribute
 * @param shortcut The keyboard shortcut for this button. The value will be displayed
 *        as the title of the element. The actual shortcut is attached elsewhere, in
 *        the javascript code.
 * @param value The value of the <tt>value</tt> attribute, i.e. the text displayed on
 *        the button.
 * @param class The class to use.
 *#
#macro(submitButton $name $shortcut $value $class)
<input class="btn $!class" type="submit" name="$name"#if($keyboardShortcutsEnabled) title="$shortcut"#end value="$value"/>
#end
#**
 * Displays a submit button for the editor. This macro calls submitButton,
 * composing all its parameters based on the action's identifier and the
 * identifier of the corresponding localized resources.
 * @param action The identifier of the button's action.
 * @param resourceIdentifier The key used to identify the localized resources.
 * @param class The class to use.
 *#
#macro(editActionButton $action $resourceIdentifier $class)
#submitButton("action_${action}", $services.localization.render("core.shortcuts.edit.${resourceIdentifier}"), $services.localization.render($resourceIdentifier), $class)
#end

#**
 * AJAX Live table that displays XWiki data.
 *
 * Example of usage, in syntax 2.0:
 * <code>
 * {{velocity}}
 * #set($columns = [ "_avatar", "first_name", "last_name", "email"])
 * #set($columnsProperties = {
 *                  "first_name" : { "type" : "text" , "size" : 10, "link" : "view"},
 *                  "last_name" : { "type" : "text" , "size" : 10, "link" : "view"},
 *                  "email" : { "type" : "text" , "size" : 20, "link" : "editor"},
 *                  "_avatar" : { "type" : "none" , "size" : 20, "link" : "none", "html" : "true", "sortable":false }
 *                })
 * #set($options = {  "className":"XWiki.XWikiUsers",
 *                    "translationPrefix" : "platform.index.",
 *                    "tagCloud" : true,
 *                    "rowCount": 15,
 *                    "javascriptName" : "MyModule.myTable",
 *                    "description: "The description of this table here", })
 * #livetable("userstable" $columns $columnsProperties $options)
 * {{/velocity}}
 * </code>
 *
 * @param divid the id of the table div
 * @param collist the column list
 * @param colprops the columns properties
 * @param options the livetable options.
 *#
#macro(livetable $divid $collist $colprops $options)
## Open wiki syntax wrappers.
#if("$!options.outputOnlyHtml" != 'true')
## Do not indent:
#if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0")


## We don't clean the HTML because we control the markup and because we want to preserve the whitespace characters in the
## attribute values (e.g. if the live table id contains whitespaces)
{{html clean="false"}}
#else {pre} #end
#end
  ##
  ## SX deps.
  ##
  #set($ok = $xwiki.jsfx.use('js/xwiki/table/livetable.js', true))
  #set($ok = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  ##
  ## Options / defaults
  ##
  #if("$!options.translationPrefix" != '') #set($transprefix = $options.translationPrefix) #else #set($transprefix = '') #end
  #if("$!options.selectedColumn" != '')  #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.defaultOrder" == 'desc') #set($defaultOrder = 'desc') #else #set($defaultOrder = 'asc') #end
  #if("$!options.rowCount" != '') #set($count = $options.rowCount) #else #set($count = 15) #end
  #if("$!options.maxPages" != '') #set($maxPages = $options.maxPages) #else #set($maxPages = 10) #end
  #if("$!options.selectedColumn" != '') #set($selectedColumn = $options.selectedColumn) #end
  #if("$!options.callback" != '') #set($callback = $options.callback) #else #set($callback = '') #end
  #if("$!options.tagCloud" == '' || $options.tagCloud == false) #set($tagcloud=false) #else #set($tagcloud = true) #end
  #if ($options.selectedTags && $options.selectedTags.size() > 0)
    #set ($selectedTags = $options.selectedTags)
  #else
    #set ($selectedTags = [])
  #end
  #if("$!options.javascriptName" != '') #set($jsName = $options.javascriptName) #else #set($jsName = "livetable_$divid") #end
  #if("$!options.topFilters" != '') #set($topfilters = $options.topFilters) #end
  #if("$options.pageSize" == '' || $!options.pageSize == false) #set($hasPageSize=false) #else #set($hasPageSize = true) #end
  #if("$!options.pageSizeBounds" != '') #set($pageSizeBounds = $options.pageSizeBounds) #end
  #set ($queryFilters = $options.queryFilters)
  #if (!$queryFilters)
    #set ($queryFilters = 'currentlanguage,hidden')
  #end
  #set($classname = "$!options.className")
  ##
  ## Columns informations
  ##
  #set ($dataColumns = [])
  #set ($classParams = {})
  #foreach($colname in $collist)
    ## If the live table options don't specify which column to select then select the first non-special column.
    #if("$!selectedColumn" == '' && !$colname.startsWith('_'))
      #set($selectedColumn = $colname)
    #end
    #if($colname != '_actions')
      #set ($discard = $dataColumns.add($colname))
      #set($propClassName = "$!{colprops.get($colname).get('class')}")
      #if($propClassName != '')
        #set ($discard = $classParams.put("${colname}_class", $propClassName))
      #end
      #set ($propMatchType = "$!colprops.get($colname).match")
      #if ($propMatchType != '')
        #set ($discard = $classParams.put("${colname}_match", $propMatchType))
      #end
    #end
  #end
  #if("$!options.url" != '')
    #set($dataurl = $options.url)
  #else
    #set ($parameters = {
      'outputSyntax': 'plain',
      'transprefix': $transprefix,
      'classname': $classname,
      'collist': $stringtool.join($dataColumns, ','),
      'queryFilters': $queryFilters
    })
    #set ($discard = $parameters.putAll($classParams))
    #set ($resultPage = $options.resultPage)
    #if ("$!resultPage" == '')
      #set ($resultPage = 'XWiki.LiveTableResults')
    #end
    #set ($dataurl = $xwiki.getURL($resultPage, 'get', "$escapetool.url($parameters)&$!options.extraParams"))
  #end
  ##
  ## HTML Table
  ##
  #set ($htmlLiveTableId = $escapetool.xml($divid))
<div class="xwiki-livetable-container">
  #if("$!topfilters" !='') #set($hasTopFilters = true) #else #set($hasTopFilters = false) #end
  #if($tagcloud || $hasTopFilters)
  <div class="tipfilters">
  #end
  #if($hasTopFilters)
  <div id="${htmlLiveTableId}-topfilters" class="xwiki-livetable-topfilters-tip #if($tagcloud)splitted#end">
    <div>
      <div class="xwiki-livetable-topfilters-container">
      $topfilters
      </div>
      <div class="tippointer">
        <div></div>
      </div>
    </div>
  </div>
  #end
  #if($tagcloud)
    #set($discard = $xwiki.ssx.use('XWiki.TagCloud'))
    <div id="${htmlLiveTableId}-tagcloud" class="xwiki-livetable-tagcloud-tip hidden #if($hasTopFilters)splitted#end">
      <div>
        <div class="xwiki-livetable-tagcloud-container">
          <h2>$services.localization.render('platform.livetable.tagsHelp') $services.localization.render('platform.livetable.tagsHelpCancel')</h2>
          <div class="xwiki-livetable-tagcloud"></div>
        </div>
        <div class="tippointer">
          <div></div>
        </div>
      </div>
    </div>
  #end
  #if($tagcloud || $hasTopFilters)
  </div>
  #end
  <table id="${htmlLiveTableId}" class="xwiki-livetable">
    #if("$!options.description" != '')
      <caption class="sr-only">$options.description</caption>
    #end
    <tr>
      <td class="xwiki-livetable-pagination">
        <span id="${htmlLiveTableId}-limits" class="xwiki-livetable-limits"></span>
  #if($hasPageSize)
        <span id="${htmlLiveTableId}-pagesize" class="xwiki-livetable-pagesize">
            <span>$services.localization.render('platform.livetable.pagesizeLabel')</span>
            <span class="xwiki-livetable-pagesize-content" ></span>
        </span>
  #end
        <span id="${htmlLiveTableId}-ajax-loader" class="xwiki-livetable-loader hidden">
          <img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$escapetool.xml($services.localization.render('platform.livetable.loading'))" title="" />
        </span>
        <span class="controlPagination">
          <a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))" class="prevPagination" href="#"><span class="hidden">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>
          <a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))" class="nextPagination" href="#"><span class="hidden">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>
        </span>
        <span class="pagination">
          <span class="xwiki-livetable-pagination-text">$services.localization.render('platform.livetable.paginationPage')</span>
          <span class="xwiki-livetable-pagination-content" ></span>
        </span>
      </td>
    </tr>
    <tr>
      <td class="xwiki-livetable-display-container">
        <table class="xwiki-livetable-display">
          <thead class="xwiki-livetable-display-header">
            <tr>
            #set($columnCount = 0)
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) && "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if(("$!colprop.sortable" == '' || $colprop.sortable != false) && "$!colname" != '_actions')
                #set($isSortable = true)
              #else
                #set($isSortable = false)
              #end
              ## Get the column's display name to use in the header.
              #set($displayName = "#getLivetableColumnDisplayName($colname, $colprop, $transprefix)")
              <th class="xwiki-livetable-display-header-text $!colprop.headerClass #if($!colprop.type=='hidden')hidden#end #if($isSortable)sortable #if($colname == $selectedColumn)selected $defaultOrder#else asc#end#end#if ($colname == '_avatar') avatar#end" scope="col">
                #if($isFilterable && ("$!colprop.type"=="text"||"$!colprop.type"=="number"))<label for="xwiki-livetable-${htmlLiveTableId}-filter-${velocityCount}">#end
                #if($isSortable)<a data-rel="${colname}">#end
                $displayName
                #if($isSortable)</a>#end
                #if($isFilterable && ("$!colprop.type"=="text"||"$!colprop.type"=="number"))</label>#end
                #set($columnCount = $mathtool.add($columnCount, 1))
              </th>
            #end
            </tr>
            <tr class="xwiki-livetable-display-filters">
            #foreach($colname in $collist)
              #set($colprop = $colprops.get($colname))
              #if(("$!colprop.filterable" == '' || $colprop.filterable != false) && "$!colname" != '_actions')
                #set($isFilterable = true)
              #else
                #set($isFilterable = false)
              #end
              #if(("$!colprop.type" == 'list' || "$!colprop.type" == 'multilist') && $isFilterable)
                <td class="xwiki-livetable-display-header-filter">
                #if($colprop.get('class'))
                  #set($propClassName = $colprop.get('class'))
                #else
                  #set($propClassName = $classname)
                #end
                #set($class = $xwiki.getDocument($propClassName).getxWikiClass())
                #set($list = '')
                #set($list = $class.get($colname).getListValues())
                <select id="xwiki-livetable-${htmlLiveTableId}-filter-${velocityCount}" name='${colname}'
                #if("$!colprop.type" == 'multilist')
                  class='xwiki-livetable-multilist' multiple='multiple'>
                #else
                  ><option value=''>$services.localization.render('platform.livetable.selectAll')</option>
                  <option disabled='disabled'>────</option>
                #end
                #set($map = $class.get($colname).getMapValues())
                #foreach($listitem in $list)
                  #set ($l10n_key = "${propClassName}_${colname}_${listitem}")
                  #set ($l10n_value = $services.localization.render($l10n_key))
                  #if ($l10n_value == $l10n_key)
                    #set ($l10n_value = $map.get($listitem).getValue())
                  #end
                  <option value="$listitem">$l10n_value</option>
                #end
                </select>
                </td>
              #elseif("$!colprop.type" == 'listboolean' && $isFilterable)
                <td class="xwiki-livetable-display-header-filter">
                  <select id="xwiki-livetable-${htmlLiveTableId}-filter-${velocityCount}" name="${colname}">
                    <option value=''>$services.localization.render('platform.livetable.selectAll')</option>
                    <option disabled='disabled'>────</option>
                    <option value='0'>$services.localization.render('no')</option></option>
                    <option value='1'>$services.localization.render('yes')</option>
                  </select>
                </td>
              #elseif(("$!colprop.type" == 'text' || "$!colprop.type" == 'number') && $isFilterable)
                <td class="xwiki-livetable-display-header-filter"><input id="xwiki-livetable-${htmlLiveTableId}-filter-${velocityCount}" name="${colname}" type="text" #if("$!colprop.size" != '') size="${colprop.size}" title="$escapetool.xml($services.localization.render('platform.livetable.filtersTitle', [$services.localization.render("${transprefix}${colname}")]))"#end /></td>
              #elseif("$!colprop.type" == 'hidden')
              #elseif($colname != '_actions' || $hasAdmin)
              <td class="xwiki-livetable-display-header-filter"></td>
              #end
            #end
            </tr>
            <tr class="xwiki-livetable-initial-message">
              <td colspan="${columnCount}">
                <div class="warningmessage">$services.localization.render('platform.livetable.environmentCannotLoadTableMessage')</div>
              </td>
            </tr>
          </thead>
          <tbody id="${htmlLiveTableId}-display" class="xwiki-livetable-display-body"><tr><td>&nbsp;</td></tr></tbody>
        </table>
      </td>
    </tr>
    <tr>
      <td class="xwiki-livetable-pagination">
        <span class="xwiki-livetable-limits"></span>
        <span class="controlPagination">
          <a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPagePrevTitle'))" class="prevPagination" href="#"><span class="hidden">$services.localization.render('platform.livetable.paginationPagePrevTitle')</span></a>
          <a title="$escapetool.xml($services.localization.render('platform.livetable.paginationPageNextTitle'))" class="nextPagination" href="#"><span class="hidden">$services.localization.render('platform.livetable.paginationPageNextTitle')</span></a>
        </span>
        <span class="pagination">
          <span class="xwiki-livetable-pagination-text">$services.localization.render('platform.livetable.paginationPage')</span>
          <span class="xwiki-livetable-pagination-content" ></span>
        </span>
      </td>
    </tr>
  </table>
  <div id="${htmlLiveTableId}-inaccessible-docs" class="hidden">
    #info($services.localization.render('rightsmanager.documentrequireviewrights'))
  </div>
  <script type="text/javascript">
  //<![CDATA[
(function() {
  function startup() {
    // Make sure the Livetable widgets exists (It does not in the WYSIWYG for example).
    if (XWiki && XWiki.widgets && XWiki.widgets.LiveTable) {
      #set ($jsLiveTableId = $escapetool.javascript($divid))
      #set ($liveTableParams = {
        'maxPages': $maxPages,
        'limit': $count,
        'selectedTags': $selectedTags
      })
      #if ($hasTopFilters)
        #set ($cssLiveTableId = $escapetool.css($divid))
        #set ($discard = $liveTableParams.put('filterNodes', [
          "$escapetool.h$cssLiveTableId .xwiki-livetable-display-filters",
          "${jsLiveTableId}-topfilters"
        ]))
      #end
      #if ($hasPageSize && "$!pageSizeBounds" != '')
        #set ($discard = $liveTableParams.put('pageSizeBounds', $pageSizeBounds))
      #end
      #set ($callbackParam = "#livetablecallback($divid $collist $colprops $transprefix), ")
      #if ($!callback != '')
        #set ($callbackParam = "$callback, ")
      #end
      window[$jsontool.serialize($jsName)] = new XWiki.widgets.LiveTable("$dataurl", "$jsLiveTableId",
        $callbackParam$jsontool.serialize($liveTableParams));
      #if ($hasPageSize)
        document.observe("xwiki:livetable:${jsLiveTableId}:loadingEntries", function() {
          $('${jsLiveTableId}-pagesize').addClassName("hidden");
        });
        document.observe("xwiki:livetable:${jsLiveTableId}:loadingComplete", function() {
          $('${jsLiveTableId}-pagesize').removeClassName("hidden");
        });
      #end
      return true;
    }
    return false;
  }
  // Initialize liveTable
  (XWiki && XWiki.isInitialized && startup()) || document.observe('xwiki:livetable:loading', startup);
})();
   //]]>
  </script>
</div>## xwiki-livetable-container
## Close wiki syntax wrappers. Do not modify the indentation below or it will generate unwanted paragraphs!
#if("$!options.outputOnlyHtml" != 'true')#if($xwiki.getCurrentContentSyntaxId() != "xwiki/1.0"){{/html}}

#else{/pre}#end##
#end## end-wrappers
#end## end-livetable-macro

#**
 * Internal macro - Determine the name to be displayed in a livetable's column header. Strategy is as follows :
 * - If defined, the 'displayName' passed as a column option wins.
 * - If not, and if a i18n prefix has been passed, we use the localization tool with the prefix + the column name.
 * - Finally, we fall back on the column name.
 *
 * @param colname the column name
 * @param colprop the column properties map
 * @param transprefix the translations prefix to use
 *
 * @internal
 *#
##
#macro(getLivetableColumnDisplayName $colname $colprop $transprefix)
  #if("$!colprop.displayName" != '')
    #set($displayName = $colprop.displayName)##
  #elseif($transprefix != '')
    #set($displayName = $services.localization.render("${transprefix}${colname}"))##
  #else
    #set($displayName = $colname)##
  #end
$displayName##
#end

#**
 * Internal macro - Used by the livetable macro to generate a JavaScript anonymous function
 * that is passed to the LiveTable object constructor. This is function is dynamically written
 * according to columns properties passed to the livetable macro.
 *
 * @param collist the list of columns
 * @param colprops the columns properties
 * @param transprefix the translation prefix
 *
 * @internal
 *#
#macro(livetablecallback $divid $collist $colprops $transprefix)
function (row, i, table) {
  // This callback method code has been generated from velocity.
  var tr = new Element("tr");
  if (row["doc_viewable"]) {
  #foreach($colname in $collist)
    #set($colprop = $colprops.get($colname))
    ## Get the column's display name to be used when displaying the reponsive version.
    #set($displayName = "#getLivetableColumnDisplayName($colname, $colprop, $transprefix)")
    // $colname
    #if("$!colprop.type"!="hidden")
      #if($colname.indexOf("doc.")==0)
        #set($jscolname = $colname.replaceAll("doc.", "doc_"))
      #else
        #set($jscolname = $colname)
      #end
      ## Is the td element bound to a link ?
      #if("$!colprop.link" != "" && "$!colname" != "_actions")
        #set($tdClass = "${jscolname} link$!{colprop.link} type$!{colprop.type}")
        var td = new Element("td", {'class':"$tdClass", 'data-title': "$escapetool.xml($displayName)"});
        var link = #if("$!colprop.link" != "editor") new Element("a"); #else new Element("span"); #end
        ## Automatic: the link url is in JSON results, with key column name + "_url"
        #if("$!colprop.link"=="auto")
          link.href = (row["${jscolname}_url"]=="") ? row["doc_url"] : row["${jscolname}_url"];
        #elseif($colprop.link=="field")
          if (row["${jscolname}_url"] != "") {
            link.href = row["${jscolname}_url"];
          }
        ## Property editor
        #elseif($colprop.link=="editor")
          #if($colprop.get("class"))
            #set($propClassName = $colprop.get("class"))
          #else
            #set($propClassName = $className)
          #end
          td.observe("click", function(event){
            var tag = event.element().down("span");
            if (!tag)
             tag = event.element();
            editProperty(row["doc_fullName"], "${propClassName}", "${colname}", function(value) { tag.innerHTML = value});
          });
        ## Author
        #elseif($colprop.link == "author")
          link.href = row["doc_author_url"];
        ## Space URL
        #elseif($colprop.link == "space")
          link.href = row["doc_space_url"];
        ## Wiki URL
        #elseif($colprop.link == "wiki")
          link.href = row["doc_wiki_url"];
        #else
          link.href = row["doc_url"];
        #end
        #if($colprop.html && $colprop.html==true)
          link.innerHTML = row["${jscolname}"];
        #else
          row["${jscolname}"] != undefined && link.update((row["${jscolname}"] + '').escapeHTML());
        #end
        td.appendChild(link);
        tr.appendChild(td);
      #elseif("$colname" == "_actions")
        var adminActions = ['admin', 'rename', 'rights'];
        var td = new Element("td", {'class' : 'actions', 'data-title': "$escapetool.xml($displayName)"});
        #foreach($action in $colprop.get("actions"))
          if (row["doc_has${action}"] || '${action}' == 'view' || (row["doc_has${action}"] === undefined && (row["doc_hasadmin"] || adminActions.indexOf('${action}') < 0))) {
            #if($velocityCount > 1)
              td.insert(" ");
            #end
            #if($transprefix != '' && $services.localization.render("${transprefix}_actions.${action}") != "${transprefix}_actions.${action}")
              #set($text = $services.localization.render("${transprefix}_actions.${action}"))
            #elseif($services.localization.render("platform.livetable._actions.${action}") != "platform.livetable._actions.${action}")
              #set($text = $services.localization.render("platform.livetable._actions.${action}"))
            #else
              #set($text = "$action")
            #end
            var link = new Element("a", {"href": row["doc_${action}_url"], "class":"action action${action}"}).update("$text");
            #if("$!colprop.ajaxActions.get($action)" == 'true')
              link.observe('click', function(event) {
                event.stop();
                new Ajax.Request(this.href, {
                  onSuccess : function() {
                    $colprop.actionCallbacks.get($action)
                  }
                });
              }.bindAsEventListener(link));
            #end
            td.insert(link);
          }
        #end
        tr.appendChild(td);
      #else
        #set($tdClass = "${jscolname} link$!{colprop.link} type$!{colprop.type}")
        var fieldel = new Element("td", {'class':"$tdClass", 'data-title': "$escapetool.xml($displayName)"});
        #if($colprop.html && $colprop.html==true)
          fieldel.innerHTML = row["${jscolname}"];
        #else
          row["${jscolname}"] != undefined && fieldel.update((row["${jscolname}"] + '').escapeHTML());
        #end
        tr.appendChild(fieldel);
      #end
    #end
  #end
  } else {
    var documentReference = XWiki.Model.resolve(row['doc_fullName'] || '', XWiki.EntityType.DOCUMENT);
    var pageName = documentReference.name;
    var spaceName = documentReference.parent ? documentReference.parent.name : '';
    #foreach($colname in $collist)
      // $colname
      #set($colprop = $colprops.get($colname))
      #if("$!colprop.type"!="hidden")
        #if($colname.indexOf("doc.")==0)
         #set($jscolname = $colname.replaceAll("doc.", "doc_"))
        #else
         #set($jscolname = $colname)
        #end
        #if($jscolname == "doc_name")
          tr.insert(new Element("td").update(pageName + "*"));
        #elseif($jscolname == "doc_space")
          tr.insert(new Element("td").update(spaceName));
        #else
          tr.insert(new Element("td").update(" "));
        #end
      #end
    #end
    $($jsontool.serialize("${divid}-inaccessible-docs")).removeClassName('hidden');
  }
  return tr;
}
#end
##
##
#**
 * Generates a vertical menu item from an object (a map)
 *
 * Expected format:
 * item = map with the following fields:
 *        'id'       : mandatory
 *        'name'     : the text displayed for the corresponding menu item;
 *                     optional, defaults to
 *                     $services.localization.render("$!{translationPrefix}${item.id}")
 *        'url'      : the "action" of the menu item; optional
 *        'cssClass' : a specific css class for the menu item for custom
 *                     styling; optional, defaults to ''
 *        'children' : vector of items, allowing to recursively define submenus
 *
 * @param $item the menu item object, in the format described above
 * @param $level the current level of the item, of the form '\*+'; the number of
 *        stars indicates the depth of the item in the menu
 * @param $options a map of options, where the following entries are currently used:
 *        'translationPrefix' :  the translation prefix added to the id of each
 *                     item, in order to generate the name; ignored for items whose
 *                     name is specified
 *        'crtItemId': identifier of the current menu item (for differential styling)
 *#
#macro(verticalNavigationItem $item $level $options)
  #set ($class = "$!{item.cssClass}")
  #set ($hasChildren = ($item.children && $item.children.size() > 0))
  #if ($hasChildren)
    #set ($class = "$class group")
  #end
  #if ($options.crtItemId == $item.id)
    #set ($class = "$class current")
    #if ($hasChildren)
      #set ($class = "$class current-group")
    #end
  #end
  #set ($class = $class.trim())
  #set ($name = "$!{item.name}")
  #if ($name == '')
    #set ($name = $services.localization.render("$!{options.translationPrefix}${item.id}"))
  #end
  $level (% id="vertical-menu-${item.id}" class="${class}" %){{html}}<a #if ("$!{item.url}" != '')href="$item.url"#{end}>#if($item.glyphicon)#glyphicon($item.glyphicon) #end$name</a>{{/html}}
  #if ($hasChildren)
    #set ($children = [])
    #sortCollectionOfMapsByField($item.children, 'order', 99999, 'asc', $children)
    #foreach ($child in $children)
      #verticalNavigationItem($child $level.concat('*') $options)
    #end
  #end
#end

#**
 * Start a breadcrumb.
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_start)
  <ol class="breadcrumb">
#end

#**
 * End of a breadcrumb
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_end)
  </ol>
#end

#**
 * Display a line in the breadcrumb
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_line $link $title)
  <li><a href="$link">$title</a></li>
#end

#**
 * Display the current line in the breadcrumb
 *
 * Should be used in HTML.
 *#
#macro(breadcrumb_current_line $title)
  <li class="active">$title</li>
#end

###
### Glyph Icon
###
### @param iconName The name of the icon to display, without the glyphicon prefix (eg: 'globe')
#macro(glyphicon $iconName)
#if("$!iconName"!='')<span class="glyphicon glyphicon-${iconName}"></span>#end
#end
