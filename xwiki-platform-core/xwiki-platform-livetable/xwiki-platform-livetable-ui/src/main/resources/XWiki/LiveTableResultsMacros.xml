<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="XWiki.LiveTableResultsMacros" locale="">
  <web>XWiki</web>
  <name>LiveTableResultsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>$services.localization.render('platform.livetable.resultsMacros')</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#template('hierarchy_macros.vm')

#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresult $className $collist)
  #gridresultwithfilter($className $collist '' '' [])
#end


#**
 * Computes the query used to retrieve the results of a live table data call.
 * NOTE: This macro is not fully encapsulated because it defines a few Velocity variables that are used in subsequent macros.
 *#
#macro(gridresultwithfilter_buildQuery $className $collist $filterfrom $filterwhere $filterParams)
  ## Additional columns; should *not* contain raw parameters, all added column names must be filtered
  #set($fromSql = '')
  ## Parametrized filter part of the query
  #set($whereSql = '')
  ## List of values to use with $whereSql
  #set($whereParams = [])
  #set($class = $xwiki.getDocument($className).getxWikiClass())
  ##
  ## Add the columns needed for the actual data
  ##
  #set($tablelist = [])
  #foreach($colname in $collist)
    #livetable_addColumnToQuery($colname)
  #end
  ##
  ## Tag filtering
  ##
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      ## Tags are case insensitive but they are stored unchanged which means we have to normalize them when performing
      ## a query. Unfortunately there's no simple way to match multiple tags (AND operator). If we join the list of
      ## tags in the FROM clause then we match at least one of the tags (OR operator). The only remaining option is to
      ## check that the list of tags contains each of the desired tags. HQL doesn't help us to lower-case the entire
      ## list of tags so we use an inner select for this.
      #set($whereSql = "${whereSql} lower(?) in (select lower(tag) from tagprop.list tag)")
      #set($discard = $whereParams.add("${tag}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  ##
  ##
  ## Order
  ##
  ## if the object for the classname of the order column is not already in the from sql, put it
  #macro(addObjectClause $objectAlias)
    #if($fromSql.indexOf($objectAlias) &lt; 0)
      #set($fromSql = "${fromSql}, BaseObject $objectAlias")
      #set($whereSql = "${whereSql} and ${objectAlias}.name = doc.fullName and ${objectAlias}.className = ?")
      #set($discard = $whereParams.add($propClassName))
    #end
  #end
  ## Set the order clause for a field. We first ignore the case using the lower function (so that e.g. 'aaa' equals 'AAA')
  ## but then consider it only for equal values (so that e.g. 'AAA' comes before 'aaa').
  #macro(setOrderClause $fieldName $direction $useRawValue)
    #if ($useRawValue)
      #set($orderSql = " order by ${fieldName} ${direction}")
    #else
      #set($orderSql = " order by lower(${fieldName}) ${direction}, ${fieldName} ${direction}")
    #end
  #end
  #set($order = "$!request.sort")
  #if ($order == 'doc.location')
    #set ($order = 'doc.fullName')
  #end
  #set ($orderSql = '')
  #if($order != '')
    #set($orderDirection = "$!{request.get('dir').toLowerCase()}")
    #if("$!orderDirection" != '' &amp;&amp; "$!orderDirection" != 'asc')
      #set($orderDirection = 'desc')
    #end
    #livetable_getTableAlias($order)
    #if($order.startsWith('doc.'))
      ## The column is a document field.
      ##
      ## These document fields need to be ordered as raw values and not as strings.
      #set($rawDocumentFields = ['translation', 'date', 'contentUpdateDate', 'creationDate', 'elements', 'minorEdit1', 'hidden'])
      #set($documentField = $stringtool.removeStart($order, 'doc.'))
      #setOrderClause(${safe_tableAlias.replace('_','.')}, ${orderDirection},  $rawDocumentFields.contains($documentField))
    #else
      ## The column is an object property.
      ##
      ## Resolve the property.
      #livetable_getPropertyClassAndType($order)
      #set ($multiselect = "$!{propClass.get($order).getProperty('multiSelect').getValue()}")
      ## We can only handle single values, not multiselect ones.
      #if ($multiselect != '1')
        ## Some property types do not need lowercasing since they have unique values by design, so we use the raw values to order.
        #set($rawPropertyTypes = ['NumberClass', 'BooleanClass', 'DateClass', 'LevelsClass'])
        ## If the order column is also a filer column, this means that it was already added to the query and all we need to do is to add it to the order clause.
        #if(!$tablelist.contains($order))
          ## The order column is not also a filter column, so not yet defined in the query.
          ## We need to first define it (to the from and where clauses) before we can add it to the order clause.
          ##
          ## Resolve the table name of the property to be used in the from clause below.
          #livetable_getTableName($order)
          ## If the sort column has a _class specified, join that object in
          #set($orderObjectAlias = 'obj')
          #if($propClassName != '' &amp;&amp; "$!propClass" != '')
            ## prepare the alias of the BaseObject table that corresponds to the class of this column
            #set($orderObjectAlias = "$!{propClassName.replaceAll('[^a-zA-Z0-9_]', '')}_obj")
            #addObjectClause($orderObjectAlias)
          #end
          #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
          ## FIXME: Check if this is indeed a property of the class. Hint: $propType can be used.
          ## Conditions are put on the object coresponding to the column of the order ($orderObjectAlias), which depends on which is the class of the $order
          #set($whereSql = "${whereSql} and ${orderObjectAlias}.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
          #set($discard = $whereParams.add("${order}"))
        #end
        ## Add the column to the order clause.
        #setOrderClause("${safe_tableAlias}.value", ${orderDirection}, $rawPropertyTypes.contains($propType))
      #end
    #end
  #end
  ##
  ##
  ## Compute the final queries
  ##
  #set($sqlParams = [])
  #set($tagsMatchingParams = [])
  #set($allMatchingParams = [])
  #if("$!className" != '')
    ## Class query
    #set($sql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = ", BaseObject as obj $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!filterwhere")
    #set($discard = $allMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #else
    ## Document query
    #set($sql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #end
  #if($orderSql != '')
    #set($sql = "$sql $!{orderSql}")
  #end
#end
#**
 * Adds TagCloud information to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables defined by gridresultwithfilter_buildQuery.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildTagCloudJSON $map)
  ##
  ## TagCloud matching the current filters
  ##
  #set($tagsMatchingFilters = $xwiki.tag.getTagCountForQuery($tagsMatchingFiltersFrom, $tagsMatchingFiltersWhere, $tagsMatchingParams))
  ## FIXME: We use a map just because the client expects an object, but all we really need is a list..
  #set($matchingTags = {})
  #foreach($tag in $tagsMatchingFilters.keySet())
    ## NOTE: The value doesn't have a special meaning. I've used 1 just because it takes less space when serialized.
    #set($discard = $matchingTags.put($tag, 1))
  #end
  #set($discard = $map.put('matchingtags', $matchingTags))
  ##
  ## TagCloud matching all the documents used by the live table
  ##
  #set($allMatchingTags = $xwiki.tag.getTagCountForQuery($allMatchingTagsFrom, $allMatchingTagsWhere, $allMatchingParams))
  ## FIXME: We use a list of maps just because the client expects an array, but we should simply return $allMatchingTags..
  #set($tags = [])
  #foreach($tag in $allMatchingTags.keySet())
    #set($discard = $tags.add({'tag': $tag, 'count': $allMatchingTags.get($tag)}))
  #end
  #set($discard = $map.put('tags', $tags))
#end


#**
 * Adds information about each live table row to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables defined by gridresultwithfilter_buildQuery.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildRowsJSON $map)
  #set($offset = $mathtool.toInteger($request.get('offset')))
  ## Offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if(!$offset || $offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $mathtool.toInteger($request.get('limit')))
  #if(!$limit)
    #set ($limit = 15)
  #end
  #set($query = $services.query.hql($sql))
  ## Apply query filters if defined. Otherwise use default.
  #foreach ($queryFilter in $stringtool.split($!request.queryFilters, ', '))
    #set ($query = $query.addFilter($queryFilter))
  #end
  #set ($query = $query.setLimit($limit).setOffset($offset).bindValues($sqlParams))
  #set($items = $query.execute())
  #set($discard = $map.put('totalrows', $query.count()))
  #set($discard = $map.put('returnedrows', $mathtool.min($items.size(), $limit)))
  #set($discard = $map.put('offset', $mathtool.add($offset, 1)))
  #set($rows = [])
  #foreach($item in $items)
    #gridresult_buildRowJSON($item $rows)
  #end
  #set($discard = $map.put('rows', $rows))
#end


#**
 * Adds information about the specified live table row to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables available in gridresult_buildRowsJSON.
 *
 * @param $item the name of the document that feeds this live table row
 * @param $rows stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildRowJSON $item $rows)
  ## Handle both the case where the "language" filter is used and thus languages are returned too and the case where
  ## only the document name is returned. When more than the document name is returned the $item variable is a list.
  #if($item.size())
    ## Extract doc name and doc language from $item
    #set($docName = $item[0])
    #set($docLanguage = $item[1])
  #else
    #set($docName = $item)
    #set($docLanguage = '')
  #end
  #set ($docReference = $services.model.resolveDocument($docName))
  #set ($row = {
    'doc_viewable': $services.security.authorization.hasAccess('view', $docReference),
    'doc_fullName': $services.model.serialize($docReference, 'local'),
    'doc_space': $services.model.serialize($docReference.parent, 'local'),
    'doc_location': "#hierarchy($docReference, {'limit': 5, 'plain': false, 'local': true, 'displayTitle': false})",
    'doc_url': $xwiki.getURL($docReference),
    'doc_space_url': $xwiki.getURL($docReference.parent),
    'doc_wiki': $docReference.wikiReference.name,
    'doc_wiki_url': $xwiki.getURL($docReference.wikiReference),
    'doc_hasadmin': $xwiki.hasAdminRights(),
    'doc_hasedit': $services.security.authorization.hasAccess('edit', $docReference),
    'doc_hasdelete': $services.security.authorization.hasAccess('delete', $docReference),
    'doc_edit_url': $xwiki.getURL($docReference, 'edit'),
    'doc_copy_url': $xwiki.getURL($docReference, 'view', 'xpage=copy'),
    'doc_delete_url': $xwiki.getURL($docReference, 'delete'),
    'doc_rename_url': $xwiki.getURL($docReference, 'view', 'xpage=rename&amp;step=1')
  })
  #set ($isTranslation = "$!docLanguage" != '' &amp;&amp; $xwiki.getLanguagePreference() != $docLanguage)
  ## Display the language after the document name so that not all translated documents have the same name displayed.
  #set ($row.doc_name = "$docReference.name#if ($isTranslation) ($docLanguage)#end")
  #set ($row.doc_hascopy = $row.doc_viewable)
  #set ($row.doc_hasrename = $row.doc_hasdelete)
  #set ($row.doc_hasrights = $row.doc_hasedit &amp;&amp; $isAdvancedUser)
  #if ($docReference.name == 'WebHome')
    ## For nested pages, use the page administration.
    #set ($webPreferencesReference = $services.model.createDocumentReference('WebPreferences', $docReference.lastSpaceReference))
    #set ($row.doc_rights_url = $xwiki.getURL($webPreferencesReference, 'admin', 'editor=spaceadmin&amp;section=PageRights'))
  #else
    ## For terminal pages, use the old rights editor.
    ## TODO: We should create a page administration for terminal pages too.
    #set ($row.doc_rights_url = $xwiki.getURL($docReference, 'edit', 'editor=rights'))
  #end
  #if ($row.doc_viewable)
    #set ($itemDoc = $xwiki.getDocument($docReference))
    ## Handle translations. We need to make sure we display the data associated to the correct document if the returned
    ## result is a translation.
    #if ($isTranslation)
      #set ($translatedDoc = $itemDoc.getTranslatedDocument($docLanguage))
    #else
      #set ($translatedDoc = $itemDoc.translatedDocument)
    #end
    #set($discard = $itemDoc.use($className))
    #set($discard = $row.put('doc_edit_url', $itemDoc.getURL($itemDoc.defaultEditMode)))
    #set($discard = $row.put('doc_author_url', $xwiki.getURL($translatedDoc.author)))
    #set($discard = $row.put('doc_date', $xwiki.formatDate($translatedDoc.date)))
    #set($discard = $row.put('doc_title', $translatedDoc.plainTitle))
    #set($rawTitle = $translatedDoc.title)
    #if($rawTitle != $row['doc_title'])
	  #set($discard = $row.put('doc_title_raw', $rawTitle))
    #end
    #set($discard = $row.put('doc_author', $xwiki.getPlainUserName($translatedDoc.authorReference)))
    #set($discard = $row.put('doc_creationDate', $xwiki.formatDate($translatedDoc.creationDate)))
    #set($discard = $row.put('doc_creator', $xwiki.getPlainUserName($translatedDoc.creatorReference)))
    #foreach($colname in $collist)
      #gridresult_buildColumnJSON($colname $row)
    #end
  #end
  #set($discard = $rows.add($row))
#end


#**
 * Adds information about the given column to the JSON returned by a live table data call.
 * NOTE: This macro uses Velocity variables available in gridresult_buildRowJSON.
 *
 * @param $colname the name of the live table column for which to retrieve information
 * @param $row stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildColumnJSON $colname $row)
  #if($colname.startsWith('doc.'))
  #elseif($colname == '_action')
    #set($discard = $row.put($colname, $services.localization.render("${request.transprefix}actiontext")))
  #elseif($colname == '_attachments')
    #livetable_getAttachmentsList($translatedDoc)
    #set($discard = $row.put($colname, $attachlist))
  #elseif($colname == '_avatar')
    #livetable_getAvatar($itemDoc)
    #set($discard = $row.put($colname, $avatar))
  #elseif($colname == '_images')
    #livetable_getImagesList($itemDoc)
    #set($discard = $row.put($colname, $imagesList))
  #else
    #livetable_getPropertyClassAndType($colname)
    #if(!$propClass.equals($class))
      #set($discard = $itemDoc.use($propClassName))
    #end
    #set($fieldValue = "$!itemDoc.getValue($colname)")
    #set($fieldDisplayValue = "$!itemDoc.display($colname, 'view')")
    #if($fieldDisplayValue == '')
      #set($fieldDisplayValue = $services.localization.render("${request.transprefix}emptyvalue"))
    #end
    #set($fieldUrl = '')
    ## Only retrieve an URL for a DBListClass item
    #if(($propType == 'DBListClass' || $propType == 'PageClass') &amp;&amp; $propClass.get($colname).getProperty('multiSelect').value != 1)
      #set($fieldUrl = $xwiki.getURL($fieldValue))
      #if($fieldUrl == $xwiki.getURL($services.model.resolveDocument('', 'default', $doc.documentReference.extractReference('WIKI'))))
        #set($fieldUrl = '')
      #end
    #end
    #set($discard = $row.put($colname, $fieldDisplayValue.replaceFirst($regextool.quote('{{html clean="false" wiki="false"}}'), '').replaceAll("$regextool.quote('{{/html}}')$", '')))
    #set($discard = $row.put("${colname}_value", $fieldValue))
    #set($discard = $row.put("${colname}_url", $fieldUrl))
    ## Reset to the default class
    #set($discard = $itemDoc.use($className))
  #end
#end


#**
 * Builds the JSON response to a live table data call.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresultwithfilter_buildJSON $className $collist $filterfrom $filterwhere $filterParams $map)
  #gridresultwithfilter_buildQuery($className $collist $filterfrom $filterwhere $filterParams)
  #if("$!request.sql" == '1')
    #set($discard = $map.put('sql', $sql))
    #set($discard = $map.put('params', $sqlParams))
  #end
  #set($discard = $map.put('reqNo', $mathtool.toInteger($request.reqNo)))
  #gridresult_buildTagCloudJSON($map)
  #gridresult_buildRowsJSON($map)
#end


#**
 * Builds the JSON response to a live table data call.
 *
 * @param $map stores the JSON in memory so that it can be adjusted before serialization
 *#
#macro(gridresult_buildJSON $className $collist $map)
  #gridresultwithfilter_buildJSON($className $collist '' '' [] $map)
#end


#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresultwithfilter $className $collist $filterfrom $filterwhere $filterParams)
  #if($xcontext.action == 'get' &amp;&amp; "$!{request.outputSyntax}" == 'plain')
    ## Build the JSON in memory (using basic Java data types) so that it can be adjusted before serialization.
    #set($map = {})
    #gridresultwithfilter_buildJSON($className $collist $filterfrom $filterwhere $filterParams $map)
    #jsonResponse($map)
  #end
#end


#**
 * Get the name of the Property that should be used for a given livetable column.
 * NOTE the resulting $tableName is safe to use inside SQL queries
 *#
#macro(livetable_getTableName $colname)
  #livetable_getPropertyClassAndType($colname)
  #if($propType == 'NumberClass')
    #set($numberType = $propClass.get($colname).getProperty('numberType').getValue())
    #if($numberType == 'integer')
      #set($tableName = 'IntegerProperty')
    #elseif($numberType == 'float')
      #set($tableName = 'FloatProperty')
    #elseif($numberType == 'double')
      #set($tableName = 'DoubleProperty')
    #else
      #set($tableName = 'LongProperty')
    #end
  #elseif($propType == 'BooleanClass')
    #set($tableName = 'IntegerProperty')
  #elseif($propType == 'DateClass')
    #set($tableName = 'DateProperty')
  #elseif($propType == 'TextAreaClass' || $propType == 'UsersClass' || $propType == 'GroupsClass')
    #set($tableName = 'LargeStringProperty')
  #elseif($propType == 'StaticListClass' || $propType == 'DBListClass' || $propType == 'DBTreeListClass' || $propType == 'PageClass')
    #set($multiSelect = $propClass.get($colname).getProperty('multiSelect').getValue())
    #set($relationalStorage = $propClass.get($colname).getProperty('relationalStorage').getValue())
    #if($multiSelect == 1)
      #if($relationalStorage == 1)
        #set($tableName = 'DBStringListProperty')
      #else
        #set($tableName = 'StringListProperty')
      #end
    #else
      #set($tableName = 'StringProperty')
    #end
  #else
    #set($tableName = 'StringProperty')
  #end
#end

#**
 * Get the property class and type for a given livetable column.
 *#
#macro(livetable_getPropertyClassAndType $colname)
  #set($propClassName = "$!request.get(${colname.concat('_class')})")
  #if($propClassName != '')
    #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
  #else
    #set($propClass = $class)
  #end
  #set($propType = '')
  #if($propClass.getPropertyNames().contains($colname))
    #set($propType = "$!{propClass.get($colname).type}")
  #end
#end

#**
 * Old alias of the #livetable_getTableName macro.
 * @deprecated since 2.2.3, use {@link #livetable_getTableName}
 *#
#macro(grid_gettablename $colname)
  #livetable_getTableName($colname)
#end



#**
 * List attachments for a document, putting the result as HTML markup in the $attachlist variable.
 *#
#macro(livetable_getAttachmentsList $itemDoc)
  #set($attachlist = '')
  #foreach($attachment in $itemDoc.attachmentList)
    #set($attachmentUrl = $itemDoc.getAttachmentURL($attachment.filename))
    #set($attachlist = "${attachlist}&lt;a href='${attachmentUrl}'&gt;$attachment.filename&lt;/a&gt;&lt;br/&gt;")
  #end
#end

#**
 * Old alias of the #livetable_getAttachmentsList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAttachmentsList}
 *#
#macro(grid_attachlist $itemDoc)
  #livetable_getAttachmentsList($itemDoc)
#end



#**
 * List image attachments for a document, putting the result as HTML markup in the $imagesList variable.
 *#
#macro(livetable_getImagesList $itemDoc)
  #set($imagesList = '')
  #foreach ($attachment in $itemDoc.attachmentList)
    #if($attachment.isImage())
      ## Create a thumbnail by resizing the image on the server side, if needed, to fit inside a 50x50 pixel square.
      #set($thumbnailURL = $itemDoc.getAttachmentURL($attachment.filename, 'download', "width=50&amp;height=50&amp;keepAspectRatio=true"))
      #set($imageURL = $itemDoc.getAttachmentURL($attachment.filename))
      #set($imagesList = "${imagesList}&lt;a href=""$imageURL""&gt;&lt;img src=""$thumbnailURL"" alt=""$attachment.filename"" title=""$attachment.filename"" /&gt;&lt;/a&gt;")
    #end
  #end
#end

#**
 * Old alias of the #livetable_getImagesList macro.
 * @deprecated since 2.2.3, use {@link #livetable_getImagesList}
 *#
#macro(grid_photolist $itemDoc)
  #livetable_getImagesList($itemDoc)
#end


#**
 * Generate the HTML code for a user avatar.
 *#
#macro(livetable_getAvatar $itemDoc)
  #set ($avatar = "#largeUserAvatar($itemDoc.fullName)")
  #set ($avatar = $avatar.trim())
#end

#**
 * Old alias of the #livetable_getAvatar macro.
 * @deprecated since 2.2.3, use {@link #livetable_getAvatar}
 *#
#macro(grid_avatar $itemDoc)
  #livetable_getAvatar($itemDoc)
#end



#**
 * Macro to extend the query to select the properties for the livetable columns.
 * NOTE $colname is filtered (all characters but [a-zA-Z0-9_.] are removed) before use
 *#
#macro (livetable_addColumnToQuery $colName)
  ## Safe because / is not allowed in property names
  ## The $joinModeMarker is used in #livetable_filterDBStringListProperty.
  #set ($joinModeMarker = "/join_mode")
  #if (!$colName.endsWith($joinModeMarker))
    #set ($filterValue = "$!request.getParameter($colName)")
    #if ("$!filterValue" != '')
      #set ($discard = $tablelist.add($colName))
      #if ($colName.startsWith('doc.'))
        #if ($colName == 'doc.location')
          #set ($safeColName = 'doc.fullName')
          #addLivetableLocationFilter($whereSql, $whereParams, $filterValue, true)
        #elseif ($colName == 'doc.date' || $colName == 'doc.creationDate' || $colName == 'doc.contentUpdateDate')
          #livetable_getTableAlias($colname)
          #livetable_filterDateProperty()
        #else
          #set ($safeColName = $colName.replaceAll('[^a-zA-Z0-9_.]', '').replace('_', '.'))
          #set ($whereSql = "${whereSql} and upper(str($safeColName)) like upper(?)")
          #set ($discard = $whereParams.add("%$filterValue%"))
        #end
      #else
        #set ($filterValues = $request.getParameterValues($colname))
        #set ($valueCount = $filterValues.size())
        #livetable_filterProperty($colName $filterValue $valueCount)
      #end
    #end
  #end
#end


#macro (livetable_filterProperty $colname $filterValue)
  #livetable_getTableAlias($colname)
  #livetable_getTableName($colname)
  #set ($fromSql = "$fromSql, $tableName as $safe_tableAlias")
  ##
  ## If the column is not from $class, we need to make sure we join with the proper table.
  #set ($filterObjectAlias = 'obj')
  #set ($propClass = $class)
  #set ($propClassName = $request.getParameter("${colname}_class"))
  #if ("$!propClassName" != '')
    #set ($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
    #if ("$!propClass" != '')
      ## Prepare the alias of the BaseObject table that corresponds to the class of this column
      ## Property table is to be joined with its object, determined depending on $propClassName.
      #set ($filterObjectAlias = "$!{propClassName.replaceAll('[^a-zA-Z0-9_]', '')}_obj")
      #addObjectClause($filterObjectAlias)
    #end
  #end
  #set ($joinObjectTable = "${filterObjectAlias}.id = ${safe_tableAlias}.id.id and ${safe_tableAlias}.id.name = ?")
  #set ($whereSql = "$whereSql and $joinObjectTable")
  #set ($discard = $whereParams.add($colname))
  ##
  ## Specifies how the filter value should be matched against the stored value.
  #set ($matchType = $request.getParameter("${colname}_match"))
  ## We determine the default match type (when not specified) based on the property meta class (e.g. DateClass).
  #set ($propMetaClass = $NULL)
  #if ($propClass &amp;&amp; $propClass.getPropertyNames().contains($colname))
    #set ($propMetaClass = $propClass.get($colname).type)
  #end
  ##
  #set ($numberProperties = ['IntegerProperty', 'LongProperty', 'FloatProperty', 'DoubleProperty'])
  #if ($numberProperties.contains($tableName))
    #livetable_filterNumberProperty()
  #elseif ($tableName == 'DateProperty')
    #livetable_filterDateProperty()
  #elseif ($tableName == 'DBStringListProperty')
    #livetable_filterDBStringListProperty()
  #elseif ($tableName == 'StringListProperty')
    #livetable_filterStringListProperty()
  #else
    ## StringProperty or LargeStringProperty
    #livetable_filterStringProperty()
  #end
#end


#**
 * NOTE: This macro uses variables defined in livetable_filterProperty . It was not meant to be used alone.
 *#
#macro (livetable_filterNumberProperty)
  #set($numberValue = $numbertool.toNumber($filterValue))
  #if($tableName == 'IntegerProperty' || $tableName == 'LongProperty')
    #if($tableName == 'LongProperty')
      #set($numberValue = $numberValue.longValue())
    #else
      ## IntegerProperty
      #set($numberValue = $numberValue.intValue())
    #end
    #set($whereSql = "${whereSql} and ${safe_tableAlias}.value = ?")
  #else
    #if($tableName == 'FloatProperty')
      #set($numberValue = $numberValue.floatValue())
    #else
      ## DoubleProperty
      #set($numberValue = $numberValue.doubleValue())
    #end
    #set($precision = 0.000001)
    #set($whereSql = "${whereSql} and abs(? - ${safe_tableAlias}.value) &lt;= ${precision}")
  #end
  #set($discard = $whereParams.add($numberValue))
#end


#**
 * NOTE: This macro uses variables defined in livetable_filterProperty . It was not meant to be used alone.
 *#
#macro (livetable_filterDateProperty)
  #if ($safe_tableAlias.startsWith('doc.'))
    #set ($dateProperty = $safe_tableAlias)
  #else
    #set ($dateProperty = "${safe_tableAlias}.value")
  #end
  #set ($timestamps = $filterValue.split('-'))
  #if ($timestamps.size() == 2)
    #set ($whereSql = "${whereSql} and $dateProperty &gt;= ? and $dateProperty &lt;= ?")
    #set ($discard = $whereParams.add($datetool.toDate($numbertool.toNumber($timestamps[0]))))
    #set ($discard = $whereParams.add($datetool.toDate($numbertool.toNumber($timestamps[1]))))
  #else
    ## Fall back to the older string matching
    #set ($whereSql = "${whereSql} and upper(str($dateProperty)) like upper(?)")
    #set ($discard = $whereParams.add("%$filterValue%"))
  #end
#end


#**
 * NOTE: This macro uses variables defined in livetable_filterProperty . It was not meant to be used alone.
 *#
#macro (livetable_filterDBStringListProperty)
  #if ($matchType == 'partial' || $matchType == 'prefix')
    ## We need to join with the list of values in order to be able to use the LIKE operator.
    #set ($matchTarget = "${safe_tableAlias}_item")
    #set ($joinPos = $mathtool.add($fromSql.lastIndexOf(" $safe_tableAlias"), $mathtool.add($safe_tableAlias.length(), 1)))
    #set ($fromSql = "$fromSql.substring(0, $joinPos) join ${safe_tableAlias}.list as $matchTarget $fromSql.substring($joinPos)")
  #else
    ## Perform exact matching by default (if no match type is specified).
    #set ($matchType = 'exact')
    #set ($matchTarget = "${safe_tableAlias}.list")
  #end
  #set ($filterValues = $request.getParameterValues($colname))
  #set ($filterQuery = "#livetable_getFilterQuery($matchTarget $matchType true $filterValues.size())")
  #set ($whereSql = "$whereSql and ($filterQuery.trim())")
  #foreach ($filterValue in $filterValues)
    #livetable_addFilterParam($filterValue $matchType $whereParams)
  #end
#end


#**
 * NOTE: This macro uses variables defined in livetable_filterProperty . It was not meant to be used alone.
 *#
#macro (livetable_filterStringListProperty)
  #set ($filterValues = $request.getParameterValues($colname))
  #set ($matchTarget = "concat('|', concat(${safe_tableAlias}.textValue, '|'))")
  #set ($filterQuery = "#livetable_getFilterQuery($matchTarget 'partial' false $filterValues.size())")
  #set ($whereSql = "${whereSql} and ($filterQuery.trim())")
  #foreach ($filterValue in $filterValues)
    #set ($discard = $whereParams.add("%|$filterValue|%"))
  #end
#end


#**
 * NOTE: This macro uses variables defined in livetable_filterProperty . It was not meant to be used alone.
 *#
#macro (livetable_filterStringProperty)
  #if ("$!matchType" == '')
    #if ($propMetaClass.endsWith('ListClass'))
      ## Perform exact matching by default for StaticListClass, DBListClass and DBTreeListClass
      ## when they are stored as StringProperty (i.e. single value and no relational storage).
      #set ($matchType = 'exact')
    #else
      ## Perform partial matching by default otherwise (if no match type is specified).
      #set ($matchType = 'partial')
    #end
  #end
  #set ($filterQuery = "#livetable_getFilterQuery(""${safe_tableAlias}.value"" $matchType false $valueCount)")
  #set ($whereSql = "${whereSql} and ($filterQuery.trim())")
  #foreach ($filterValue in $filterValues)
    #livetable_addFilterParam($filterValue $matchType $whereParams)
  #end
#end


#macro (livetable_getFilterQuery $column $matchType $isList $valueCount)
  #set ($joinOperator = "$!{request.get(""${colname}${joinModeMarker}"").toUpperCase()}")
  #if ($joinOperator != 'AND' &amp;&amp; $joinOperator != 'OR')
    #set ($joinOperator = 'AND')
  #end
  #if ($matchType == 'partial' || $matchType == 'prefix')
    $stringtool.repeat("upper($column) like upper(?)", " $joinOperator ", $valueCount)
  #elseif ($isList)
    $stringtool.repeat("? in elements($column)", " $joinOperator ", $valueCount)
  #elseif ($valueCount &gt; 1 &amp;&amp; $joinOperator == 'OR')
    $column in ($stringtool.repeat('?', ', ', $valueCount))
  #else
    $stringtool.repeat("$column = ?", ' AND ', $valueCount)
  #end
#end


#macro (livetable_addFilterParam $filterValue $matchType $params)
  #if ($matchType == 'partial')
    #set ($discard = $params.add("%$!filterValue%"))
  #elseif ($matchType == 'prefix')
    #set ($discard = $params.add("$!filterValue%"))
  #else
    #set ($discard = $params.add($filterValue))
  #end
#end


#**
 * Old alias of the #livetable_addColumnToQuery macro.
 * @deprecated since 2.2.3, use {@link #livetable_addColumnToQuery}
 *#
#macro(grid_addcolumn $colname)
  #livetable_addColumnToQuery($colname)
#end

#**
 * Generates a valid SQL table alias for the specified live table column.
 *#
#macro (livetable_getTableAlias $columnName)
  #set ($prefix = 'doc.')
  #if ($columnName.startsWith($prefix))
    #set ($suffix = $stringtool.removeStart($columnName, $prefix))
  #else
    ## Force a prefix to avoid the cases when the column name is a reserved SQL keyword.
    #set ($prefix = 'prop_')
    #set ($suffix = $columnName)
  #end
  ## Remove non-word characters.
  #set ($safe_tableAlias = "$prefix$suffix.replaceAll('\W', '')")
#end
{{/velocity}}</content>
</xwikidoc>
