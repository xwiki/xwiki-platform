<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:web="http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4">

  <display-name>XWiki</display-name>
  <description>XWiki Application</description>

  <!-- Main Restlet Application using Restlet's JAX-RS extension. -->
  <context-param>
    <param-name>org.restlet.application</param-name>
    <param-value>org.xwiki.rest.internal.XWikiRestletJaxRsApplication</param-value>
  </context-param>

  <!-- Filter that sets a custom encoding to all requests, since usually clients don't specify
       the encoding used for submitting the request, so by default containers fall back to the
       encoding globally configured in their settings. This allows XWiki to use a custom encoding,
       without affecting the whole container (and the other applications hosted). -->
  <filter>
    <filter-name>Set Character Encoding</filter-name>
    <filter-class>org.xwiki.container.servlet.filters.internal.SetCharacterEncodingFilter</filter-class>
    <!-- The encoding to use. This must be the same as the one in xwiki.cfg (hopefully only one
         encoding will be used later). -->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <!-- Whether to ignore and override the encoding specified by the client, when this actually
         happens. For example, AJAX requests made through XmlHttpRequests specify UTF-8. When this
         is set to false, the custom encoding is used only when there wasn't any encoding specified
         by the client. -->
    <init-param>
      <param-name>ignore</param-name>
      <param-value>false</param-value>
    </init-param>
  </filter>

  <!-- A filter that allows requests to be saved and reused later. For example when the current request contains an
       expired authentication token, and the authorization module redirects to the login page, all the information sent
       by the client would be lost; this filter allows to save all that information, and after a successful login,
       injects the saved data in the new request. -->
  <filter>
    <filter-name>RequestRestorer</filter-name>
    <filter-class>org.xwiki.container.servlet.filters.internal.SavedRequestRestorerFilter</filter-class>
  </filter>

  <!-- This filter is used to convert the HTML generated by the WYSIWYG editor to wiki syntax -->
  <filter>
    <filter-name>ConversionFilter</filter-name>
    <filter-class>org.xwiki.wysiwyg.server.filter.ConversionFilter</filter-class>
  </filter>

  <!-- Filter used to 'steal' webdav requests made to the application root -->
  <filter>
    <filter-name>DavFilter</filter-name>
    <filter-class>com.xpn.xwiki.plugin.webdav.XWikiDavFilter</filter-class>
  </filter>

  <!-- A filter that dispatches requests to the right action depending on the button pressed in the editing form. This
       is needed when javascript is disabled, since the browser cannot send the form data to different URLs depending on
       the button pressed. -->
  <filter>
    <filter-name>ActionDispatcher</filter-name>
    <filter-class>com.xpn.xwiki.web.ActionFilter</filter-class>
  </filter>

  <!-- This filter is used to initialize the XWiki context before processing a request. -->
  <filter>
    <filter-name>XWikiContextInitializationFilter</filter-name>
    <filter-class>org.xwiki.wysiwyg.server.filter.XWikiContextInitializationFilter</filter-class>
  </filter>

  <!-- This filter is used to initialize the XWiki context before processing a XML-RPC request. -->
  <filter>
    <filter-name>XWikiXmlRpcContextInitializationFilter</filter-name>
    <filter-class>org.xwiki.wysiwyg.server.filter.XWikiContextInitializationFilter</filter-class>
    <!-- A parameter used to identify the request as a an XML-RPC call -->
    <init-param>
      <param-name>mode</param-name>
      <param-value>2</param-value>
    </init-param>
  </filter>

  <!-- The encoding filter MUST always be the first one, as setting the encoding does not work after accessing the
       request data. -->
  <filter-mapping>
    <filter-name>Set Character Encoding</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>ERROR</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>RequestRestorer</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>ConversionFilter</filter-name>
    <servlet-name>action</servlet-name>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>DavFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>ActionDispatcher</filter-name>
    <servlet-name>action</servlet-name>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>XWikiContextInitializationFilter</filter-name>
    <servlet-name>gwtrpc</servlet-name>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <filter-mapping>
    <filter-name>XWikiXmlRpcContextInitializationFilter</filter-name>
    <servlet-name>xmlrpc</servlet-name>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <!-- TODO: This should be fixed. It's not normal that the REST module depends on the WYSIWYG module.
       "XWikiXmlRpcContextInitializationFilter" points to
       org.xwiki.wysiwyg.server.filter.XWikiContextInitializationFilter -->
  <filter-mapping>
    <filter-name>XWikiXmlRpcContextInitializationFilter</filter-name>
    <servlet-name>RestletServlet</servlet-name>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <!-- Initializes XWiki -->
  <listener>
    <listener-class>org.xwiki.container.servlet.XWikiServletContextListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.xwiki.container.servlet.SetThreadNameServletRequestListener</listener-class>
  </listener>

  <servlet>
    <servlet-name>action</servlet-name>
    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
    <init-param>
      <param-name>application</param-name>
      <param-value>ApplicationResources</param-value>
    </init-param>
    <init-param>
      <param-name>xwiki</param-name>
      <param-value>com.xpn.xwiki.XWiki</param-value>
    </init-param>
    <init-param>
      <param-name>config</param-name>
      <param-value>/WEB-INF/struts-config.xml</param-value>
    </init-param>
    <init-param>
      <param-name>debug</param-name>
      <param-value>2</param-value>
    </init-param>
    <init-param>
      <param-name>detail</param-name>
      <param-value>2</param-value>
    </init-param>
    <init-param>
      <param-name>validate</param-name>
      <param-value>true</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet>
    <servlet-name>redirectHomeServlet</servlet-name>
    <servlet-class>com.xpn.xwiki.web.HomePageRedirectServlet</servlet-class>
    <!-- Uncomment and edit this if you want to redirect to a different home page, or if you have different mappings.
         Note: the URL should not start with /, because it allows the context name to be changed. If it starts with /,
         then it should be an absolute URL, including the application context path.
    <init-param>
      <description>The address to redirect to when the client hits the root of the application.</description>
      <param-name>homePage</param-name>
      <param-value>bin/Main/</param-value>
    </init-param>
    -->
  </servlet>

  <servlet>
    <servlet-name>xmlrpc</servlet-name>
    <servlet-class>com.xpn.xwiki.xmlrpc.XWikiXmlRpcServlet</servlet-class>
    <init-param>
      <description>Sets, whether the servlet supports vendor extensions for XML-RPC.</description>
      <param-name>enabledForExtensions</param-name>
      <param-value>false</param-value>
    </init-param>
  </servlet>

  <!-- This is the entry point for all component-based XWiki GWT services. XWikiService servlet should be dropped
    in favor of this servlet when we completely move to components. -->
  <servlet>
    <servlet-name>gwtrpc</servlet-name>
    <servlet-class>org.xwiki.wysiwyg.server.XWikiRemoteServiceServlet</servlet-class>
  </servlet>

  <!-- This is the entry pointy for XWiki GWT services -->
  <servlet>
    <servlet-name>XWikiService</servlet-name>
    <servlet-class>com.xpn.xwiki.gwt.api.server.XWikiServiceImpl</servlet-class>
  </servlet>

  <!-- WebDAV servlet -->
  <servlet>
   <servlet-name>webdav</servlet-name>
   <servlet-class>com.xpn.xwiki.plugin.webdav.XWikiDavServlet</servlet-class>
  </servlet>

  <!-- RESTful API Restlet servlet -->
  <servlet>
    <servlet-name>RestletServlet</servlet-name>
    <servlet-class>
      org.xwiki.rest.internal.XWikiRestletServlet
    </servlet-class>
  </servlet>

  <!-- RESTful API mapping -->
  <servlet-mapping>
    <servlet-name>RestletServlet</servlet-name>
    <url-pattern>/rest/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>/bin/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>/wiki/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>/testbin/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>/xwiki/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>xmlrpc</servlet-name>
    <url-pattern>/xmlrpc/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>redirectHomeServlet</servlet-name>
    <url-pattern>/redirect</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>gwtrpc</servlet-name>
    <url-pattern>*.gwtrpc</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>XWikiService</servlet-name>
    <url-pattern>/XWikiService</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
   <servlet-name>webdav</servlet-name>
   <url-pattern>/webdav/*</url-pattern>
  </servlet-mapping>

  <!-- We override the mime type definition for javascript and css files, as some containers don't
       provide it, causing problems for javascript files containg velocity code, like
       fullscreen.js -->
  <mime-mapping>
    <extension>js</extension>
    <mime-type>text/javascript</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>css</extension>
    <mime-type>text/css</mime-type>
  </mime-mapping>

  <!-- In order to properly work, HTML Components MUST have the proper MIME type starting with XP SP2 -->
  <mime-mapping>
    <extension>htc</extension>
    <mime-type>text/x-component</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>bmp</extension>
    <mime-type>image/bmp</mime-type>
  </mime-mapping>

  <!-- MS Office mime mappings. We add these to provide out-of-the-box support for downloading Office files as
       attachments. This is for convenience as this is normally a Servlet Container set up but some containers
       do not have these defined by default. For docx/ppt/xlsx this means they will be recognized by IE as zip
       files. See http://littletechthoughts.blogspot.com/2009/01/ie-changes-docx-xlsx-pptx-to-zip-while.html
       for more details. -->
  <mime-mapping>
    <extension>doc</extension>
    <mime-type>application/msword</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>xls</extension>
    <mime-type>application/vnd.ms-excel</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>ppt</extension>
    <mime-type>application/vnd.ms-powerpoint</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>docx</extension>
    <mime-type>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>xlsx</extension>
    <mime-type>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>pptx</extension>
    <mime-type>application/vnd.openxmlformats-officedocument.presentationml.presentation</mime-type>
  </mime-mapping>

  <!-- Redirects to the Main.WebHome page if the user calls the root of the webapp, i.e.
       http://server:port/xwiki/
       Note 1: for this to work fine the redirect file needs to exist in the WAR
       Note 2: with Servlet 2.4 it's possible to have a Servlet directly specified in the welcome
               file list but right now we'd like XWiki to work out of the box with Servlet 2.3
  -->
  <welcome-file-list>
    <welcome-file>redirect</welcome-file>
  </welcome-file-list>

  <error-page>
    <error-code>404</error-code>
    <location>/bin/view/Main/DocumentDoesNotExist</location>
  </error-page>

  <!-- Uncomment if you wish to use a DataSource to define the Database connection
  <resource-ref>
    <description>DB Connection</description>
    <res-ref-name>jdbc/XWikiDS</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  -->

  <env-entry>
    <env-entry-name>XWikiConfig</env-entry-name>
    <env-entry-type>java.lang.String</env-entry-type>
    <env-entry-value>/WEB-INF/xwiki.cfg</env-entry-value>
  </env-entry>
</web-app>
