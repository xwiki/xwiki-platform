## ---------------------------------------------------------------------------
## See the NOTICE file distributed with this work for additional
## information regarding copyright ownership.
##
## This is free software; you can redistribute it and/or modify it
## under the terms of the GNU Lesser General Public License as
## published by the Free Software Foundation; either version 2.1 of
## the License, or (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## Lesser General Public License for more details.
##
## You should have received a copy of the GNU Lesser General Public
## License along with this software; if not, write to the Free
## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
## 02110-1301 USA, or see the FSF site: http://www.fsf.org.
## ---------------------------------------------------------------------------
#set ($defaultTreeOptions = {
  'checkboxes': false,
  'class': 'xtree',
  'contextMenu': false,
  'dragAndDrop': false,
  'edges': true,
  'exclusions': $collectiontool.set,
  'finder': false,
  'icons': true,
  'limit': 15,
  'links': false,
  'openTo': '',
  'reference': '',
  'root': '',
  'rootData': {},
  'showRoot': false
})

#macro (tree $options)
  <div #treeAttributes($options)></div>
#end

#macro (treeAttributes $options $isWikiSyntax)
  #set ($attributes = {})
  #getTreeAttributes($options $attributes)
  #set ($discard = $xwiki.linkx.use($services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar', 'tree.min.css',
    {'evaluate': true}), {'type': 'text/css', 'rel': 'stylesheet'}))
  #set ($discard = $xwiki.jsfx.use("uicomponents/widgets/tree#if ($services.debug.minify).min#end.js", true))
  #if ($attributes.get('data-finder'))
    #set ($discard = $xwiki.linkx.use($services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar',
      'finder.min.css', {'evaluate': true}), {'type': 'text/css', 'rel': 'stylesheet'}))
  #end
  #foreach ($entry in $attributes.entrySet())
    #set ($value = "$!entry.value")
    #if ($isWikiSyntax)
      #set ($escapedValue = $value.replaceAll('([~"])', '~$1'))
    #else
      #set ($escapedValue = $escapetool.xml($value))
    #end
    $entry.key = "$escapedValue"##
  #end
#end

#macro (getTreeAttributes $options $attributes)
  #set ($macro.options = {})
  #set ($discard = $macro.options.putAll($defaultTreeOptions))
  #set ($discard = $macro.options.putAll($options))
  #if ($macro.options.id)
    #set ($discard = $attributes.put('id', $macro.options.id))
  #end
  #set ($classes = ["$!macro.options.get('class')"])
  #set ($noLinks = $macro.options.links != 'true')
  #if ($noLinks)
    #set ($discard = $classes.add('jstree-no-links'))
  #end
  #set ($discard = $attributes.put('class', $stringtool.join($classes, ' ')))
  #set ($discard = $attributes.put('data-responsive', true))
  #if ("$!macro.options.reference" != '')
    #set ($resourceParams = {})
    #foreach ($resourceParameterName in ['exclusions', 'limit', 'root', 'showRoot'])
      #set ($value = $macro.options.get($resourceParameterName))
      #set ($defaultValue = $defaultTreeOptions.get($resourceParameterName))
      #if ("$!value" != '' && $value != "$!defaultValue")
        #set ($discard = $resourceParams.put($resourceParameterName, $value))
      #end
    #end
    #set ($reference = $macro.options.reference)
    #if ($reference.startsWith('path:'))
      ## URL/Path reference
      #set ($resourceURL = $reference.substring(5))
      #set ($resourceURL = "$resourceURL#if ($resourceURL.indexOf('?') < 0)?#else&#end$escapetool.url($resourceParams)")
    #else
      ## Document reference
      #if ($reference.startsWith('doc:'))
        #set ($reference = $reference.substring(4))
      #end
      #set ($resourceParams.outputSyntax = 'plain')
      #set ($resourceURL = $xwiki.getURL($reference, 'get', $escapetool.url($resourceParams)))
    #end
    ## The tree data is retrieved asynchronously from the specified URL.
    #set ($discard = $attributes.put('data-url', $resourceURL))
  #end
  ## Feed the tree data as JSON. See https://www.jstree.com/docs/json/ .
  #if ($macro.options.data)
    #set ($discard = $attributes.put('data-json', $jsontool.serialize($macro.options.data)))
  #end
  ## If the root node is shown then the root data is retrieved using data-url. Otherwise, the root data can be specified
  ## using the rootData option which translates into the data-root attribute.
  #if (!$macro.options.showRoot)
    #set ($discard = $attributes.put('data-root', $jsontool.serialize($macro.options.rootData)))
  #end
  #set ($dragAndDrop = $macro.options.dragAndDrop == 'true')
  #set ($discard = $attributes.put('data-dragAndDrop', $dragAndDrop))
  #set ($contextMenu = $macro.options.contextMenu == 'true')
  #set ($discard = $attributes.put('data-contextMenu', $contextMenu))
  #set ($icons = $macro.options.icons == 'true')
  #set ($discard = $attributes.put('data-icons', $icons))
  #set ($edges = $macro.options.edges == 'true')
  #set ($discard = $attributes.put('data-edges', $edges))
  #set ($checkboxes = $macro.options.checkboxes == 'true')
  #set ($discard = $attributes.put('data-checkboxes', $checkboxes))
  #set ($discard = $attributes.put('data-openTo', $macro.options.openTo))
  #set ($finder = $macro.options.finder == 'true')
  #set ($discard = $attributes.put('data-finder', $finder))
  ## Custom jsTree configuration. See https://www.jstree.com/docs/config/ .
  #if ($macro.options.config)
    #set ($discard = $attributes.put('data-config', $jsontool.serialize($macro.options.config)))
  #end
#end

#macro (prepareTreeOptions $options)
  ## TODO: Add support for escaping the comma in the node id.
  #set ($exclusions = $stringtool.split($options.exclusions, ','))
  #if ($exclusions && $exclusions.size() > 0)
    #set ($options.exclusions = $collectiontool.set)
    ## We need to convert the String[] to a List<String> before calling addAll (which expects a collection).
    #set ($discard = $options.exclusions.addAll($exclusions.subList(0, $exclusions.size())))
  #end
#end
