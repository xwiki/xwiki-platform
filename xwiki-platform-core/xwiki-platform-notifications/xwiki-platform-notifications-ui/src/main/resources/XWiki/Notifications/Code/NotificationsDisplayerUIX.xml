<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="XWiki.Notifications.Code.NotificationsDisplayerUIX" locale="">
  <web>XWiki.Notifications.Code</web>
  <name>NotificationsDisplayerUIX</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.Notifications.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity wiki="true"}}
#********************************************************
Get the actual notifications.
********************************************************###
## We use POST since we are sending the reference of the document and we want to avoid special characters in the URL.
#if ('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'getNotifications' == $request.action)
  #set ($requestedDocumentReference = $services.model.resolveDocument($request.document))
  {{html clean="false"}} ## we need clean="false" because we want to display the raw content
  #if ("$!xcontext.userReference" != '' &amp;&amp; $services.notification.isEnabled())
    &lt;div class="notifications-header"&gt;
      &lt;div class="clearfix"&gt;
        &lt;div class="col-xs-4"&gt;
          &lt;p&gt;&lt;strong&gt;$escapetool.xml($services.localization.render('notifications.menu.header'))&lt;/strong&gt;&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="col-xs-8 text-right"&gt;
          &lt;p&gt;
            &lt;span class="notifications-header-link"&gt;
              &lt;a href="$xwiki.getURL('XWiki.Notifications.Code.NotificationRSSService', 'get', 'outputSyntax=plain')"
                  class="notifications-header-link notifications-rss-link" rel="nofollow external"&gt;
                $services.icon.renderHTML('rss')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.rss.feedLink'))
              &lt;/a&gt;
            &lt;/span&gt;
            &lt;span class="notifications-header-link"&gt;
              &lt;a href="$xwiki.getURL($xcontext.userReference, 'view', 'category=notifications')" class="notifications-settings" rel="nofollow"&gt;
                $services.icon.renderHTML('cog')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.menu.header.settings'))
              &lt;/a&gt;
            &lt;/span&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="notifications-header-uix col-xs-12"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="notifications-area clearfix"&gt;
  {{/html}}

  {{notifications displayReadStatus="true" useUserPreferences="true" count="10" displayRSSLink="false" /}}

  {{html clean="false"}}
  &lt;/div&gt;
  {{/html}}
  #end
#end
{{/velocity}}

{{velocity wiki="false"}}
#********************************************************
    Get the number of unread notifications as JSON
********************************************************###
#if ('get' == $xcontext.action &amp;&amp; 'GET' == $request.method &amp;&amp; 'getUnreadCount' == $request.action)
  #set ($discard = $response.setHeader('Cache-Control', 'no-cache'))
    #set ($discard = $response.setHeader('Content-Type', 'application/json'))
    $jsontool.serialize({'unread': $services.notification.sources.getEventsCount(21)})
#********************************************************
             Mark a notification as read
********************************************************###
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'read' == $request.action)
  #set ($eventIds = $request.eventIds.split(','))
  #set ($read = "$!request.read")
  #if ($eventIds.length == 0 || $read.isEmpty())
    #set ($discard = $response.setStatus(400))
  #else
    #foreach ($eventId in $eventIds)
      #set ($discard = $services.notification.saveEventStatus($eventId, $read.equals('true')))
    #end
  #end
#********************************************************
           Change the start date of the user
********************************************************###
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'setStartDate' == $request.action)
  #set ($startDate = $datetool.date)
  #if ("$!request.date" != '')
    #set ($startDate = $xwiki.jodatime.getDateTime($numbertool.toNumber($request.date).longValue()).toDate())
  #end
  #set ($discard = $services.notification.preferences.setStartDate($startDate))
  #set ($discard = $services.notification.filters.setStartDate($startDate))
#********************************************************
           Clear all event status until a specific date for the user
********************************************************###
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; 'clear' == $request.action)
  #set ($startDate = $datetool.date)
  #if ("$!request.date" != '')
    #set ($startDate = $xwiki.jodatime.getDateTime($numbertool.toNumber($request.date).longValue()).toDate())
  #end
  #set ($discard = $services.notification.preferences.setStartDate($startDate))
  #set ($discard = $services.notification.filters.setStartDate($startDate))
  #set ($discard = $services.notification.clearAllStatus($startDate))
#********************************************************
             Watch/Unwatch a location
********************************************************###
#elseif('get' == $xcontext.action &amp;&amp; 'POST' == $request.method &amp;&amp; ('watchLocation' == $request.action || 'unwatchLocation' == $request.action))
  #if ("$!request.type" == 'space')
    #set ($location = $services.model.resolveSpace($request.location))
  #elseif ("$!request.type" == 'wiki')
    #set ($location = $services.model.createWikiReference($request.location))
  #else
    #set ($location = $services.model.resolveDocument($request.location))
  #end
  #if ('watchLocation' == $request.action)
    #set ($discard = $services.notification.watch.watchLocation($location))
  #else
    #set ($discard = $services.notification.watch.unwatchLocation($location))
  #end
  ## Display the new states
  #if ("$!request.currentDoc" != '')
    #set ($currentDoc = $services.model.resolveDocument($request.currentDoc))
    #set ($states = {
      'document': $services.notification.watch.getLocationWatchedStatus($currentDoc),
      'space': $services.notification.watch.getLocationWatchedStatus($currentDoc.lastSpaceReference),
      'wiki': $services.notification.watch.getLocationWatchedStatus($currentDoc.wikiReference)
    })
    #set ($discard = $response.setContentType('application/json'))
    $jsontool.serialize($states)
  #end
#end
{{/velocity}}
</content>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>2f3e29b0-440a-4cc8-9a4c-b98f0a647f55</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require(['jquery', 'XWikiAsyncNotificationsMacro', 'xwiki-meta'],
        function ($, XWikiAsyncNotificationsMacro, xm) {
  'use strict';
  /**
   * Maximum number of events to count
   */
  var maxCountNumber = 20;

  /**
   * The current number of unread notifications (-1 means we don't know yet how many notifications there are)
   */
  var notificationCount = -1;

  /**
   * URL to the service that return the notifications to display
   */
  var url = new XWiki.Document(XWiki.Model.resolve('XWiki.Notifications.Code.NotificationsDisplayerUIX',
    XWiki.EntityType.DOCUMENT)).getURL('get');

  /**
   * Will contain the Notifications Macro object.
   */
  var macro = 0;

  /**
   * Update notification counter
   */
  var updateNotificationCount = function (count) {
    // Get the counter
    var counter = $('.notifications-count');
    // Update the global variable
    notificationCount = count;
    // Remove the counter if there is no unread notifications
    if (count == 0) {
      counter.remove();
      return;
    }
    // Create the counter if it is not present
    if (counter.length == 0) {
      counter = $('&lt;span&gt;').addClass('notifications-count badge');
      $('#tmNotifications &gt; button.dropdown-toggle').append(counter);
    }
    // Update the counter
    counter.text(count);
    if (count &gt; maxCountNumber) {
      counter.text(maxCountNumber + '+');
    };
  };

  /**
   * Add a button to clear all the notifications (which actually only change the start date of the user).
   */
  var createCleanButton = function (startDate) {
    var notificationsHeader = $('.notifications-header-uix');
    // If the clean button is already here, don't do anything
    if (notificationsHeader.find('a.notification-event-clean').length &gt; 0) {
      return;
    }
    var markAllReadButton = $('&lt;a href="#"&gt;')
      .addClass('notification-event-clean')
      .html($jsontool.serialize("$services.icon.renderHTML('trash')&amp;nbsp;$escapetool.xml($services.localization.render('notifications.menu.clear'))"))
      .on('click', function (event) {
        // Avoid the menu closing
        event.preventDefault();
        // Ask confirmation
        new XWiki.widgets.ConfirmationBox({
          onYes: function(event) {
            // Avoid the menu closing
            event.stopPropagation();
            // Display a saving message
            var notification = new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.menu.clearing'))", 'inprogress');
            // Send the request to change the start date
            $.post(url, {
              outputSyntax: 'plain',
              action: 'clear',
              date: startDate
            }).then(() =&gt; {
              // Display the success message
              notification.hide();
              new XWiki.widgets.Notification("$escapetool.javascript($services.localization.render('notifications.menu.cleared'))", 'done');
              // Remove the notifications from the UI and display the "nothing!" message instead.
              $('.notifications-area').html($('&lt;p&gt;').addClass('text-center noitems').text("$escapetool.javascript($services.localization.render('notifications.menu.nothing'))"));
              // Update the notifications counter
              updateNotificationCount(0);
            });
          },
          onNo: function(event) {
            // Avoid the menu closing
            event.stopPropagation();
          }
        });
      });
    // Append the button just before the "settings" link in the menu
    $('.notifications-header-uix').append(markAllReadButton);
  };

  /**
   * Get the number of unread notifications.
   */
  var getUnreadNotificationsCount = function (asyncId) {
    var restURL = '$!{escapetool.javascript($request.contextPath)}/rest/notifications/count?media=json';
    var params = {
      'userId':              XWiki.Model.serialize(xm.userReference),
      'useUserPreferences':  true,
      'currentWiki':         xm.documentReference.extractReferenceValue(XWiki.EntityType.WIKI),
      'async':               true
    };
    if (asyncId) {
      params.asyncId = asyncId;
    }
    $.ajax(restURL, {cache: false, data: params}).done(function (data, textStatus, jqXHR) {
      switch (jqXHR.status) {
        case 200:
          // 200 means that the search is done, we displayer the count notifications
          updateNotificationCount(data.unread);
        break;
        case 202:
          // 202 means that the background search is still running, we wait 1 second and ask again if it's done this time
          setTimeout(getUnreadNotificationsCount, 1000, data.asyncId);
        break;
      }
    });
  };

  /**
   * Initialize the widget.
   */
  $(function () {

    var container = $('.notification-uix');
    getUnreadNotificationsCount();
    container.on('eventMarkedAsRead', function (notif) {
      if (notificationCount &lt;= maxCountNumber) {
        // Update the counter only if we really know how many notifications we have, which is not true if we display the "20+" message.
        // We could even hide the counter, but I am affraid it would let the user think there is no more notifications. We could also send an
        // ajax request to get the new count, but I do not want to flood the server.
        updateNotificationCount(notificationCount - 1);
      }
    });

    /**
     * Prevent the dropdown menu for being closed when the user clicks on the notifications menu.
     */
    $('#tmNotifications .dropdown-menu').on('click', function(event) {
      event.stopPropagation();
    });

    var processEvents = function (mutations) {
      for (var i = 0; i &lt; mutations.length; i++) {
        var mutation = mutations[i];
        for (var j = 0; j &lt; mutation.addedNodes.length; j++) {
          var element = mutation.addedNodes[j];

          if ($(element).hasClass('notification-event')) {
            // We don't specify the date since we want to fallback on the current date in the end.
            createCleanButton();
          }
          if ($(element).hasClass('notifications-count')) {
            // We call the method to handle the special cases like 0 notif etc.
            updateNotificationCount($(element).text());
          }
        }
      }
    };
    var observer = new MutationObserver(processEvents);
    observer.observe(document, { childList: true, subtree : true});

    /**
    * Load the notifications content when the user open the notification menu (lazy loading to have better scalability).
    */
    var notificationsMenusHasBeenOpened = false;
    var documentReference = xm.documentReference.toString();
    $('#tmNotifications').on('show.bs.dropdown', function () {
      // Don't load the notifications if the menu has already be opened before.
      // use POST to send the document reference without any issue with URL.
      if (!notificationsMenusHasBeenOpened) {
        $.post(url, {
          outputSyntax: 'html',
          action: 'getNotifications',
          document: documentReference
        }).then(html =&gt; {
          $('.notification-uix').html(html).removeClass('loading');
          $('.notification-uix').find('.notifications-macro').each(function() {
            new XWikiAsyncNotificationsMacro(this);
          });
          $(document).trigger('xwiki:notification:loaded');
        });
      }
      notificationsMenusHasBeenOpened = true;
    });

  });

});
</code>
    </property>
    <property>
      <name>Notifications Displayer</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c93bccb-231c-40ff-a50a-c1706e724afe</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')
/***********************************************
 * Notifications Header
 ***********************************************/
#tmNotifications {
  &amp; &gt; button {
    background-color: @navbar-default-bg;
    color: @navbar-default-link-color;
    border: 0;
    padding: 10px @navbar-padding-horizontal;

    @media (min-width: @grid-float-breakpoint) {
      padding: @navbar-padding-vertical @navbar-padding-horizontal;
    }
    &amp;:hover,
    &amp;:focus {
      background-color: @navbar-default-link-hover-bg;
      color: @navbar-default-link-hover-color;
    }
    &amp;:active {
      background-color: @navbar-default-link-active-bg;
      color: @navbar-default-link-active-color;
    }
  }
  
  .dropdown-menu {
    box-shadow: 0 6px 24px rgba(0, 0, 0, .175);
    border: none;
  }
}

.notifications-count {
  color: @btn-danger-color;
  background-color: @btn-danger-bg;
  position: absolute;
  top: 0;
}

@media (min-width: 768px) {
  .notifications-count {
    top: 3px;
    right: 3px;
  }
}

.notifications-header-uix {
  text-align: right;
  padding-bottom: 0.8em;
}

.notifications-header-link {
  white-space: nowrap;
}

/***********************************************
 * Notification Toggles
 ***********************************************/
.notifications-toggles {
  text-align: center;
  max-width: 320px;
}

.notifications-toggles .bootstrap-switch {
  margin: 0 3px 0 3px;
}

.notifications-toggles .bootstrap-switch .bootstrap-switch-label {
  background-color: $theme.buttonSecondaryBackgroundColor;
  color: $theme.buttonSecondaryTextColor;
}

/***********************************************
 * Notification Area
 ***********************************************/
.notifications-area {
  margin-top: 10px;
  max-height: 600px;
  min-height: 20px;
  overflow-x: hidden;
  overflow-y: scroll;
  /* 320px is the width of the smallest smartphones right now, so we don't use a larger width */
  width: 320px;
}</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name>LESS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>XWiki.Notifications.Code.NotificationsDisplayerUIX</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>7e3afaf5-5bb9-411e-b48e-bd9c6229dbc9</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <async_cached>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_cached</name>
        <number>3</number>
        <prettyName>Cached</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_cached>
      <async_context>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>async_context</name>
        <number>4</number>
        <prettyName>Context elements</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator>, </separator>
        <separators>|, </separators>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <values>action=Action|doc.reference=Document|doc.revision|icon.theme=Icon theme|locale=Language|rendering.defaultsyntax=Default syntax|rendering.restricted=Restricted|rendering.targetsyntax=Target syntax|request.base=Request base URL|request.cookies|request.headers|request.parameters=Request parameters|request.remoteAddr|request.session|request.url=Request URL|request.wiki=Request wiki|sheet|user=User|wiki=Wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </async_context>
      <async_enabled>
        <defaultValue>0</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType/>
        <name>async_enabled</name>
        <number>2</number>
        <prettyName>Asynchronous rendering</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </async_enabled>
      <content>
        <disabled>0</disabled>
        <editor>Text</editor>
        <name>content</name>
        <number>1</number>
        <prettyName>Executed Content</prettyName>
        <restricted>0</restricted>
        <rows>25</rows>
        <size>120</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>5</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>6</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>parameters</name>
        <number>7</number>
        <prettyName>Extension Parameters</prettyName>
        <restricted>0</restricted>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>8</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <async_cached>1</async_cached>
    </property>
    <property>
      <async_context>
        <value>doc.reference</value>
        <value>request.wiki</value>
        <value>user</value>
      </async_context>
    </property>
    <property>
      <async_enabled>0</async_enabled>
    </property>
    <property>
      <content>{{velocity}}
  #if ("$!xcontext.userReference" != '' &amp;&amp; $services.notification.isEnabled())
    #set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.Macro.NotificationsMacro'))
    #set ($discard = $xwiki.jsx.use('XWiki.Notifications.Code.NotificationsDisplayerUIX'))
    #set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.Macro.NotificationsMacro'))
    #set ($discard = $xwiki.ssx.use('XWiki.Notifications.Code.NotificationsDisplayerUIX'))
    {{html clean="false"}} ## We need the clean false to avoid getting a supplementary ul element.
    &lt;li class="notification-uix loading"&gt;&lt;/li&gt;
    {{/html}}
  #end
{{/velocity}}</content>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.notifications</extensionPointId>
    </property>
    <property>
      <name>xwiki-platform-notifications-ui</name>
    </property>
    <property>
      <parameters>order=20000
separator=true</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
